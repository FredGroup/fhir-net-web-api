<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="$(SolutionDir)\packages\Hl7.Fhir.Support.4.1.0\lib\net452\Hl7.Fhir.Support.dll" #>
<#@ assembly name="$(SolutionDir)\packages\Hl7.Fhir.Support.Poco.4.1.0\lib\net452\Hl7.Fhir.Support.Poco.dll" #>
<#@ assembly name="$(SolutionDir)\packages\Hl7.Fhir.ElementModel.4.1.0\lib\net452\Hl7.Fhir.ElementModel.dll" #>
<#@ assembly name="$(SolutionDir)\packages\Hl7.FhirPath.4.1.0\lib\net452\Hl7.FhirPath.dll" #>
<#@ assembly name="$(SolutionDir)\packages\Hl7.Fhir.Serialization.4.1.0\lib\net452\Hl7.Fhir.Serialization.dll" #>
<#@ assembly name="$(SolutionDir)\packages\Hl7.Fhir.R4B.4.1.0\lib\net452\Hl7.Fhir.R4B.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="Hl7.Fhir.Introspection" #>
<#@ output extension=".cs" encoding="utf-8" #>
<#@ include file="TemplateFileManagerV2.1.ttinclude" #><# var manager = TemplateFileManager.Create(this);
            if (!Hl7.Fhir.Model.ModelInfo.FhirTypeToCsType.ContainsKey("Citation"))
            {
                Hl7.Fhir.Model.ModelInfo.FhirTypeToCsType.Add("Citation", typeof(Hl7.Fhir.Model.Citation));
                Hl7.Fhir.Model.ModelInfo.FhirCsTypeToString.Add(typeof(Hl7.Fhir.Model.Citation), "Citation");
            }

		manager.StartNewFile("FhirCustomXmlReader.cs", null, null);
#>
// -----------------------------------------------------------------------------
// GENERATED CODE - DO NOT EDIT
// -----------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using Hl7.Fhir.Model;
using Hl7.Fhir.Utility;
using System.Xml.Serialization;
using System.Xml;
using System.Xml.Linq;
using System.Threading;

namespace Hl7.Fhir.CustomSerializer
{
    public partial class FhirCustomXmlReader
    {
        public Resource Parse(XmlReader reader, OperationOutcome outcome, string locationPath = null, CancellationToken cancellationToken = new CancellationToken())
        {
			while (reader.Read())
			{
				// skip to the first start element node (over the processing instructions)
				if (reader.IsStartElement())
					break;
			}
            if (string.IsNullOrEmpty(locationPath))
                locationPath = reader.Name;
            Resource result;
            switch (reader.Name)
            {
<#	foreach (string ResourceName in Hl7.Fhir.Model.ModelInfo.SupportedResources)
    {
#>                case "<#= ResourceName #>":
                    result = new <#= ResourceName #>();
                    Parse(result as <#= ResourceName #>, reader, outcome, locationPath, cancellationToken);
                    break;
<#	}
#>
                default:
                    result = null;
                    break;
            }
            return result;
        }

        public async System.Threading.Tasks.Task<Resource> ParseAsync(XmlReader reader, OperationOutcome outcome, string locationPath = null, CancellationToken cancellationToken = new CancellationToken())
        {
			while (await reader.ReadAsync().ConfigureAwait(false))
			{
				// skip to the first start element node (over the processing instructions)
				if (reader.IsStartElement())
					break;
			}
            if (string.IsNullOrEmpty(locationPath))
                locationPath = reader.Name;
            Resource result;
            switch (reader.Name)
            {
<#	foreach (string ResourceName in Hl7.Fhir.Model.ModelInfo.SupportedResources)
    {
#>                case "<#= ResourceName #>":
                    result = new <#= ResourceName #>();
                    await ParseAsync(result as <#= ResourceName #>, reader, outcome, locationPath, cancellationToken);
                    break;
<#	}
#>
                default:
                    result = null;
                    break;
            }
            return result;
        }
<#
	Dictionary<string, Type> generateTypes = new Dictionary<string, Type>();
    foreach (var v in Hl7.Fhir.Model.ModelInfo.FhirTypeToCsType.Keys)
    {
        var dtt = Hl7.Fhir.Model.ModelInfo.GetTypeForFhirType(v);
		if (dtt != null)
		{
			if (!Hl7.Fhir.Model.ModelInfo.IsKnownResource(v) && !generateTypes.ContainsValue(dtt))
				generateTypes.Add(dtt.FullName, dtt);

            // also check for nested fhir type classes
            foreach (var nt in dtt.GetNestedTypes())
            {
                if (nt.IsClass)
                {
					if (!generateTypes.ContainsValue(nt))
					{
						generateTypes.Add(nt.FullName, nt);
						System.Diagnostics.Trace.WriteLine($"\t{nt.FullName}: --");
					}
                }
            }
		}
    }
#>
	}
}
<#

	foreach (string ResourceName in Hl7.Fhir.Model.ModelInfo.SupportedResources)
    {
		Type tr = Hl7.Fhir.Model.ModelInfo.GetTypeForFhirType(ResourceName);
		if (tr == null)
		{
	        WriteLine($"// no support for {ResourceName}");
			continue;
		}
        if (tr.BaseType.Name != "DomainResource" && tr.BaseType.Name != "Resource")
		{
			// WriteLine("Resourcename: " + ResourceName + " : " + tr.BaseType.Name);
			continue;
        }

		// tr.DeclaredNestedTypes
		if (string.IsNullOrEmpty(Hl7.Fhir.Model.ModelInfo.GetFhirTypeNameForType(tr)))
		{
	        WriteLine($"// no type support for {ResourceName}");
			continue;
		}

        if (Hl7.Fhir.Model.ModelInfo.IsCoreSuperType(Hl7.Fhir.Model.ModelInfo.GetFhirTypeNameForType(tr)))
            continue;

		//==============
		manager.StartNewFile("FhirCustomXmlReader."+tr.Name + ".cs", null, "Generated");
#>
// -----------------------------------------------------------------------------
// GENERATED CODE - DO NOT EDIT
// -----------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using Hl7.Fhir.Model;
using Hl7.Fhir.Utility;
using System.Xml.Serialization;
using System.Xml;
using System.Xml.Linq;
using System.Threading;

namespace Hl7.Fhir.CustomSerializer
{
    public partial class FhirCustomXmlReader
    {
		private void Parse(<#= tr.Name #> result, XmlReader reader, OperationOutcome outcome, string locationPath, CancellationToken cancellationToken)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				if (!reader.Read())
					return;

			if (reader.IsEmptyElement)
				return;

			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (cancellationToken.IsCancellationRequested)
					return;
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
<#
		PushIndent("\t");
		PushIndent("\t");
		PushIndent("\t");
		PushIndent("\t");
		PushIndent("\t");
		WriteResourceProperties(tr, generateTypes, false);
		PopIndent();
		PopIndent();
		PopIndent();
		PopIndent();
		PopIndent();
		PopIndent();
#>
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							HandlePropertyNotFound(reader, outcome, locationPath + "." + reader.Name);
							// reader.ReadInnerXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}

		private async System.Threading.Tasks.Task ParseAsync(<#= tr.Name #> result, XmlReader reader, OperationOutcome outcome, string locationPath, CancellationToken cancellationToken)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				if (!await reader.ReadAsync().ConfigureAwait(false))
					return;

			if (reader.IsEmptyElement)
				return;

			// otherwise proceed to read all the other nodes
			while (await reader.ReadAsync().ConfigureAwait(false))
			{
				if (cancellationToken.IsCancellationRequested)
					return;
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
<#
		PushIndent("\t");
		PushIndent("\t");
		PushIndent("\t");
		PushIndent("\t");
		PushIndent("\t");
		WriteResourceProperties(tr, generateTypes, true);
		PopIndent();
		PopIndent();
		PopIndent();
		PopIndent();
		PopIndent();
		PopIndent();
#>
						default:
							// Property not found
							await HandlePropertyNotFoundAsync(reader, outcome, locationPath + "." + reader.Name);
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
	}
}
<#}

	foreach (Type tr in generateTypes.Values)
	{
        // if (!Hl7.Fhir.Model.ModelInfo.IsCoreModelType(Hl7.Fhir.Model.ModelInfo.GetFhirTypeNameForType(tr)))
        //    continue;
		string typeName = GetTypeName(tr);
		if (tr.IsEnum)
			continue;
		if (typeName.StartsWith("System.Collections.Generic.List"))
			continue;
		if (typeName.StartsWith("Hl7.Fhir.Model.Code<"))
			continue;
		if (typeName == "Hl7.Fhir.Model.Element" || typeName == "Hl7.Fhir.Model.Duration")
			continue;
		if (typeName == "Hl7.Fhir.Model.DomainResource")
			continue;
		else if (typeName == "Hl7.Fhir.Model.Resource")
			continue;
		//==============
		manager.StartNewFile("FhirCustomXmlReader."+ typeName.Replace("Hl7.Fhir.Model.", "") + ".cs", null, "Generated");
#>
// -----------------------------------------------------------------------------
// GENERATED CODE - DO NOT EDIT
// -----------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using Hl7.Fhir.Model;
using Hl7.Fhir.Utility;
using System.Xml.Serialization;
using System.Xml;
using System.Xml.Linq;
using System.Threading;

namespace Hl7.Fhir.CustomSerializer
{
    public partial class FhirCustomXmlReader
    {
<#		if (typeName == "Hl7.Fhir.Model.BackboneElement")
			WriteLine("\t\t[Obsolete(\"This should not be used\",false)]");
#>
		public void Parse(<#= typeName#> result, XmlReader reader, OperationOutcome outcome, string locationPath, CancellationToken cancellationToken)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				if (!reader.Read())
					return;

<#
		if (HasAttributeProperties(tr))
		{
#>
			if (reader.MoveToFirstAttribute())
			{
				do
				{
					switch (reader.Name)
					{
<#
			PushIndent("\t");
			PushIndent("\t");
			PushIndent("\t");
			PushIndent("\t");
			PushIndent("\t");
			WritePrimitiveElementProperties(tr, false);
			PopIndent();
			PopIndent();
			PopIndent();
			PopIndent();
			PopIndent();
#>
					}
				} while (reader.MoveToNextAttribute());
				reader.MoveToElement();
			}
<#
		}
#>

			if (reader.IsEmptyElement)
				return;

			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (cancellationToken.IsCancellationRequested)
					return;
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
<#
		PushIndent("\t");
		PushIndent("\t");
		PushIndent("\t");
		PushIndent("\t");
		PushIndent("\t");
WriteElementProperties(tr, false);
		PopIndent();
		PopIndent();
		PopIndent();
		PopIndent();
		PopIndent();
#>
						default:
							// Property not found
							HandlePropertyNotFound(reader, outcome, locationPath + "." + reader.Name);
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}

<#		if (typeName == "Hl7.Fhir.Model.BackboneElement")
			WriteLine("\t\t[Obsolete(\"This should not be used\",false)]");
#>
		public async System.Threading.Tasks.Task ParseAsync(<#= typeName#> result, XmlReader reader, OperationOutcome outcome, string locationPath, CancellationToken cancellationToken)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				if (!await reader.ReadAsync().ConfigureAwait(false))
					return;

<#
		if (HasAttributeProperties(tr))
		{
#>
			if (reader.MoveToFirstAttribute())
			{
				do
				{
					switch (reader.Name)
					{
<#
			PushIndent("\t");
			PushIndent("\t");
			PushIndent("\t");
			PushIndent("\t");
			PushIndent("\t");
			WritePrimitiveElementProperties(tr, false);
			PopIndent();
			PopIndent();
			PopIndent();
			PopIndent();
			PopIndent();
#>
					}
				} while (reader.MoveToNextAttribute());
				reader.MoveToElement();
			}
<#
		}
#>

			if (reader.IsEmptyElement)
				return;

			// otherwise proceed to read all the other nodes
			while (await reader.ReadAsync().ConfigureAwait(false))
			{
				if (cancellationToken.IsCancellationRequested)
					return;
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
<#
		PushIndent("\t");
		PushIndent("\t");
		PushIndent("\t");
		PushIndent("\t");
		PushIndent("\t");
WriteElementProperties(tr, true);
		PopIndent();
		PopIndent();
		PopIndent();
		PopIndent();
		PopIndent();
#>
						default:
							// Property not found
							await HandlePropertyNotFoundAsync(reader, outcome, locationPath + "." + reader.Name);
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
	}
}
<#
	}
#>
<#
	// -------------------------------------------------------------------------
	// FINISH The output of the project
	manager.Process();
#>
<#+

	public void WriteResourceProperties(System.Type tr, Dictionary<string, Type> generateTypes, bool asyncGeneration)
	{
		if (tr.BaseType.IsSubclassOf(typeof(Hl7.Fhir.Model.Base)))
		{
			WriteResourceProperties(tr.BaseType, null, asyncGeneration);
		}

		var props = tr.GetProperties(BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Instance);
		foreach (var prop in props)
		{
			if (prop.GetCustomAttribute(typeof(NotMappedAttribute)) != null)
				continue;
            var feas = prop.GetCustomAttributes<FhirElementAttribute>();
			if (!feas.Any())
				continue;
            var fea = feas.Last();
			if (fea != null)
			{
				WriteProperty(tr, prop, fea, generateTypes, asyncGeneration);
			}
		}
	}

	public void WriteElementProperties(System.Type tr, bool asyncGeneration)
	{
		if (tr.BaseType.IsSubclassOf(typeof(Hl7.Fhir.Model.Base)))
			WriteElementProperties(tr.BaseType, asyncGeneration);
		var props = tr.GetProperties(BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Instance);
        foreach (var prop in props)
        {
            if (prop.GetCustomAttribute(typeof(NotMappedAttribute)) != null)
                continue;
            var feas = prop.GetCustomAttributes<FhirElementAttribute>();
			if (!feas.Any())
				continue;
            var fea = feas.Last();
			if (fea.XmlSerialization == Hl7.Fhir.Specification.XmlRepresentation.XmlAttr)
				continue;
			if (fea.XmlSerialization != Hl7.Fhir.Specification.XmlRepresentation.None)
				WriteLine($"\t// Xml Serialization: {fea.XmlSerialization}");
			WriteProperty(tr, prop, fea, null, asyncGeneration);
		}
	}

	public bool HasAttributeProperties(System.Type tr)
	{
		var props = tr.GetProperties(BindingFlags.Public | BindingFlags.FlattenHierarchy | BindingFlags.Instance);
        foreach (var prop in props)
        {
            if (prop.GetCustomAttribute(typeof(NotMappedAttribute)) != null)
                continue;
            var feas = prop.GetCustomAttributes<FhirElementAttribute>();
			if (!feas.Any())
				continue;
            var fea = feas.Last();
			if (fea == null)
				continue;
			if (fea.XmlSerialization == Hl7.Fhir.Specification.XmlRepresentation.XmlAttr)
				return true;
		}
		return false;
	}

	public void WritePrimitiveElementProperties(System.Type tr, bool asyncGeneration)
	{
		var props = tr.GetProperties(BindingFlags.Public | BindingFlags.FlattenHierarchy | BindingFlags.Instance);
        foreach (var prop in props)
        {
            if (prop.GetCustomAttribute(typeof(NotMappedAttribute)) != null)
                continue;
            var feas = prop.GetCustomAttributes<FhirElementAttribute>();
			if (!feas.Any())
				continue;
            var fea = feas.Last();
			if (fea.XmlSerialization != Hl7.Fhir.Specification.XmlRepresentation.XmlAttr)
				continue;
			WriteProperty(tr, prop, fea, null, asyncGeneration);
		}
	}

	public void WriteProperty(System.Type tr, PropertyInfo prop, FhirElementAttribute fea, Dictionary<string, Type> generateTypes, bool asyncGeneration)
	{
		string awaitText = "";
		string asyncText = "";
		if (asyncGeneration)
		{
			awaitText = "await ";
			asyncText = "Async";
		}
		// Skip all the coded data properties for now
		if (prop.PropertyType.GenericTypeArguments.Length > 0 && GetTypeName(prop.PropertyType.GenericTypeArguments[0]).StartsWith("Hl7.Fhir.Model.Code<"))
		{
			WriteLine($"\tcase \"{fea.Name}\":");
			WriteLine($"\t\tvar newItem_{fea.Name} = new {GetTypeName(prop.PropertyType.GenericTypeArguments[0])}();");
			WriteLine($"\t\t{awaitText}Parse{asyncText}(newItem_{fea.Name}, reader, outcome, locationPath + \".{fea.Name}[\"+result.{prop.Name}.Count+\"]\", cancellationToken); // {fea.Order}");
			WriteLine($"\t\tresult.{prop.Name}.Add(newItem_{fea.Name});");
			WriteLine($"\t\tbreak;");
			return;
		}

		if (fea.XmlSerialization == Hl7.Fhir.Specification.XmlRepresentation.XHtml)
		{
			WriteLine($"\tcase \"{fea.Name}\":");
			WriteLine($"\t\tresult.{prop.Name} = SerializationUtil.SanitizeXml(reader.ReadOuterXml()?.Trim());  // Validation required");
			WriteLine($"\t\tif (reader.NodeType == XmlNodeType.EndElement)");
			WriteLine($"\t\t	return;");
			WriteLine($"\t\tbreak;");
			return;
		}
		var vat = prop.GetCustomAttribute(typeof(Hl7.Fhir.Validation.AllowedTypesAttribute)) as Hl7.Fhir.Validation.AllowedTypesAttribute;
		if (vat != null)
		{
			// If there is an allowed types, then there could be other values
			foreach (var t in vat.Types)
			{
				var pta = t.GetCustomAttribute(typeof(FhirTypeAttribute)) as FhirTypeAttribute;
				if (pta.Name == "Resource")
				{
					WriteLine($"\tcase \"{fea.Name}\":");
					WriteLine($"\t\t// FirstChildOf(reader); // {fea.Order}");
					if (GetTypeName(prop.PropertyType).StartsWith("System.Collections.Generic.List"))
					{
						WriteLine($"\t\tvar {prop.Name}Resource = {awaitText}Parse{asyncText}(reader, outcome, locationPath + \".{fea.Name}[\"+result.{prop.Name}.Count+\"]\", cancellationToken);");
						WriteLine($"\t\tif ({prop.Name}Resource != null)");
						WriteLine($"\t\t\tresult.{prop.Name}.Add({prop.Name}Resource);");
					}
					else
					{
						WriteLine($"\t\tvar {prop.Name}Resource = {awaitText}Parse{asyncText}(reader, outcome, locationPath + \".{fea.Name}\", cancellationToken);");
						WriteLine($"\t\tresult.{prop.Name} = {prop.Name}Resource;");
					}
					WriteLine($"\t\tif (!reader.Read()) return;");
					WriteLine($"\t\tbreak;");
				}
				else
				{
					if (GetTypeName(prop.PropertyType).StartsWith("System.Collections.Generic.List"))
					{
						WriteLine($"\tcase \"{fea.Name}{pta.Name.Substring(0,1).ToUpper()}{pta.Name.Substring(1)}\":");
						WriteLine($"\t\tvar newItem = new {GetTypeName(t)}();");
						WriteLine($"\t\t{awaitText}Parse{asyncText}(newItem, reader, outcome, locationPath + \".{fea.Name}[\"+result.{prop.Name}.Count+\"]\", cancellationToken); // {fea.Order}");
						WriteLine($"\t\tresult.{prop.Name}.Add(newItem);");
						WriteLine($"\t\tbreak;");
					}
					else
					{
						WriteLine($"\tcase \"{fea.Name}{pta.Name.Substring(0,1).ToUpper()}{pta.Name.Substring(1)}\":");
						WriteLine($"\t\tresult.{prop.Name} = new {GetTypeName(t)}();");
						WriteLine($"\t\t{awaitText}Parse{asyncText}(result.{prop.Name} as {GetTypeName(t)}, reader, outcome, locationPath + \".{fea.Name}\", cancellationToken); // {fea.Order}");
						WriteLine($"\t\tbreak;");
					}
				}
			}
		}
		else
		{
			if (fea.XmlSerialization == Hl7.Fhir.Specification.XmlRepresentation.XmlAttr)
			{
				WriteLine($"\tcase \"{fea.Name}\":");
				if (GetTypeName(prop.PropertyType) == "System.String")
				{
					if (fea.Name != "id" && (tr.Name == "Markdown" || tr.Name == "FhirString"))
						WriteLine($"\t\tresult.{prop.Name} = SerializationUtil.SanitizeXml(reader.Value?.Trim());");
					else
						WriteLine($"\t\tresult.{prop.Name} = reader.Value;");
				}
				else
				{
					string typeName;
					if (GetTypeName(prop.PropertyType).StartsWith("System.Nullable<"))
						typeName = GetTypeName(prop.PropertyType.GenericTypeArguments[0]);
					else
						typeName = GetTypeName(prop.PropertyType);
					// WriteLine($"\t\tresult.{prop.Name} = Hl7.Fhir.Serialization.PrimitiveTypeConverter.ConvertTo<{typeName}>(reader.Value);");
					if (typeName == "System.Decimal" || typeName == "System.Int32")
					{
#>
        try
		{
			result.Value = reader.ReadContentAs<#= typeName == "System.Decimal" ? "Decimal" : "Int" #>();
		}
		catch (XmlException ex)
        {
			HandleAttributeInvalidValue(reader, "<#= tr.Name.ToLower().Replace("fhir","") #>", outcome, locationPath, ex);
        }
<#+
					}
					else
					{
#>
        try
		{
			result.Value = Hl7.Fhir.Serialization.PrimitiveTypeConverter.ConvertTo<<#= typeName #>>(reader.Value);
		}
		catch (FormatException ex)
        {
			HandleAttributeInvalidValue(reader, "<#= tr.Name.ToLower().Replace("fhir","") #>", outcome, locationPath, ex);
        }
<#+
					}
				}
				WriteLine($"\t\tbreak;");
			}
			else
			{
				if (GetTypeName(prop.PropertyType).StartsWith("System.Collections.Generic.List"))
				{
					WriteLine($"\tcase \"{fea.Name}\":");
					WriteLine($"\t\tvar newItem_{fea.Name} = new {GetTypeName(prop.PropertyType.GenericTypeArguments[0])}();");
					WriteLine($"\t\t{awaitText}Parse{asyncText}(newItem_{fea.Name}, reader, outcome, locationPath + \".{fea.Name}[\"+result.{prop.Name}.Count+\"]\", cancellationToken); // {fea.Order}");
					WriteLine($"\t\tresult.{prop.Name}.Add(newItem_{fea.Name});");
					WriteLine($"\t\tbreak;");
				}
				else
				{
					WriteLine($"\tcase \"{fea.Name}\":");
					WriteLine($"\t\tresult.{prop.Name} = new {GetTypeName(prop.PropertyType)}();");
					WriteLine($"\t\t{awaitText}Parse{asyncText}(result.{prop.Name} as {GetTypeName(prop.PropertyType)}, reader, outcome, locationPath + \".{fea.Name}\", cancellationToken); // {fea.Order}");
					WriteLine($"\t\tbreak;");
				}
			}
		}
		if (generateTypes != null && !generateTypes.ContainsKey(prop.PropertyType.FullName))
		{
			generateTypes.Add(prop.PropertyType.FullName, prop.PropertyType);
		}
		if (prop.PropertyType.GenericTypeArguments.Count() > 0)
		{
			if (generateTypes != null && !generateTypes.ContainsKey(prop.PropertyType.GenericTypeArguments[0].FullName))
			{
				generateTypes.Add(prop.PropertyType.GenericTypeArguments[0].FullName, prop.PropertyType.GenericTypeArguments[0]);
			}
		}
	}

	public void WriteAttribute(System.Type tr, PropertyInfo prop, FhirElementAttribute fea)
	{
		if (fea.XmlSerialization != Hl7.Fhir.Specification.XmlRepresentation.XmlAttr)
			return;
		WriteLine($"\tcase \"{fea.Name}\":");
		WriteLine($"\t\t// result.{prop.Name} = new {GetTypeName(prop.PropertyType)}();");
		WriteLine($"\t\t// Parse(result.{prop.Name} as {GetTypeName(prop.PropertyType)}, reader, outcome, locationPath + \".{fea.Name}\", cancellationToken); // {fea.Order}");
		WriteLine($"\t\tbreak;");
	}

	public static string GetTypeName(System.Type tr)
	{
		if (tr.Name.EndsWith("Component"))
			Console.Write("{tr}");
		string typeName = $"{tr.Namespace}.{tr.Name}";
		if (tr.IsNested)
			typeName = $"{GetTypeName(tr.DeclaringType)}.{tr.Name}";
		if (tr.GenericTypeArguments.Count() > 0)
		{
			if (tr.IsNested)
				typeName = $"{GetTypeName(tr.DeclaringType)}.{tr.Name}";
			else
				typeName = $"{tr.Namespace}.{tr.Name.Substring(0, tr.Name.Length-2)}<{GetTypeName(tr.GenericTypeArguments[0])}>";
		}
		return typeName;
	}

#>