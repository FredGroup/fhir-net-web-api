// -----------------------------------------------------------------------------
// GENERATED CODE - DO NOT EDIT
// Generated: 02/02/2021 20:43:51
// -----------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using Hl7.Fhir.Model;
using Hl7.Fhir.Utility;
using System.Xml.Serialization;
using System.Xml;
using System.Xml.Linq;
using System.Threading;

namespace Hl7.Fhir.CustomSerializer
{
    public partial class FhirCustomXmlReader : XmlSerializationReader
    {
        public Resource Parse()
        {
			return Parse(this.Reader);
		}
        public Resource Parse(XmlReader reader)
        {
			while (reader.Read())
			{
				// skip to the first start element node (over the processing instructions)
				if (reader.IsStartElement())
					break;
			}
            Resource result;
            switch(reader.Name)
            {
                case "Account":
                    result = new Account();
                    Parse(result as Account, reader);
                    break;
                case "ActivityDefinition":
                    result = new ActivityDefinition();
                    Parse(result as ActivityDefinition, reader);
                    break;
                case "AdverseEvent":
                    result = new AdverseEvent();
                    Parse(result as AdverseEvent, reader);
                    break;
                case "AllergyIntolerance":
                    result = new AllergyIntolerance();
                    Parse(result as AllergyIntolerance, reader);
                    break;
                case "Appointment":
                    result = new Appointment();
                    Parse(result as Appointment, reader);
                    break;
                case "AppointmentResponse":
                    result = new AppointmentResponse();
                    Parse(result as AppointmentResponse, reader);
                    break;
                case "AuditEvent":
                    result = new AuditEvent();
                    Parse(result as AuditEvent, reader);
                    break;
                case "Basic":
                    result = new Basic();
                    Parse(result as Basic, reader);
                    break;
                case "Binary":
                    result = new Binary();
                    Parse(result as Binary, reader);
                    break;
                case "BiologicallyDerivedProduct":
                    result = new BiologicallyDerivedProduct();
                    Parse(result as BiologicallyDerivedProduct, reader);
                    break;
                case "BodyStructure":
                    result = new BodyStructure();
                    Parse(result as BodyStructure, reader);
                    break;
                case "Bundle":
                    result = new Bundle();
                    Parse(result as Bundle, reader);
                    break;
                case "CapabilityStatement":
                    result = new CapabilityStatement();
                    Parse(result as CapabilityStatement, reader);
                    break;
                case "CarePlan":
                    result = new CarePlan();
                    Parse(result as CarePlan, reader);
                    break;
                case "CareTeam":
                    result = new CareTeam();
                    Parse(result as CareTeam, reader);
                    break;
                case "CatalogEntry":
                    result = new CatalogEntry();
                    Parse(result as CatalogEntry, reader);
                    break;
                case "ChargeItem":
                    result = new ChargeItem();
                    Parse(result as ChargeItem, reader);
                    break;
                case "ChargeItemDefinition":
                    result = new ChargeItemDefinition();
                    Parse(result as ChargeItemDefinition, reader);
                    break;
                case "Claim":
                    result = new Claim();
                    Parse(result as Claim, reader);
                    break;
                case "ClaimResponse":
                    result = new ClaimResponse();
                    Parse(result as ClaimResponse, reader);
                    break;
                case "ClinicalImpression":
                    result = new ClinicalImpression();
                    Parse(result as ClinicalImpression, reader);
                    break;
                case "CodeSystem":
                    result = new CodeSystem();
                    Parse(result as CodeSystem, reader);
                    break;
                case "Communication":
                    result = new Communication();
                    Parse(result as Communication, reader);
                    break;
                case "CommunicationRequest":
                    result = new CommunicationRequest();
                    Parse(result as CommunicationRequest, reader);
                    break;
                case "CompartmentDefinition":
                    result = new CompartmentDefinition();
                    Parse(result as CompartmentDefinition, reader);
                    break;
                case "Composition":
                    result = new Composition();
                    Parse(result as Composition, reader);
                    break;
                case "ConceptMap":
                    result = new ConceptMap();
                    Parse(result as ConceptMap, reader);
                    break;
                case "Condition":
                    result = new Condition();
                    Parse(result as Condition, reader);
                    break;
                case "Consent":
                    result = new Consent();
                    Parse(result as Consent, reader);
                    break;
                case "Contract":
                    result = new Contract();
                    Parse(result as Contract, reader);
                    break;
                case "Coverage":
                    result = new Coverage();
                    Parse(result as Coverage, reader);
                    break;
                case "CoverageEligibilityRequest":
                    result = new CoverageEligibilityRequest();
                    Parse(result as CoverageEligibilityRequest, reader);
                    break;
                case "CoverageEligibilityResponse":
                    result = new CoverageEligibilityResponse();
                    Parse(result as CoverageEligibilityResponse, reader);
                    break;
                case "DetectedIssue":
                    result = new DetectedIssue();
                    Parse(result as DetectedIssue, reader);
                    break;
                case "Device":
                    result = new Device();
                    Parse(result as Device, reader);
                    break;
                case "DeviceDefinition":
                    result = new DeviceDefinition();
                    Parse(result as DeviceDefinition, reader);
                    break;
                case "DeviceMetric":
                    result = new DeviceMetric();
                    Parse(result as DeviceMetric, reader);
                    break;
                case "DeviceRequest":
                    result = new DeviceRequest();
                    Parse(result as DeviceRequest, reader);
                    break;
                case "DeviceUseStatement":
                    result = new DeviceUseStatement();
                    Parse(result as DeviceUseStatement, reader);
                    break;
                case "DiagnosticReport":
                    result = new DiagnosticReport();
                    Parse(result as DiagnosticReport, reader);
                    break;
                case "DocumentManifest":
                    result = new DocumentManifest();
                    Parse(result as DocumentManifest, reader);
                    break;
                case "DocumentReference":
                    result = new DocumentReference();
                    Parse(result as DocumentReference, reader);
                    break;
                case "EffectEvidenceSynthesis":
                    result = new EffectEvidenceSynthesis();
                    Parse(result as EffectEvidenceSynthesis, reader);
                    break;
                case "Encounter":
                    result = new Encounter();
                    Parse(result as Encounter, reader);
                    break;
                case "Endpoint":
                    result = new Endpoint();
                    Parse(result as Endpoint, reader);
                    break;
                case "EnrollmentRequest":
                    result = new EnrollmentRequest();
                    Parse(result as EnrollmentRequest, reader);
                    break;
                case "EnrollmentResponse":
                    result = new EnrollmentResponse();
                    Parse(result as EnrollmentResponse, reader);
                    break;
                case "EpisodeOfCare":
                    result = new EpisodeOfCare();
                    Parse(result as EpisodeOfCare, reader);
                    break;
                case "EventDefinition":
                    result = new EventDefinition();
                    Parse(result as EventDefinition, reader);
                    break;
                case "Evidence":
                    result = new Evidence();
                    Parse(result as Evidence, reader);
                    break;
                case "EvidenceVariable":
                    result = new EvidenceVariable();
                    Parse(result as EvidenceVariable, reader);
                    break;
                case "ExampleScenario":
                    result = new ExampleScenario();
                    Parse(result as ExampleScenario, reader);
                    break;
                case "ExplanationOfBenefit":
                    result = new ExplanationOfBenefit();
                    Parse(result as ExplanationOfBenefit, reader);
                    break;
                case "FamilyMemberHistory":
                    result = new FamilyMemberHistory();
                    Parse(result as FamilyMemberHistory, reader);
                    break;
                case "Flag":
                    result = new Flag();
                    Parse(result as Flag, reader);
                    break;
                case "Goal":
                    result = new Goal();
                    Parse(result as Goal, reader);
                    break;
                case "GraphDefinition":
                    result = new GraphDefinition();
                    Parse(result as GraphDefinition, reader);
                    break;
                case "Group":
                    result = new Group();
                    Parse(result as Group, reader);
                    break;
                case "GuidanceResponse":
                    result = new GuidanceResponse();
                    Parse(result as GuidanceResponse, reader);
                    break;
                case "HealthcareService":
                    result = new HealthcareService();
                    Parse(result as HealthcareService, reader);
                    break;
                case "ImagingStudy":
                    result = new ImagingStudy();
                    Parse(result as ImagingStudy, reader);
                    break;
                case "Immunization":
                    result = new Immunization();
                    Parse(result as Immunization, reader);
                    break;
                case "ImmunizationEvaluation":
                    result = new ImmunizationEvaluation();
                    Parse(result as ImmunizationEvaluation, reader);
                    break;
                case "ImmunizationRecommendation":
                    result = new ImmunizationRecommendation();
                    Parse(result as ImmunizationRecommendation, reader);
                    break;
                case "ImplementationGuide":
                    result = new ImplementationGuide();
                    Parse(result as ImplementationGuide, reader);
                    break;
                case "InsurancePlan":
                    result = new InsurancePlan();
                    Parse(result as InsurancePlan, reader);
                    break;
                case "Invoice":
                    result = new Invoice();
                    Parse(result as Invoice, reader);
                    break;
                case "Library":
                    result = new Library();
                    Parse(result as Library, reader);
                    break;
                case "Linkage":
                    result = new Linkage();
                    Parse(result as Linkage, reader);
                    break;
                case "List":
                    result = new List();
                    Parse(result as List, reader);
                    break;
                case "Location":
                    result = new Location();
                    Parse(result as Location, reader);
                    break;
                case "Measure":
                    result = new Measure();
                    Parse(result as Measure, reader);
                    break;
                case "MeasureReport":
                    result = new MeasureReport();
                    Parse(result as MeasureReport, reader);
                    break;
                case "Media":
                    result = new Media();
                    Parse(result as Media, reader);
                    break;
                case "Medication":
                    result = new Medication();
                    Parse(result as Medication, reader);
                    break;
                case "MedicationAdministration":
                    result = new MedicationAdministration();
                    Parse(result as MedicationAdministration, reader);
                    break;
                case "MedicationDispense":
                    result = new MedicationDispense();
                    Parse(result as MedicationDispense, reader);
                    break;
                case "MedicationKnowledge":
                    result = new MedicationKnowledge();
                    Parse(result as MedicationKnowledge, reader);
                    break;
                case "MedicationRequest":
                    result = new MedicationRequest();
                    Parse(result as MedicationRequest, reader);
                    break;
                case "MedicationStatement":
                    result = new MedicationStatement();
                    Parse(result as MedicationStatement, reader);
                    break;
                case "MedicinalProduct":
                    result = new MedicinalProduct();
                    Parse(result as MedicinalProduct, reader);
                    break;
                case "MedicinalProductAuthorization":
                    result = new MedicinalProductAuthorization();
                    Parse(result as MedicinalProductAuthorization, reader);
                    break;
                case "MedicinalProductContraindication":
                    result = new MedicinalProductContraindication();
                    Parse(result as MedicinalProductContraindication, reader);
                    break;
                case "MedicinalProductIndication":
                    result = new MedicinalProductIndication();
                    Parse(result as MedicinalProductIndication, reader);
                    break;
                case "MedicinalProductIngredient":
                    result = new MedicinalProductIngredient();
                    Parse(result as MedicinalProductIngredient, reader);
                    break;
                case "MedicinalProductInteraction":
                    result = new MedicinalProductInteraction();
                    Parse(result as MedicinalProductInteraction, reader);
                    break;
                case "MedicinalProductManufactured":
                    result = new MedicinalProductManufactured();
                    Parse(result as MedicinalProductManufactured, reader);
                    break;
                case "MedicinalProductPackaged":
                    result = new MedicinalProductPackaged();
                    Parse(result as MedicinalProductPackaged, reader);
                    break;
                case "MedicinalProductPharmaceutical":
                    result = new MedicinalProductPharmaceutical();
                    Parse(result as MedicinalProductPharmaceutical, reader);
                    break;
                case "MedicinalProductUndesirableEffect":
                    result = new MedicinalProductUndesirableEffect();
                    Parse(result as MedicinalProductUndesirableEffect, reader);
                    break;
                case "MessageDefinition":
                    result = new MessageDefinition();
                    Parse(result as MessageDefinition, reader);
                    break;
                case "MessageHeader":
                    result = new MessageHeader();
                    Parse(result as MessageHeader, reader);
                    break;
                case "MolecularSequence":
                    result = new MolecularSequence();
                    Parse(result as MolecularSequence, reader);
                    break;
                case "NamingSystem":
                    result = new NamingSystem();
                    Parse(result as NamingSystem, reader);
                    break;
                case "NutritionOrder":
                    result = new NutritionOrder();
                    Parse(result as NutritionOrder, reader);
                    break;
                case "Observation":
                    result = new Observation();
                    Parse(result as Observation, reader);
                    break;
                case "ObservationDefinition":
                    result = new ObservationDefinition();
                    Parse(result as ObservationDefinition, reader);
                    break;
                case "OperationDefinition":
                    result = new OperationDefinition();
                    Parse(result as OperationDefinition, reader);
                    break;
                case "OperationOutcome":
                    result = new OperationOutcome();
                    Parse(result as OperationOutcome, reader);
                    break;
                case "Organization":
                    result = new Organization();
                    Parse(result as Organization, reader);
                    break;
                case "OrganizationAffiliation":
                    result = new OrganizationAffiliation();
                    Parse(result as OrganizationAffiliation, reader);
                    break;
                case "Parameters":
                    result = new Parameters();
                    Parse(result as Parameters, reader);
                    break;
                case "Patient":
                    result = new Patient();
                    Parse(result as Patient, reader);
                    break;
                case "PaymentNotice":
                    result = new PaymentNotice();
                    Parse(result as PaymentNotice, reader);
                    break;
                case "PaymentReconciliation":
                    result = new PaymentReconciliation();
                    Parse(result as PaymentReconciliation, reader);
                    break;
                case "Person":
                    result = new Person();
                    Parse(result as Person, reader);
                    break;
                case "PlanDefinition":
                    result = new PlanDefinition();
                    Parse(result as PlanDefinition, reader);
                    break;
                case "Practitioner":
                    result = new Practitioner();
                    Parse(result as Practitioner, reader);
                    break;
                case "PractitionerRole":
                    result = new PractitionerRole();
                    Parse(result as PractitionerRole, reader);
                    break;
                case "Procedure":
                    result = new Procedure();
                    Parse(result as Procedure, reader);
                    break;
                case "Provenance":
                    result = new Provenance();
                    Parse(result as Provenance, reader);
                    break;
                case "Questionnaire":
                    result = new Questionnaire();
                    Parse(result as Questionnaire, reader);
                    break;
                case "QuestionnaireResponse":
                    result = new QuestionnaireResponse();
                    Parse(result as QuestionnaireResponse, reader);
                    break;
                case "RelatedPerson":
                    result = new RelatedPerson();
                    Parse(result as RelatedPerson, reader);
                    break;
                case "RequestGroup":
                    result = new RequestGroup();
                    Parse(result as RequestGroup, reader);
                    break;
                case "ResearchDefinition":
                    result = new ResearchDefinition();
                    Parse(result as ResearchDefinition, reader);
                    break;
                case "ResearchElementDefinition":
                    result = new ResearchElementDefinition();
                    Parse(result as ResearchElementDefinition, reader);
                    break;
                case "ResearchStudy":
                    result = new ResearchStudy();
                    Parse(result as ResearchStudy, reader);
                    break;
                case "ResearchSubject":
                    result = new ResearchSubject();
                    Parse(result as ResearchSubject, reader);
                    break;
                case "RiskAssessment":
                    result = new RiskAssessment();
                    Parse(result as RiskAssessment, reader);
                    break;
                case "RiskEvidenceSynthesis":
                    result = new RiskEvidenceSynthesis();
                    Parse(result as RiskEvidenceSynthesis, reader);
                    break;
                case "Schedule":
                    result = new Schedule();
                    Parse(result as Schedule, reader);
                    break;
                case "SearchParameter":
                    result = new SearchParameter();
                    Parse(result as SearchParameter, reader);
                    break;
                case "ServiceRequest":
                    result = new ServiceRequest();
                    Parse(result as ServiceRequest, reader);
                    break;
                case "Slot":
                    result = new Slot();
                    Parse(result as Slot, reader);
                    break;
                case "Specimen":
                    result = new Specimen();
                    Parse(result as Specimen, reader);
                    break;
                case "SpecimenDefinition":
                    result = new SpecimenDefinition();
                    Parse(result as SpecimenDefinition, reader);
                    break;
                case "StructureDefinition":
                    result = new StructureDefinition();
                    Parse(result as StructureDefinition, reader);
                    break;
                case "StructureMap":
                    result = new StructureMap();
                    Parse(result as StructureMap, reader);
                    break;
                case "Subscription":
                    result = new Subscription();
                    Parse(result as Subscription, reader);
                    break;
                case "Substance":
                    result = new Substance();
                    Parse(result as Substance, reader);
                    break;
                case "SubstanceNucleicAcid":
                    result = new SubstanceNucleicAcid();
                    Parse(result as SubstanceNucleicAcid, reader);
                    break;
                case "SubstancePolymer":
                    result = new SubstancePolymer();
                    Parse(result as SubstancePolymer, reader);
                    break;
                case "SubstanceProtein":
                    result = new SubstanceProtein();
                    Parse(result as SubstanceProtein, reader);
                    break;
                case "SubstanceReferenceInformation":
                    result = new SubstanceReferenceInformation();
                    Parse(result as SubstanceReferenceInformation, reader);
                    break;
                case "SubstanceSourceMaterial":
                    result = new SubstanceSourceMaterial();
                    Parse(result as SubstanceSourceMaterial, reader);
                    break;
                case "SubstanceSpecification":
                    result = new SubstanceSpecification();
                    Parse(result as SubstanceSpecification, reader);
                    break;
                case "SupplyDelivery":
                    result = new SupplyDelivery();
                    Parse(result as SupplyDelivery, reader);
                    break;
                case "SupplyRequest":
                    result = new SupplyRequest();
                    Parse(result as SupplyRequest, reader);
                    break;
                case "Task":
                    result = new Task();
                    Parse(result as Task, reader);
                    break;
                case "TerminologyCapabilities":
                    result = new TerminologyCapabilities();
                    Parse(result as TerminologyCapabilities, reader);
                    break;
                case "TestReport":
                    result = new TestReport();
                    Parse(result as TestReport, reader);
                    break;
                case "TestScript":
                    result = new TestScript();
                    Parse(result as TestScript, reader);
                    break;
                case "ValueSet":
                    result = new ValueSet();
                    Parse(result as ValueSet, reader);
                    break;
                case "VerificationResult":
                    result = new VerificationResult();
                    Parse(result as VerificationResult, reader);
                    break;
                case "VisionPrescription":
                    result = new VisionPrescription();
                    Parse(result as VisionPrescription, reader);
                    break;
                default:
                    result = null;
                    break;
            }
            return result;
        }

		public bool ShouldSkipNodeType(XmlNodeType nodeType)
		{
			return nodeType == XmlNodeType.Comment
				|| nodeType == XmlNodeType.XmlDeclaration
				|| nodeType == XmlNodeType.Whitespace
				|| nodeType == XmlNodeType.SignificantWhitespace
				|| nodeType == XmlNodeType.CDATA
				|| nodeType == XmlNodeType.Notation
				|| nodeType == XmlNodeType.ProcessingInstruction;
		}

		public void FirstChildOf(XmlReader reader)
        {
			do
			{
				reader.Read();
			}
			while (ShouldSkipNodeType(reader.NodeType));
        }

        protected override void InitCallbacks()
        {
        }

        protected override void InitIDs()
        {
        }

        public void Parse<T>(Code<T> result, XmlReader reader)
            where T : struct
        {
            // skip ignored elements
            while (ShouldSkipNodeType(reader.NodeType))
                reader.Read();

            if (reader.EOF)
                return;

            if (reader.MoveToFirstAttribute())
            {
                do
                {
					switch (reader.Name)
					{
						case "id":
							result.ElementId = reader.Value;
							break;
						case "value":
							result.ObjectValue = reader.Value;
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {childAttr.Name}");
							reader.ReadOuterXml();
							break;
					}
                } while (reader.MoveToNextAttribute());
                reader.MoveToElement();
            }
            if (reader.IsEmptyElement)
            {
                // contextLocation.Pop();
                return;
            }
            // otherwise proceed to read all the other nodes
            while (reader.Read())
            {
                if (reader.IsStartElement())
                {
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						default:
							// Property not found, skip over it
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
                }
                else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
                {
                    break;
                }
			}
        }
		#region << Resource Parse >>
		private void Parse(Account result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Account.AccountStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Account.AccountStatus>, reader); // 100
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 110
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "subject":
							var newItem_subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_subject, reader); // 130
							result.Subject.Add(newItem_subject);
							break;
						case "servicePeriod":
							result.ServicePeriod = new Hl7.Fhir.Model.Period();
							Parse(result.ServicePeriod as Hl7.Fhir.Model.Period, reader); // 140
							break;
						case "coverage":
							var newItem_coverage = new Hl7.Fhir.Model.Account.CoverageComponent();
							Parse(newItem_coverage, reader); // 150
							result.Coverage.Add(newItem_coverage);
							break;
						case "owner":
							result.Owner = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Owner as Hl7.Fhir.Model.ResourceReference, reader); // 160
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 170
							break;
						case "guarantor":
							var newItem_guarantor = new Hl7.Fhir.Model.Account.GuarantorComponent();
							Parse(newItem_guarantor, reader); // 180
							result.Guarantor.Add(newItem_guarantor);
							break;
						case "partOf":
							result.PartOf = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.PartOf as Hl7.Fhir.Model.ResourceReference, reader); // 190
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(ActivityDefinition result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUri, reader); // 90
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 100
							result.Identifier.Add(newItem_identifier);
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 130
							break;
						case "subtitle":
							result.SubtitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.SubtitleElement as Hl7.Fhir.Model.FhirString, reader); // 140
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>, reader); // 150
							break;
						case "experimental":
							result.ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ExperimentalElement as Hl7.Fhir.Model.FhirBoolean, reader); // 160
							break;
						case "subjectCodeableConcept":
							result.Subject = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Subject as Hl7.Fhir.Model.CodeableConcept, reader); // 170
							break;
						case "subjectReference":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 170
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 180
							break;
						case "publisher":
							result.PublisherElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PublisherElement as Hl7.Fhir.Model.FhirString, reader); // 190
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_contact, reader); // 200
							result.Contact.Add(newItem_contact);
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.Markdown();
							Parse(result.Description as Hl7.Fhir.Model.Markdown, reader); // 210
							break;
						case "useContext":
							var newItem_useContext = new Hl7.Fhir.Model.UsageContext();
							Parse(newItem_useContext, reader); // 220
							result.UseContext.Add(newItem_useContext);
							break;
						case "jurisdiction":
							var newItem_jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_jurisdiction, reader); // 230
							result.Jurisdiction.Add(newItem_jurisdiction);
							break;
						case "purpose":
							result.Purpose = new Hl7.Fhir.Model.Markdown();
							Parse(result.Purpose as Hl7.Fhir.Model.Markdown, reader); // 240
							break;
						case "usage":
							result.UsageElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.UsageElement as Hl7.Fhir.Model.FhirString, reader); // 250
							break;
						case "copyright":
							result.Copyright = new Hl7.Fhir.Model.Markdown();
							Parse(result.Copyright as Hl7.Fhir.Model.Markdown, reader); // 260
							break;
						case "approvalDate":
							result.ApprovalDateElement = new Hl7.Fhir.Model.Date();
							Parse(result.ApprovalDateElement as Hl7.Fhir.Model.Date, reader); // 270
							break;
						case "lastReviewDate":
							result.LastReviewDateElement = new Hl7.Fhir.Model.Date();
							Parse(result.LastReviewDateElement as Hl7.Fhir.Model.Date, reader); // 280
							break;
						case "effectivePeriod":
							result.EffectivePeriod = new Hl7.Fhir.Model.Period();
							Parse(result.EffectivePeriod as Hl7.Fhir.Model.Period, reader); // 290
							break;
						case "topic":
							var newItem_topic = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_topic, reader); // 300
							result.Topic.Add(newItem_topic);
							break;
						case "author":
							var newItem_author = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_author, reader); // 310
							result.Author.Add(newItem_author);
							break;
						case "editor":
							var newItem_editor = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_editor, reader); // 320
							result.Editor.Add(newItem_editor);
							break;
						case "reviewer":
							var newItem_reviewer = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_reviewer, reader); // 330
							result.Reviewer.Add(newItem_reviewer);
							break;
						case "endorser":
							var newItem_endorser = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_endorser, reader); // 340
							result.Endorser.Add(newItem_endorser);
							break;
						case "relatedArtifact":
							var newItem_relatedArtifact = new Hl7.Fhir.Model.RelatedArtifact();
							Parse(newItem_relatedArtifact, reader); // 350
							result.RelatedArtifact.Add(newItem_relatedArtifact);
							break;
						case "library":
							var newItem_library = new Hl7.Fhir.Model.Canonical();
							Parse(newItem_library, reader); // 360
							result.LibraryElement.Add(newItem_library);
							break;
						case "kind":
							result.KindElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ActivityDefinition.RequestResourceType>();
							Parse(result.KindElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ActivityDefinition.RequestResourceType>, reader); // 370
							break;
						case "profile":
							result.ProfileElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.ProfileElement as Hl7.Fhir.Model.Canonical, reader); // 380
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 390
							break;
						case "intent":
							result.IntentElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestIntent>();
							Parse(result.IntentElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestIntent>, reader); // 400
							break;
						case "priority":
							result.PriorityElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestPriority>();
							Parse(result.PriorityElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestPriority>, reader); // 410
							break;
						case "doNotPerform":
							result.DoNotPerformElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.DoNotPerformElement as Hl7.Fhir.Model.FhirBoolean, reader); // 420
							break;
						case "timingTiming":
							result.Timing = new Hl7.Fhir.Model.Timing();
							Parse(result.Timing as Hl7.Fhir.Model.Timing, reader); // 430
							break;
						case "timingDateTime":
							result.Timing = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Timing as Hl7.Fhir.Model.FhirDateTime, reader); // 430
							break;
						case "timingAge":
							result.Timing = new Hl7.Fhir.Model.Age();
							Parse(result.Timing as Hl7.Fhir.Model.Age, reader); // 430
							break;
						case "timingPeriod":
							result.Timing = new Hl7.Fhir.Model.Period();
							Parse(result.Timing as Hl7.Fhir.Model.Period, reader); // 430
							break;
						case "timingRange":
							result.Timing = new Hl7.Fhir.Model.Range();
							Parse(result.Timing as Hl7.Fhir.Model.Range, reader); // 430
							break;
						case "timingDuration":
							result.Timing = new Hl7.Fhir.Model.Duration();
							Parse(result.Timing as Hl7.Fhir.Model.Duration, reader); // 430
							break;
						case "location":
							result.Location = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Location as Hl7.Fhir.Model.ResourceReference, reader); // 440
							break;
						case "participant":
							var newItem_participant = new Hl7.Fhir.Model.ActivityDefinition.ParticipantComponent();
							Parse(newItem_participant, reader); // 450
							result.Participant.Add(newItem_participant);
							break;
						case "productReference":
							result.Product = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Product as Hl7.Fhir.Model.ResourceReference, reader); // 460
							break;
						case "productCodeableConcept":
							result.Product = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Product as Hl7.Fhir.Model.CodeableConcept, reader); // 460
							break;
						case "quantity":
							result.Quantity = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Quantity as Hl7.Fhir.Model.SimpleQuantity, reader); // 470
							break;
						case "dosage":
							var newItem_dosage = new Hl7.Fhir.Model.Dosage();
							Parse(newItem_dosage, reader); // 480
							result.Dosage.Add(newItem_dosage);
							break;
						case "bodySite":
							var newItem_bodySite = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_bodySite, reader); // 490
							result.BodySite.Add(newItem_bodySite);
							break;
						case "specimenRequirement":
							var newItem_specimenRequirement = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_specimenRequirement, reader); // 500
							result.SpecimenRequirement.Add(newItem_specimenRequirement);
							break;
						case "observationRequirement":
							var newItem_observationRequirement = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_observationRequirement, reader); // 510
							result.ObservationRequirement.Add(newItem_observationRequirement);
							break;
						case "observationResultRequirement":
							var newItem_observationResultRequirement = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_observationResultRequirement, reader); // 520
							result.ObservationResultRequirement.Add(newItem_observationResultRequirement);
							break;
						case "transform":
							result.TransformElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.TransformElement as Hl7.Fhir.Model.Canonical, reader); // 530
							break;
						case "dynamicValue":
							var newItem_dynamicValue = new Hl7.Fhir.Model.ActivityDefinition.DynamicValueComponent();
							Parse(newItem_dynamicValue, reader); // 540
							result.DynamicValue.Add(newItem_dynamicValue);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(AdverseEvent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							result.Identifier = new Hl7.Fhir.Model.Identifier();
							Parse(result.Identifier as Hl7.Fhir.Model.Identifier, reader); // 90
							break;
						case "actuality":
							result.ActualityElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.AdverseEvent.AdverseEventActuality>();
							Parse(result.ActualityElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.AdverseEvent.AdverseEventActuality>, reader); // 100
							break;
						case "category":
							var newItem_category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_category, reader); // 110
							result.Category.Add(newItem_category);
							break;
						case "event":
							result.Event = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Event as Hl7.Fhir.Model.CodeableConcept, reader); // 120
							break;
						case "subject":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 130
							break;
						case "encounter":
							result.Encounter = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Encounter as Hl7.Fhir.Model.ResourceReference, reader); // 140
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 150
							break;
						case "detected":
							result.DetectedElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DetectedElement as Hl7.Fhir.Model.FhirDateTime, reader); // 160
							break;
						case "recordedDate":
							result.RecordedDateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.RecordedDateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 170
							break;
						case "resultingCondition":
							var newItem_resultingCondition = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_resultingCondition, reader); // 180
							result.ResultingCondition.Add(newItem_resultingCondition);
							break;
						case "location":
							result.Location = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Location as Hl7.Fhir.Model.ResourceReference, reader); // 190
							break;
						case "seriousness":
							result.Seriousness = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Seriousness as Hl7.Fhir.Model.CodeableConcept, reader); // 200
							break;
						case "severity":
							result.Severity = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Severity as Hl7.Fhir.Model.CodeableConcept, reader); // 210
							break;
						case "outcome":
							result.Outcome = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Outcome as Hl7.Fhir.Model.CodeableConcept, reader); // 220
							break;
						case "recorder":
							result.Recorder = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Recorder as Hl7.Fhir.Model.ResourceReference, reader); // 230
							break;
						case "contributor":
							var newItem_contributor = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_contributor, reader); // 240
							result.Contributor.Add(newItem_contributor);
							break;
						case "suspectEntity":
							var newItem_suspectEntity = new Hl7.Fhir.Model.AdverseEvent.SuspectEntityComponent();
							Parse(newItem_suspectEntity, reader); // 250
							result.SuspectEntity.Add(newItem_suspectEntity);
							break;
						case "subjectMedicalHistory":
							var newItem_subjectMedicalHistory = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_subjectMedicalHistory, reader); // 260
							result.SubjectMedicalHistory.Add(newItem_subjectMedicalHistory);
							break;
						case "referenceDocument":
							var newItem_referenceDocument = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_referenceDocument, reader); // 270
							result.ReferenceDocument.Add(newItem_referenceDocument);
							break;
						case "study":
							var newItem_study = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_study, reader); // 280
							result.Study.Add(newItem_study);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(AllergyIntolerance result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "clinicalStatus":
							result.ClinicalStatus = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.ClinicalStatus as Hl7.Fhir.Model.CodeableConcept, reader); // 100
							break;
						case "verificationStatus":
							result.VerificationStatus = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.VerificationStatus as Hl7.Fhir.Model.CodeableConcept, reader); // 110
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.AllergyIntolerance.AllergyIntoleranceType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.AllergyIntolerance.AllergyIntoleranceType>, reader); // 120
							break;
						case "category":
							var newItem_category = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.AllergyIntolerance.AllergyIntoleranceCategory>();
							Parse(newItem_category, reader); // 130
							result.CategoryElement.Add(newItem_category);
							break;
						case "criticality":
							result.CriticalityElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.AllergyIntolerance.AllergyIntoleranceCriticality>();
							Parse(result.CriticalityElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.AllergyIntolerance.AllergyIntoleranceCriticality>, reader); // 140
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 150
							break;
						case "patient":
							result.Patient = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Patient as Hl7.Fhir.Model.ResourceReference, reader); // 160
							break;
						case "encounter":
							result.Encounter = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Encounter as Hl7.Fhir.Model.ResourceReference, reader); // 170
							break;
						case "onsetDateTime":
							result.Onset = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Onset as Hl7.Fhir.Model.FhirDateTime, reader); // 180
							break;
						case "onsetAge":
							result.Onset = new Hl7.Fhir.Model.Age();
							Parse(result.Onset as Hl7.Fhir.Model.Age, reader); // 180
							break;
						case "onsetPeriod":
							result.Onset = new Hl7.Fhir.Model.Period();
							Parse(result.Onset as Hl7.Fhir.Model.Period, reader); // 180
							break;
						case "onsetRange":
							result.Onset = new Hl7.Fhir.Model.Range();
							Parse(result.Onset as Hl7.Fhir.Model.Range, reader); // 180
							break;
						case "onsetString":
							result.Onset = new Hl7.Fhir.Model.FhirString();
							Parse(result.Onset as Hl7.Fhir.Model.FhirString, reader); // 180
							break;
						case "recordedDate":
							result.RecordedDateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.RecordedDateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 190
							break;
						case "recorder":
							result.Recorder = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Recorder as Hl7.Fhir.Model.ResourceReference, reader); // 200
							break;
						case "asserter":
							result.Asserter = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Asserter as Hl7.Fhir.Model.ResourceReference, reader); // 210
							break;
						case "lastOccurrence":
							result.LastOccurrenceElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.LastOccurrenceElement as Hl7.Fhir.Model.FhirDateTime, reader); // 220
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 230
							result.Note.Add(newItem_note);
							break;
						case "reaction":
							var newItem_reaction = new Hl7.Fhir.Model.AllergyIntolerance.ReactionComponent();
							Parse(newItem_reaction, reader); // 240
							result.Reaction.Add(newItem_reaction);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Appointment result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Appointment.AppointmentStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Appointment.AppointmentStatus>, reader); // 100
							break;
						case "cancelationReason":
							result.CancelationReason = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.CancelationReason as Hl7.Fhir.Model.CodeableConcept, reader); // 110
							break;
						case "serviceCategory":
							var newItem_serviceCategory = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_serviceCategory, reader); // 120
							result.ServiceCategory.Add(newItem_serviceCategory);
							break;
						case "serviceType":
							var newItem_serviceType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_serviceType, reader); // 130
							result.ServiceType.Add(newItem_serviceType);
							break;
						case "specialty":
							var newItem_specialty = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_specialty, reader); // 140
							result.Specialty.Add(newItem_specialty);
							break;
						case "appointmentType":
							result.AppointmentType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.AppointmentType as Hl7.Fhir.Model.CodeableConcept, reader); // 150
							break;
						case "reasonCode":
							var newItem_reasonCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_reasonCode, reader); // 160
							result.ReasonCode.Add(newItem_reasonCode);
							break;
						case "reasonReference":
							var newItem_reasonReference = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_reasonReference, reader); // 170
							result.ReasonReference.Add(newItem_reasonReference);
							break;
						case "priority":
							result.PriorityElement = new Hl7.Fhir.Model.UnsignedInt();
							Parse(result.PriorityElement as Hl7.Fhir.Model.UnsignedInt, reader); // 180
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 190
							break;
						case "supportingInformation":
							var newItem_supportingInformation = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_supportingInformation, reader); // 200
							result.SupportingInformation.Add(newItem_supportingInformation);
							break;
						case "start":
							result.StartElement = new Hl7.Fhir.Model.Instant();
							Parse(result.StartElement as Hl7.Fhir.Model.Instant, reader); // 210
							break;
						case "end":
							result.EndElement = new Hl7.Fhir.Model.Instant();
							Parse(result.EndElement as Hl7.Fhir.Model.Instant, reader); // 220
							break;
						case "minutesDuration":
							result.MinutesDurationElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.MinutesDurationElement as Hl7.Fhir.Model.PositiveInt, reader); // 230
							break;
						case "slot":
							var newItem_slot = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_slot, reader); // 240
							result.Slot.Add(newItem_slot);
							break;
						case "created":
							result.CreatedElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.CreatedElement as Hl7.Fhir.Model.FhirDateTime, reader); // 250
							break;
						case "comment":
							result.CommentElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.CommentElement as Hl7.Fhir.Model.FhirString, reader); // 260
							break;
						case "patientInstruction":
							result.PatientInstructionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PatientInstructionElement as Hl7.Fhir.Model.FhirString, reader); // 270
							break;
						case "basedOn":
							var newItem_basedOn = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_basedOn, reader); // 280
							result.BasedOn.Add(newItem_basedOn);
							break;
						case "participant":
							var newItem_participant = new Hl7.Fhir.Model.Appointment.ParticipantComponent();
							Parse(newItem_participant, reader); // 290
							result.Participant.Add(newItem_participant);
							break;
						case "requestedPeriod":
							var newItem_requestedPeriod = new Hl7.Fhir.Model.Period();
							Parse(newItem_requestedPeriod, reader); // 300
							result.RequestedPeriod.Add(newItem_requestedPeriod);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(AppointmentResponse result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "appointment":
							result.Appointment = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Appointment as Hl7.Fhir.Model.ResourceReference, reader); // 100
							break;
						case "start":
							result.StartElement = new Hl7.Fhir.Model.Instant();
							Parse(result.StartElement as Hl7.Fhir.Model.Instant, reader); // 110
							break;
						case "end":
							result.EndElement = new Hl7.Fhir.Model.Instant();
							Parse(result.EndElement as Hl7.Fhir.Model.Instant, reader); // 120
							break;
						case "participantType":
							var newItem_participantType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_participantType, reader); // 130
							result.ParticipantType.Add(newItem_participantType);
							break;
						case "actor":
							result.Actor = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Actor as Hl7.Fhir.Model.ResourceReference, reader); // 140
							break;
						case "participantStatus":
							result.ParticipantStatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ParticipationStatus>();
							Parse(result.ParticipantStatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ParticipationStatus>, reader); // 150
							break;
						case "comment":
							result.CommentElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.CommentElement as Hl7.Fhir.Model.FhirString, reader); // 160
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(AuditEvent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.Coding();
							Parse(result.Type as Hl7.Fhir.Model.Coding, reader); // 90
							break;
						case "subtype":
							var newItem_subtype = new Hl7.Fhir.Model.Coding();
							Parse(newItem_subtype, reader); // 100
							result.Subtype.Add(newItem_subtype);
							break;
						case "action":
							result.ActionElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.AuditEvent.AuditEventAction>();
							Parse(result.ActionElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.AuditEvent.AuditEventAction>, reader); // 110
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 120
							break;
						case "recorded":
							result.RecordedElement = new Hl7.Fhir.Model.Instant();
							Parse(result.RecordedElement as Hl7.Fhir.Model.Instant, reader); // 130
							break;
						case "outcome":
							result.OutcomeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.AuditEvent.AuditEventOutcome>();
							Parse(result.OutcomeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.AuditEvent.AuditEventOutcome>, reader); // 140
							break;
						case "outcomeDesc":
							result.OutcomeDescElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.OutcomeDescElement as Hl7.Fhir.Model.FhirString, reader); // 150
							break;
						case "purposeOfEvent":
							var newItem_purposeOfEvent = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_purposeOfEvent, reader); // 160
							result.PurposeOfEvent.Add(newItem_purposeOfEvent);
							break;
						case "agent":
							var newItem_agent = new Hl7.Fhir.Model.AuditEvent.AgentComponent();
							Parse(newItem_agent, reader); // 170
							result.Agent.Add(newItem_agent);
							break;
						case "source":
							result.Source = new Hl7.Fhir.Model.AuditEvent.SourceComponent();
							Parse(result.Source as Hl7.Fhir.Model.AuditEvent.SourceComponent, reader); // 180
							break;
						case "entity":
							var newItem_entity = new Hl7.Fhir.Model.AuditEvent.EntityComponent();
							Parse(newItem_entity, reader); // 190
							result.Entity.Add(newItem_entity);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Basic result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 100
							break;
						case "subject":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 110
							break;
						case "created":
							result.CreatedElement = new Hl7.Fhir.Model.Date();
							Parse(result.CreatedElement as Hl7.Fhir.Model.Date, reader); // 120
							break;
						case "author":
							result.Author = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Author as Hl7.Fhir.Model.ResourceReference, reader); // 130
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Binary result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "contentType":
							result.ContentTypeElement = new Hl7.Fhir.Model.Code();
							Parse(result.ContentTypeElement as Hl7.Fhir.Model.Code, reader); // 50
							break;
						case "securityContext":
							result.SecurityContext = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.SecurityContext as Hl7.Fhir.Model.ResourceReference, reader); // 60
							break;
						case "data":
							result.DataElement = new Hl7.Fhir.Model.Base64Binary();
							Parse(result.DataElement as Hl7.Fhir.Model.Base64Binary, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(BiologicallyDerivedProduct result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "productCategory":
							result.ProductCategoryElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.BiologicallyDerivedProduct.BiologicallyDerivedProductCategory>();
							Parse(result.ProductCategoryElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.BiologicallyDerivedProduct.BiologicallyDerivedProductCategory>, reader); // 100
							break;
						case "productCode":
							result.ProductCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.ProductCode as Hl7.Fhir.Model.CodeableConcept, reader); // 110
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.BiologicallyDerivedProduct.BiologicallyDerivedProductStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.BiologicallyDerivedProduct.BiologicallyDerivedProductStatus>, reader); // 120
							break;
						case "request":
							var newItem_request = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_request, reader); // 130
							result.Request.Add(newItem_request);
							break;
						case "quantity":
							result.QuantityElement = new Hl7.Fhir.Model.Integer();
							Parse(result.QuantityElement as Hl7.Fhir.Model.Integer, reader); // 140
							break;
						case "parent":
							var newItem_parent = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_parent, reader); // 150
							result.Parent.Add(newItem_parent);
							break;
						case "collection":
							result.Collection = new Hl7.Fhir.Model.BiologicallyDerivedProduct.CollectionComponent();
							Parse(result.Collection as Hl7.Fhir.Model.BiologicallyDerivedProduct.CollectionComponent, reader); // 160
							break;
						case "processing":
							var newItem_processing = new Hl7.Fhir.Model.BiologicallyDerivedProduct.ProcessingComponent();
							Parse(newItem_processing, reader); // 170
							result.Processing.Add(newItem_processing);
							break;
						case "manipulation":
							result.Manipulation = new Hl7.Fhir.Model.BiologicallyDerivedProduct.ManipulationComponent();
							Parse(result.Manipulation as Hl7.Fhir.Model.BiologicallyDerivedProduct.ManipulationComponent, reader); // 180
							break;
						case "storage":
							var newItem_storage = new Hl7.Fhir.Model.BiologicallyDerivedProduct.StorageComponent();
							Parse(newItem_storage, reader); // 190
							result.Storage.Add(newItem_storage);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(BodyStructure result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "active":
							result.ActiveElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ActiveElement as Hl7.Fhir.Model.FhirBoolean, reader); // 100
							break;
						case "morphology":
							result.Morphology = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Morphology as Hl7.Fhir.Model.CodeableConcept, reader); // 110
							break;
						case "location":
							result.Location = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Location as Hl7.Fhir.Model.CodeableConcept, reader); // 120
							break;
						case "locationQualifier":
							var newItem_locationQualifier = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_locationQualifier, reader); // 130
							result.LocationQualifier.Add(newItem_locationQualifier);
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 140
							break;
						case "image":
							var newItem_image = new Hl7.Fhir.Model.Attachment();
							Parse(newItem_image, reader); // 150
							result.Image.Add(newItem_image);
							break;
						case "patient":
							result.Patient = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Patient as Hl7.Fhir.Model.ResourceReference, reader); // 160
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Bundle result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "identifier":
							result.Identifier = new Hl7.Fhir.Model.Identifier();
							Parse(result.Identifier as Hl7.Fhir.Model.Identifier, reader); // 50
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Bundle.BundleType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Bundle.BundleType>, reader); // 60
							break;
						case "timestamp":
							result.TimestampElement = new Hl7.Fhir.Model.Instant();
							Parse(result.TimestampElement as Hl7.Fhir.Model.Instant, reader); // 70
							break;
						case "total":
							result.TotalElement = new Hl7.Fhir.Model.UnsignedInt();
							Parse(result.TotalElement as Hl7.Fhir.Model.UnsignedInt, reader); // 80
							break;
						case "link":
							var newItem_link = new Hl7.Fhir.Model.Bundle.LinkComponent();
							Parse(newItem_link, reader); // 90
							result.Link.Add(newItem_link);
							break;
						case "entry":
							var newItem_entry = new Hl7.Fhir.Model.Bundle.EntryComponent();
							Parse(newItem_entry, reader); // 100
							result.Entry.Add(newItem_entry);
							break;
						case "signature":
							result.Signature = new Hl7.Fhir.Model.Signature();
							Parse(result.Signature as Hl7.Fhir.Model.Signature, reader); // 110
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(CapabilityStatement result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUri, reader); // 90
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 100
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>, reader); // 130
							break;
						case "experimental":
							result.ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ExperimentalElement as Hl7.Fhir.Model.FhirBoolean, reader); // 140
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 150
							break;
						case "publisher":
							result.PublisherElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PublisherElement as Hl7.Fhir.Model.FhirString, reader); // 160
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_contact, reader); // 170
							result.Contact.Add(newItem_contact);
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.Markdown();
							Parse(result.Description as Hl7.Fhir.Model.Markdown, reader); // 180
							break;
						case "useContext":
							var newItem_useContext = new Hl7.Fhir.Model.UsageContext();
							Parse(newItem_useContext, reader); // 190
							result.UseContext.Add(newItem_useContext);
							break;
						case "jurisdiction":
							var newItem_jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_jurisdiction, reader); // 200
							result.Jurisdiction.Add(newItem_jurisdiction);
							break;
						case "purpose":
							result.Purpose = new Hl7.Fhir.Model.Markdown();
							Parse(result.Purpose as Hl7.Fhir.Model.Markdown, reader); // 210
							break;
						case "copyright":
							result.Copyright = new Hl7.Fhir.Model.Markdown();
							Parse(result.Copyright as Hl7.Fhir.Model.Markdown, reader); // 220
							break;
						case "kind":
							result.KindElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CapabilityStatementKind>();
							Parse(result.KindElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CapabilityStatementKind>, reader); // 230
							break;
						case "instantiates":
							var newItem_instantiates = new Hl7.Fhir.Model.Canonical();
							Parse(newItem_instantiates, reader); // 240
							result.InstantiatesElement.Add(newItem_instantiates);
							break;
						case "imports":
							var newItem_imports = new Hl7.Fhir.Model.Canonical();
							Parse(newItem_imports, reader); // 250
							result.ImportsElement.Add(newItem_imports);
							break;
						case "software":
							result.Software = new Hl7.Fhir.Model.CapabilityStatement.SoftwareComponent();
							Parse(result.Software as Hl7.Fhir.Model.CapabilityStatement.SoftwareComponent, reader); // 260
							break;
						case "implementation":
							result.Implementation = new Hl7.Fhir.Model.CapabilityStatement.ImplementationComponent();
							Parse(result.Implementation as Hl7.Fhir.Model.CapabilityStatement.ImplementationComponent, reader); // 270
							break;
						case "fhirVersion":
							result.FhirVersionElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FHIRVersion>();
							Parse(result.FhirVersionElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FHIRVersion>, reader); // 280
							break;
						case "format":
							var newItem_format = new Hl7.Fhir.Model.Code();
							Parse(newItem_format, reader); // 290
							result.FormatElement.Add(newItem_format);
							break;
						case "patchFormat":
							var newItem_patchFormat = new Hl7.Fhir.Model.Code();
							Parse(newItem_patchFormat, reader); // 300
							result.PatchFormatElement.Add(newItem_patchFormat);
							break;
						case "implementationGuide":
							var newItem_implementationGuide = new Hl7.Fhir.Model.Canonical();
							Parse(newItem_implementationGuide, reader); // 310
							result.ImplementationGuideElement.Add(newItem_implementationGuide);
							break;
						case "rest":
							var newItem_rest = new Hl7.Fhir.Model.CapabilityStatement.RestComponent();
							Parse(newItem_rest, reader); // 320
							result.Rest.Add(newItem_rest);
							break;
						case "messaging":
							var newItem_messaging = new Hl7.Fhir.Model.CapabilityStatement.MessagingComponent();
							Parse(newItem_messaging, reader); // 330
							result.Messaging.Add(newItem_messaging);
							break;
						case "document":
							var newItem_document = new Hl7.Fhir.Model.CapabilityStatement.DocumentComponent();
							Parse(newItem_document, reader); // 340
							result.Document.Add(newItem_document);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(CarePlan result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "instantiatesCanonical":
							var newItem_instantiatesCanonical = new Hl7.Fhir.Model.Canonical();
							Parse(newItem_instantiatesCanonical, reader); // 100
							result.InstantiatesCanonicalElement.Add(newItem_instantiatesCanonical);
							break;
						case "instantiatesUri":
							var newItem_instantiatesUri = new Hl7.Fhir.Model.FhirUri();
							Parse(newItem_instantiatesUri, reader); // 110
							result.InstantiatesUriElement.Add(newItem_instantiatesUri);
							break;
						case "basedOn":
							var newItem_basedOn = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_basedOn, reader); // 120
							result.BasedOn.Add(newItem_basedOn);
							break;
						case "replaces":
							var newItem_replaces = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_replaces, reader); // 130
							result.Replaces.Add(newItem_replaces);
							break;
						case "partOf":
							var newItem_partOf = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_partOf, reader); // 140
							result.PartOf.Add(newItem_partOf);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestStatus>, reader); // 150
							break;
						case "intent":
							result.IntentElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CarePlan.CarePlanIntent>();
							Parse(result.IntentElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CarePlan.CarePlanIntent>, reader); // 160
							break;
						case "category":
							var newItem_category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_category, reader); // 170
							result.Category.Add(newItem_category);
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 180
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 190
							break;
						case "subject":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 200
							break;
						case "encounter":
							result.Encounter = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Encounter as Hl7.Fhir.Model.ResourceReference, reader); // 210
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 220
							break;
						case "created":
							result.CreatedElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.CreatedElement as Hl7.Fhir.Model.FhirDateTime, reader); // 230
							break;
						case "author":
							result.Author = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Author as Hl7.Fhir.Model.ResourceReference, reader); // 240
							break;
						case "contributor":
							var newItem_contributor = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_contributor, reader); // 250
							result.Contributor.Add(newItem_contributor);
							break;
						case "careTeam":
							var newItem_careTeam = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_careTeam, reader); // 260
							result.CareTeam.Add(newItem_careTeam);
							break;
						case "addresses":
							var newItem_addresses = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_addresses, reader); // 270
							result.Addresses.Add(newItem_addresses);
							break;
						case "supportingInfo":
							var newItem_supportingInfo = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_supportingInfo, reader); // 280
							result.SupportingInfo.Add(newItem_supportingInfo);
							break;
						case "goal":
							var newItem_goal = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_goal, reader); // 290
							result.Goal.Add(newItem_goal);
							break;
						case "activity":
							var newItem_activity = new Hl7.Fhir.Model.CarePlan.ActivityComponent();
							Parse(newItem_activity, reader); // 300
							result.Activity.Add(newItem_activity);
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 310
							result.Note.Add(newItem_note);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(CareTeam result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CareTeam.CareTeamStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CareTeam.CareTeamStatus>, reader); // 100
							break;
						case "category":
							var newItem_category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_category, reader); // 110
							result.Category.Add(newItem_category);
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "subject":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 130
							break;
						case "encounter":
							result.Encounter = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Encounter as Hl7.Fhir.Model.ResourceReference, reader); // 140
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 150
							break;
						case "participant":
							var newItem_participant = new Hl7.Fhir.Model.CareTeam.ParticipantComponent();
							Parse(newItem_participant, reader); // 160
							result.Participant.Add(newItem_participant);
							break;
						case "reasonCode":
							var newItem_reasonCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_reasonCode, reader); // 170
							result.ReasonCode.Add(newItem_reasonCode);
							break;
						case "reasonReference":
							var newItem_reasonReference = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_reasonReference, reader); // 180
							result.ReasonReference.Add(newItem_reasonReference);
							break;
						case "managingOrganization":
							var newItem_managingOrganization = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_managingOrganization, reader); // 190
							result.ManagingOrganization.Add(newItem_managingOrganization);
							break;
						case "telecom":
							var newItem_telecom = new Hl7.Fhir.Model.ContactPoint();
							Parse(newItem_telecom, reader); // 200
							result.Telecom.Add(newItem_telecom);
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 210
							result.Note.Add(newItem_note);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(CatalogEntry result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 100
							break;
						case "orderable":
							result.OrderableElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.OrderableElement as Hl7.Fhir.Model.FhirBoolean, reader); // 110
							break;
						case "referencedItem":
							result.ReferencedItem = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.ReferencedItem as Hl7.Fhir.Model.ResourceReference, reader); // 120
							break;
						case "additionalIdentifier":
							var newItem_additionalIdentifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_additionalIdentifier, reader); // 130
							result.AdditionalIdentifier.Add(newItem_additionalIdentifier);
							break;
						case "classification":
							var newItem_classification = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_classification, reader); // 140
							result.Classification.Add(newItem_classification);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>, reader); // 150
							break;
						case "validityPeriod":
							result.ValidityPeriod = new Hl7.Fhir.Model.Period();
							Parse(result.ValidityPeriod as Hl7.Fhir.Model.Period, reader); // 160
							break;
						case "validTo":
							result.ValidToElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.ValidToElement as Hl7.Fhir.Model.FhirDateTime, reader); // 170
							break;
						case "lastUpdated":
							result.LastUpdatedElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.LastUpdatedElement as Hl7.Fhir.Model.FhirDateTime, reader); // 180
							break;
						case "additionalCharacteristic":
							var newItem_additionalCharacteristic = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_additionalCharacteristic, reader); // 190
							result.AdditionalCharacteristic.Add(newItem_additionalCharacteristic);
							break;
						case "additionalClassification":
							var newItem_additionalClassification = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_additionalClassification, reader); // 200
							result.AdditionalClassification.Add(newItem_additionalClassification);
							break;
						case "relatedEntry":
							var newItem_relatedEntry = new Hl7.Fhir.Model.CatalogEntry.RelatedEntryComponent();
							Parse(newItem_relatedEntry, reader); // 210
							result.RelatedEntry.Add(newItem_relatedEntry);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(ChargeItem result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "definitionUri":
							var newItem_definitionUri = new Hl7.Fhir.Model.FhirUri();
							Parse(newItem_definitionUri, reader); // 100
							result.DefinitionUriElement.Add(newItem_definitionUri);
							break;
						case "definitionCanonical":
							var newItem_definitionCanonical = new Hl7.Fhir.Model.Canonical();
							Parse(newItem_definitionCanonical, reader); // 110
							result.DefinitionCanonicalElement.Add(newItem_definitionCanonical);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ChargeItem.ChargeItemStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ChargeItem.ChargeItemStatus>, reader); // 120
							break;
						case "partOf":
							var newItem_partOf = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_partOf, reader); // 130
							result.PartOf.Add(newItem_partOf);
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 140
							break;
						case "subject":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 150
							break;
						case "context":
							result.Context = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Context as Hl7.Fhir.Model.ResourceReference, reader); // 160
							break;
						case "occurrenceDateTime":
							result.Occurrence = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Occurrence as Hl7.Fhir.Model.FhirDateTime, reader); // 170
							break;
						case "occurrencePeriod":
							result.Occurrence = new Hl7.Fhir.Model.Period();
							Parse(result.Occurrence as Hl7.Fhir.Model.Period, reader); // 170
							break;
						case "occurrenceTiming":
							result.Occurrence = new Hl7.Fhir.Model.Timing();
							Parse(result.Occurrence as Hl7.Fhir.Model.Timing, reader); // 170
							break;
						case "performer":
							var newItem_performer = new Hl7.Fhir.Model.ChargeItem.PerformerComponent();
							Parse(newItem_performer, reader); // 180
							result.Performer.Add(newItem_performer);
							break;
						case "performingOrganization":
							result.PerformingOrganization = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.PerformingOrganization as Hl7.Fhir.Model.ResourceReference, reader); // 190
							break;
						case "requestingOrganization":
							result.RequestingOrganization = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.RequestingOrganization as Hl7.Fhir.Model.ResourceReference, reader); // 200
							break;
						case "costCenter":
							result.CostCenter = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.CostCenter as Hl7.Fhir.Model.ResourceReference, reader); // 210
							break;
						case "quantity":
							result.Quantity = new Hl7.Fhir.Model.Quantity();
							Parse(result.Quantity as Hl7.Fhir.Model.Quantity, reader); // 220
							break;
						case "bodysite":
							var newItem_bodysite = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_bodysite, reader); // 230
							result.Bodysite.Add(newItem_bodysite);
							break;
						case "factorOverride":
							result.FactorOverrideElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.FactorOverrideElement as Hl7.Fhir.Model.FhirDecimal, reader); // 240
							break;
						case "priceOverride":
							result.PriceOverride = new Hl7.Fhir.Model.Money();
							Parse(result.PriceOverride as Hl7.Fhir.Model.Money, reader); // 250
							break;
						case "overrideReason":
							result.OverrideReasonElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.OverrideReasonElement as Hl7.Fhir.Model.FhirString, reader); // 260
							break;
						case "enterer":
							result.Enterer = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Enterer as Hl7.Fhir.Model.ResourceReference, reader); // 270
							break;
						case "enteredDate":
							result.EnteredDateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.EnteredDateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 280
							break;
						case "reason":
							var newItem_reason = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_reason, reader); // 290
							result.Reason.Add(newItem_reason);
							break;
						case "service":
							var newItem_service = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_service, reader); // 300
							result.Service.Add(newItem_service);
							break;
						case "productReference":
							result.Product = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Product as Hl7.Fhir.Model.ResourceReference, reader); // 310
							break;
						case "productCodeableConcept":
							result.Product = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Product as Hl7.Fhir.Model.CodeableConcept, reader); // 310
							break;
						case "account":
							var newItem_account = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_account, reader); // 320
							result.Account.Add(newItem_account);
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 330
							result.Note.Add(newItem_note);
							break;
						case "supportingInformation":
							var newItem_supportingInformation = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_supportingInformation, reader); // 340
							result.SupportingInformation.Add(newItem_supportingInformation);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(ChargeItemDefinition result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUri, reader); // 90
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 100
							result.Identifier.Add(newItem_identifier);
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "derivedFromUri":
							var newItem_derivedFromUri = new Hl7.Fhir.Model.FhirUri();
							Parse(newItem_derivedFromUri, reader); // 130
							result.DerivedFromUriElement.Add(newItem_derivedFromUri);
							break;
						case "partOf":
							var newItem_partOf = new Hl7.Fhir.Model.Canonical();
							Parse(newItem_partOf, reader); // 140
							result.PartOfElement.Add(newItem_partOf);
							break;
						case "replaces":
							var newItem_replaces = new Hl7.Fhir.Model.Canonical();
							Parse(newItem_replaces, reader); // 150
							result.ReplacesElement.Add(newItem_replaces);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>, reader); // 160
							break;
						case "experimental":
							result.ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ExperimentalElement as Hl7.Fhir.Model.FhirBoolean, reader); // 170
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 180
							break;
						case "publisher":
							result.PublisherElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PublisherElement as Hl7.Fhir.Model.FhirString, reader); // 190
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_contact, reader); // 200
							result.Contact.Add(newItem_contact);
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.Markdown();
							Parse(result.Description as Hl7.Fhir.Model.Markdown, reader); // 210
							break;
						case "useContext":
							var newItem_useContext = new Hl7.Fhir.Model.UsageContext();
							Parse(newItem_useContext, reader); // 220
							result.UseContext.Add(newItem_useContext);
							break;
						case "jurisdiction":
							var newItem_jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_jurisdiction, reader); // 230
							result.Jurisdiction.Add(newItem_jurisdiction);
							break;
						case "copyright":
							result.Copyright = new Hl7.Fhir.Model.Markdown();
							Parse(result.Copyright as Hl7.Fhir.Model.Markdown, reader); // 240
							break;
						case "approvalDate":
							result.ApprovalDateElement = new Hl7.Fhir.Model.Date();
							Parse(result.ApprovalDateElement as Hl7.Fhir.Model.Date, reader); // 250
							break;
						case "lastReviewDate":
							result.LastReviewDateElement = new Hl7.Fhir.Model.Date();
							Parse(result.LastReviewDateElement as Hl7.Fhir.Model.Date, reader); // 260
							break;
						case "effectivePeriod":
							result.EffectivePeriod = new Hl7.Fhir.Model.Period();
							Parse(result.EffectivePeriod as Hl7.Fhir.Model.Period, reader); // 270
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 280
							break;
						case "instance":
							var newItem_instance = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_instance, reader); // 290
							result.Instance.Add(newItem_instance);
							break;
						case "applicability":
							var newItem_applicability = new Hl7.Fhir.Model.ChargeItemDefinition.ApplicabilityComponent();
							Parse(newItem_applicability, reader); // 300
							result.Applicability.Add(newItem_applicability);
							break;
						case "propertyGroup":
							var newItem_propertyGroup = new Hl7.Fhir.Model.ChargeItemDefinition.PropertyGroupComponent();
							Parse(newItem_propertyGroup, reader); // 310
							result.PropertyGroup.Add(newItem_propertyGroup);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Claim result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>, reader); // 100
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 110
							break;
						case "subType":
							result.SubType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.SubType as Hl7.Fhir.Model.CodeableConcept, reader); // 120
							break;
						case "use":
							result.UseElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Use>();
							Parse(result.UseElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Use>, reader); // 130
							break;
						case "patient":
							result.Patient = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Patient as Hl7.Fhir.Model.ResourceReference, reader); // 140
							break;
						case "billablePeriod":
							result.BillablePeriod = new Hl7.Fhir.Model.Period();
							Parse(result.BillablePeriod as Hl7.Fhir.Model.Period, reader); // 150
							break;
						case "created":
							result.CreatedElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.CreatedElement as Hl7.Fhir.Model.FhirDateTime, reader); // 160
							break;
						case "enterer":
							result.Enterer = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Enterer as Hl7.Fhir.Model.ResourceReference, reader); // 170
							break;
						case "insurer":
							result.Insurer = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Insurer as Hl7.Fhir.Model.ResourceReference, reader); // 180
							break;
						case "provider":
							result.Provider = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Provider as Hl7.Fhir.Model.ResourceReference, reader); // 190
							break;
						case "priority":
							result.Priority = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Priority as Hl7.Fhir.Model.CodeableConcept, reader); // 200
							break;
						case "fundsReserve":
							result.FundsReserve = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.FundsReserve as Hl7.Fhir.Model.CodeableConcept, reader); // 210
							break;
						case "related":
							var newItem_related = new Hl7.Fhir.Model.Claim.RelatedClaimComponent();
							Parse(newItem_related, reader); // 220
							result.Related.Add(newItem_related);
							break;
						case "prescription":
							result.Prescription = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Prescription as Hl7.Fhir.Model.ResourceReference, reader); // 230
							break;
						case "originalPrescription":
							result.OriginalPrescription = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.OriginalPrescription as Hl7.Fhir.Model.ResourceReference, reader); // 240
							break;
						case "payee":
							result.Payee = new Hl7.Fhir.Model.Claim.PayeeComponent();
							Parse(result.Payee as Hl7.Fhir.Model.Claim.PayeeComponent, reader); // 250
							break;
						case "referral":
							result.Referral = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Referral as Hl7.Fhir.Model.ResourceReference, reader); // 260
							break;
						case "facility":
							result.Facility = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Facility as Hl7.Fhir.Model.ResourceReference, reader); // 270
							break;
						case "careTeam":
							var newItem_careTeam = new Hl7.Fhir.Model.Claim.CareTeamComponent();
							Parse(newItem_careTeam, reader); // 280
							result.CareTeam.Add(newItem_careTeam);
							break;
						case "supportingInfo":
							var newItem_supportingInfo = new Hl7.Fhir.Model.Claim.SupportingInformationComponent();
							Parse(newItem_supportingInfo, reader); // 290
							result.SupportingInfo.Add(newItem_supportingInfo);
							break;
						case "diagnosis":
							var newItem_diagnosis = new Hl7.Fhir.Model.Claim.DiagnosisComponent();
							Parse(newItem_diagnosis, reader); // 300
							result.Diagnosis.Add(newItem_diagnosis);
							break;
						case "procedure":
							var newItem_procedure = new Hl7.Fhir.Model.Claim.ProcedureComponent();
							Parse(newItem_procedure, reader); // 310
							result.Procedure.Add(newItem_procedure);
							break;
						case "insurance":
							var newItem_insurance = new Hl7.Fhir.Model.Claim.InsuranceComponent();
							Parse(newItem_insurance, reader); // 320
							result.Insurance.Add(newItem_insurance);
							break;
						case "accident":
							result.Accident = new Hl7.Fhir.Model.Claim.AccidentComponent();
							Parse(result.Accident as Hl7.Fhir.Model.Claim.AccidentComponent, reader); // 330
							break;
						case "item":
							var newItem_item = new Hl7.Fhir.Model.Claim.ItemComponent();
							Parse(newItem_item, reader); // 340
							result.Item.Add(newItem_item);
							break;
						case "total":
							result.Total = new Hl7.Fhir.Model.Money();
							Parse(result.Total as Hl7.Fhir.Model.Money, reader); // 350
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(ClaimResponse result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>, reader); // 100
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 110
							break;
						case "subType":
							result.SubType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.SubType as Hl7.Fhir.Model.CodeableConcept, reader); // 120
							break;
						case "use":
							result.UseElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Use>();
							Parse(result.UseElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Use>, reader); // 130
							break;
						case "patient":
							result.Patient = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Patient as Hl7.Fhir.Model.ResourceReference, reader); // 140
							break;
						case "created":
							result.CreatedElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.CreatedElement as Hl7.Fhir.Model.FhirDateTime, reader); // 150
							break;
						case "insurer":
							result.Insurer = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Insurer as Hl7.Fhir.Model.ResourceReference, reader); // 160
							break;
						case "requestor":
							result.Requestor = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Requestor as Hl7.Fhir.Model.ResourceReference, reader); // 170
							break;
						case "request":
							result.Request = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Request as Hl7.Fhir.Model.ResourceReference, reader); // 180
							break;
						case "outcome":
							result.OutcomeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ClaimProcessingCodes>();
							Parse(result.OutcomeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ClaimProcessingCodes>, reader); // 190
							break;
						case "disposition":
							result.DispositionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DispositionElement as Hl7.Fhir.Model.FhirString, reader); // 200
							break;
						case "preAuthRef":
							result.PreAuthRefElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PreAuthRefElement as Hl7.Fhir.Model.FhirString, reader); // 210
							break;
						case "preAuthPeriod":
							result.PreAuthPeriod = new Hl7.Fhir.Model.Period();
							Parse(result.PreAuthPeriod as Hl7.Fhir.Model.Period, reader); // 220
							break;
						case "payeeType":
							result.PayeeType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.PayeeType as Hl7.Fhir.Model.CodeableConcept, reader); // 230
							break;
						case "item":
							var newItem_item = new Hl7.Fhir.Model.ClaimResponse.ItemComponent();
							Parse(newItem_item, reader); // 240
							result.Item.Add(newItem_item);
							break;
						case "addItem":
							var newItem_addItem = new Hl7.Fhir.Model.ClaimResponse.AddedItemComponent();
							Parse(newItem_addItem, reader); // 250
							result.AddItem.Add(newItem_addItem);
							break;
						case "adjudication":
							var newItem_adjudication = new Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent();
							Parse(newItem_adjudication, reader); // 260
							result.Adjudication.Add(newItem_adjudication);
							break;
						case "total":
							var newItem_total = new Hl7.Fhir.Model.ClaimResponse.TotalComponent();
							Parse(newItem_total, reader); // 270
							result.Total.Add(newItem_total);
							break;
						case "payment":
							result.Payment = new Hl7.Fhir.Model.ClaimResponse.PaymentComponent();
							Parse(result.Payment as Hl7.Fhir.Model.ClaimResponse.PaymentComponent, reader); // 280
							break;
						case "fundsReserve":
							result.FundsReserve = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.FundsReserve as Hl7.Fhir.Model.CodeableConcept, reader); // 290
							break;
						case "formCode":
							result.FormCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.FormCode as Hl7.Fhir.Model.CodeableConcept, reader); // 300
							break;
						case "form":
							result.Form = new Hl7.Fhir.Model.Attachment();
							Parse(result.Form as Hl7.Fhir.Model.Attachment, reader); // 310
							break;
						case "processNote":
							var newItem_processNote = new Hl7.Fhir.Model.ClaimResponse.NoteComponent();
							Parse(newItem_processNote, reader); // 320
							result.ProcessNote.Add(newItem_processNote);
							break;
						case "communicationRequest":
							var newItem_communicationRequest = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_communicationRequest, reader); // 330
							result.CommunicationRequest.Add(newItem_communicationRequest);
							break;
						case "insurance":
							var newItem_insurance = new Hl7.Fhir.Model.ClaimResponse.InsuranceComponent();
							Parse(newItem_insurance, reader); // 340
							result.Insurance.Add(newItem_insurance);
							break;
						case "error":
							var newItem_error = new Hl7.Fhir.Model.ClaimResponse.ErrorComponent();
							Parse(newItem_error, reader); // 350
							result.Error.Add(newItem_error);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(ClinicalImpression result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ClinicalImpression.ClinicalImpressionStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ClinicalImpression.ClinicalImpressionStatus>, reader); // 100
							break;
						case "statusReason":
							result.StatusReason = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.StatusReason as Hl7.Fhir.Model.CodeableConcept, reader); // 110
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 120
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 130
							break;
						case "subject":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 140
							break;
						case "encounter":
							result.Encounter = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Encounter as Hl7.Fhir.Model.ResourceReference, reader); // 150
							break;
						case "effectiveDateTime":
							result.Effective = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Effective as Hl7.Fhir.Model.FhirDateTime, reader); // 160
							break;
						case "effectivePeriod":
							result.Effective = new Hl7.Fhir.Model.Period();
							Parse(result.Effective as Hl7.Fhir.Model.Period, reader); // 160
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 170
							break;
						case "assessor":
							result.Assessor = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Assessor as Hl7.Fhir.Model.ResourceReference, reader); // 180
							break;
						case "previous":
							result.Previous = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Previous as Hl7.Fhir.Model.ResourceReference, reader); // 190
							break;
						case "problem":
							var newItem_problem = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_problem, reader); // 200
							result.Problem.Add(newItem_problem);
							break;
						case "investigation":
							var newItem_investigation = new Hl7.Fhir.Model.ClinicalImpression.InvestigationComponent();
							Parse(newItem_investigation, reader); // 210
							result.Investigation.Add(newItem_investigation);
							break;
						case "protocol":
							var newItem_protocol = new Hl7.Fhir.Model.FhirUri();
							Parse(newItem_protocol, reader); // 220
							result.ProtocolElement.Add(newItem_protocol);
							break;
						case "summary":
							result.SummaryElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.SummaryElement as Hl7.Fhir.Model.FhirString, reader); // 230
							break;
						case "finding":
							var newItem_finding = new Hl7.Fhir.Model.ClinicalImpression.FindingComponent();
							Parse(newItem_finding, reader); // 240
							result.Finding.Add(newItem_finding);
							break;
						case "prognosisCodeableConcept":
							var newItem_prognosisCodeableConcept = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_prognosisCodeableConcept, reader); // 250
							result.PrognosisCodeableConcept.Add(newItem_prognosisCodeableConcept);
							break;
						case "prognosisReference":
							var newItem_prognosisReference = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_prognosisReference, reader); // 260
							result.PrognosisReference.Add(newItem_prognosisReference);
							break;
						case "supportingInfo":
							var newItem_supportingInfo = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_supportingInfo, reader); // 270
							result.SupportingInfo.Add(newItem_supportingInfo);
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 280
							result.Note.Add(newItem_note);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(CodeSystem result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUri, reader); // 90
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 100
							result.Identifier.Add(newItem_identifier);
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 130
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>, reader); // 140
							break;
						case "experimental":
							result.ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ExperimentalElement as Hl7.Fhir.Model.FhirBoolean, reader); // 150
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 160
							break;
						case "publisher":
							result.PublisherElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PublisherElement as Hl7.Fhir.Model.FhirString, reader); // 170
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_contact, reader); // 180
							result.Contact.Add(newItem_contact);
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.Markdown();
							Parse(result.Description as Hl7.Fhir.Model.Markdown, reader); // 190
							break;
						case "useContext":
							var newItem_useContext = new Hl7.Fhir.Model.UsageContext();
							Parse(newItem_useContext, reader); // 200
							result.UseContext.Add(newItem_useContext);
							break;
						case "jurisdiction":
							var newItem_jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_jurisdiction, reader); // 210
							result.Jurisdiction.Add(newItem_jurisdiction);
							break;
						case "purpose":
							result.Purpose = new Hl7.Fhir.Model.Markdown();
							Parse(result.Purpose as Hl7.Fhir.Model.Markdown, reader); // 220
							break;
						case "copyright":
							result.Copyright = new Hl7.Fhir.Model.Markdown();
							Parse(result.Copyright as Hl7.Fhir.Model.Markdown, reader); // 230
							break;
						case "caseSensitive":
							result.CaseSensitiveElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.CaseSensitiveElement as Hl7.Fhir.Model.FhirBoolean, reader); // 240
							break;
						case "valueSet":
							result.ValueSetElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.ValueSetElement as Hl7.Fhir.Model.Canonical, reader); // 250
							break;
						case "hierarchyMeaning":
							result.HierarchyMeaningElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CodeSystem.CodeSystemHierarchyMeaning>();
							Parse(result.HierarchyMeaningElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CodeSystem.CodeSystemHierarchyMeaning>, reader); // 260
							break;
						case "compositional":
							result.CompositionalElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.CompositionalElement as Hl7.Fhir.Model.FhirBoolean, reader); // 270
							break;
						case "versionNeeded":
							result.VersionNeededElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.VersionNeededElement as Hl7.Fhir.Model.FhirBoolean, reader); // 280
							break;
						case "content":
							result.ContentElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CodeSystem.CodeSystemContentMode>();
							Parse(result.ContentElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CodeSystem.CodeSystemContentMode>, reader); // 290
							break;
						case "supplements":
							result.SupplementsElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.SupplementsElement as Hl7.Fhir.Model.Canonical, reader); // 300
							break;
						case "count":
							result.CountElement = new Hl7.Fhir.Model.UnsignedInt();
							Parse(result.CountElement as Hl7.Fhir.Model.UnsignedInt, reader); // 310
							break;
						case "filter":
							var newItem_filter = new Hl7.Fhir.Model.CodeSystem.FilterComponent();
							Parse(newItem_filter, reader); // 320
							result.Filter.Add(newItem_filter);
							break;
						case "property":
							var newItem_property = new Hl7.Fhir.Model.CodeSystem.PropertyComponent();
							Parse(newItem_property, reader); // 330
							result.Property.Add(newItem_property);
							break;
						case "concept":
							var newItem_concept = new Hl7.Fhir.Model.CodeSystem.ConceptDefinitionComponent();
							Parse(newItem_concept, reader); // 340
							result.Concept.Add(newItem_concept);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Communication result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "instantiatesCanonical":
							var newItem_instantiatesCanonical = new Hl7.Fhir.Model.Canonical();
							Parse(newItem_instantiatesCanonical, reader); // 100
							result.InstantiatesCanonicalElement.Add(newItem_instantiatesCanonical);
							break;
						case "instantiatesUri":
							var newItem_instantiatesUri = new Hl7.Fhir.Model.FhirUri();
							Parse(newItem_instantiatesUri, reader); // 110
							result.InstantiatesUriElement.Add(newItem_instantiatesUri);
							break;
						case "basedOn":
							var newItem_basedOn = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_basedOn, reader); // 120
							result.BasedOn.Add(newItem_basedOn);
							break;
						case "partOf":
							var newItem_partOf = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_partOf, reader); // 130
							result.PartOf.Add(newItem_partOf);
							break;
						case "inResponseTo":
							var newItem_inResponseTo = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_inResponseTo, reader); // 140
							result.InResponseTo.Add(newItem_inResponseTo);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.EventStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.EventStatus>, reader); // 150
							break;
						case "statusReason":
							result.StatusReason = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.StatusReason as Hl7.Fhir.Model.CodeableConcept, reader); // 160
							break;
						case "category":
							var newItem_category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_category, reader); // 170
							result.Category.Add(newItem_category);
							break;
						case "priority":
							result.PriorityElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestPriority>();
							Parse(result.PriorityElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestPriority>, reader); // 180
							break;
						case "medium":
							var newItem_medium = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_medium, reader); // 190
							result.Medium.Add(newItem_medium);
							break;
						case "subject":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 200
							break;
						case "topic":
							result.Topic = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Topic as Hl7.Fhir.Model.CodeableConcept, reader); // 210
							break;
						case "about":
							var newItem_about = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_about, reader); // 220
							result.About.Add(newItem_about);
							break;
						case "encounter":
							result.Encounter = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Encounter as Hl7.Fhir.Model.ResourceReference, reader); // 230
							break;
						case "sent":
							result.SentElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.SentElement as Hl7.Fhir.Model.FhirDateTime, reader); // 240
							break;
						case "received":
							result.ReceivedElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.ReceivedElement as Hl7.Fhir.Model.FhirDateTime, reader); // 250
							break;
						case "recipient":
							var newItem_recipient = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_recipient, reader); // 260
							result.Recipient.Add(newItem_recipient);
							break;
						case "sender":
							result.Sender = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Sender as Hl7.Fhir.Model.ResourceReference, reader); // 270
							break;
						case "reasonCode":
							var newItem_reasonCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_reasonCode, reader); // 280
							result.ReasonCode.Add(newItem_reasonCode);
							break;
						case "reasonReference":
							var newItem_reasonReference = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_reasonReference, reader); // 290
							result.ReasonReference.Add(newItem_reasonReference);
							break;
						case "payload":
							var newItem_payload = new Hl7.Fhir.Model.Communication.PayloadComponent();
							Parse(newItem_payload, reader); // 300
							result.Payload.Add(newItem_payload);
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 310
							result.Note.Add(newItem_note);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(CommunicationRequest result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "basedOn":
							var newItem_basedOn = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_basedOn, reader); // 100
							result.BasedOn.Add(newItem_basedOn);
							break;
						case "replaces":
							var newItem_replaces = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_replaces, reader); // 110
							result.Replaces.Add(newItem_replaces);
							break;
						case "groupIdentifier":
							result.GroupIdentifier = new Hl7.Fhir.Model.Identifier();
							Parse(result.GroupIdentifier as Hl7.Fhir.Model.Identifier, reader); // 120
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestStatus>, reader); // 130
							break;
						case "statusReason":
							result.StatusReason = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.StatusReason as Hl7.Fhir.Model.CodeableConcept, reader); // 140
							break;
						case "category":
							var newItem_category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_category, reader); // 150
							result.Category.Add(newItem_category);
							break;
						case "priority":
							result.PriorityElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestPriority>();
							Parse(result.PriorityElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestPriority>, reader); // 160
							break;
						case "doNotPerform":
							result.DoNotPerformElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.DoNotPerformElement as Hl7.Fhir.Model.FhirBoolean, reader); // 170
							break;
						case "medium":
							var newItem_medium = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_medium, reader); // 180
							result.Medium.Add(newItem_medium);
							break;
						case "subject":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 190
							break;
						case "about":
							var newItem_about = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_about, reader); // 200
							result.About.Add(newItem_about);
							break;
						case "encounter":
							result.Encounter = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Encounter as Hl7.Fhir.Model.ResourceReference, reader); // 210
							break;
						case "payload":
							var newItem_payload = new Hl7.Fhir.Model.CommunicationRequest.PayloadComponent();
							Parse(newItem_payload, reader); // 220
							result.Payload.Add(newItem_payload);
							break;
						case "occurrenceDateTime":
							result.Occurrence = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Occurrence as Hl7.Fhir.Model.FhirDateTime, reader); // 230
							break;
						case "occurrencePeriod":
							result.Occurrence = new Hl7.Fhir.Model.Period();
							Parse(result.Occurrence as Hl7.Fhir.Model.Period, reader); // 230
							break;
						case "authoredOn":
							result.AuthoredOnElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.AuthoredOnElement as Hl7.Fhir.Model.FhirDateTime, reader); // 240
							break;
						case "requester":
							result.Requester = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Requester as Hl7.Fhir.Model.ResourceReference, reader); // 250
							break;
						case "recipient":
							var newItem_recipient = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_recipient, reader); // 260
							result.Recipient.Add(newItem_recipient);
							break;
						case "sender":
							result.Sender = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Sender as Hl7.Fhir.Model.ResourceReference, reader); // 270
							break;
						case "reasonCode":
							var newItem_reasonCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_reasonCode, reader); // 280
							result.ReasonCode.Add(newItem_reasonCode);
							break;
						case "reasonReference":
							var newItem_reasonReference = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_reasonReference, reader); // 290
							result.ReasonReference.Add(newItem_reasonReference);
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 300
							result.Note.Add(newItem_note);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(CompartmentDefinition result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUri, reader); // 90
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 100
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>, reader); // 120
							break;
						case "experimental":
							result.ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ExperimentalElement as Hl7.Fhir.Model.FhirBoolean, reader); // 130
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 140
							break;
						case "publisher":
							result.PublisherElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PublisherElement as Hl7.Fhir.Model.FhirString, reader); // 150
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_contact, reader); // 160
							result.Contact.Add(newItem_contact);
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.Markdown();
							Parse(result.Description as Hl7.Fhir.Model.Markdown, reader); // 170
							break;
						case "useContext":
							var newItem_useContext = new Hl7.Fhir.Model.UsageContext();
							Parse(newItem_useContext, reader); // 180
							result.UseContext.Add(newItem_useContext);
							break;
						case "purpose":
							result.Purpose = new Hl7.Fhir.Model.Markdown();
							Parse(result.Purpose as Hl7.Fhir.Model.Markdown, reader); // 190
							break;
						case "code":
							result.CodeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CompartmentType>();
							Parse(result.CodeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CompartmentType>, reader); // 200
							break;
						case "search":
							result.SearchElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.SearchElement as Hl7.Fhir.Model.FhirBoolean, reader); // 210
							break;
						case "resource":
							var newItem_resource = new Hl7.Fhir.Model.CompartmentDefinition.ResourceComponent();
							Parse(newItem_resource, reader); // 220
							result.Resource.Add(newItem_resource);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Composition result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							result.Identifier = new Hl7.Fhir.Model.Identifier();
							Parse(result.Identifier as Hl7.Fhir.Model.Identifier, reader); // 90
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CompositionStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CompositionStatus>, reader); // 100
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 110
							break;
						case "category":
							var newItem_category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_category, reader); // 120
							result.Category.Add(newItem_category);
							break;
						case "subject":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 130
							break;
						case "encounter":
							result.Encounter = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Encounter as Hl7.Fhir.Model.ResourceReference, reader); // 140
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 150
							break;
						case "author":
							var newItem_author = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_author, reader); // 160
							result.Author.Add(newItem_author);
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 170
							break;
						case "confidentiality":
							result.ConfidentialityElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Composition.v3_ConfidentialityClassification>();
							Parse(result.ConfidentialityElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Composition.v3_ConfidentialityClassification>, reader); // 180
							break;
						case "attester":
							var newItem_attester = new Hl7.Fhir.Model.Composition.AttesterComponent();
							Parse(newItem_attester, reader); // 190
							result.Attester.Add(newItem_attester);
							break;
						case "custodian":
							result.Custodian = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Custodian as Hl7.Fhir.Model.ResourceReference, reader); // 200
							break;
						case "relatesTo":
							var newItem_relatesTo = new Hl7.Fhir.Model.Composition.RelatesToComponent();
							Parse(newItem_relatesTo, reader); // 210
							result.RelatesTo.Add(newItem_relatesTo);
							break;
						case "event":
							var newItem_event = new Hl7.Fhir.Model.Composition.EventComponent();
							Parse(newItem_event, reader); // 220
							result.Event.Add(newItem_event);
							break;
						case "section":
							var newItem_section = new Hl7.Fhir.Model.Composition.SectionComponent();
							Parse(newItem_section, reader); // 230
							result.Section.Add(newItem_section);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(ConceptMap result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUri, reader); // 90
							break;
						case "identifier":
							result.Identifier = new Hl7.Fhir.Model.Identifier();
							Parse(result.Identifier as Hl7.Fhir.Model.Identifier, reader); // 100
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 130
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>, reader); // 140
							break;
						case "experimental":
							result.ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ExperimentalElement as Hl7.Fhir.Model.FhirBoolean, reader); // 150
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 160
							break;
						case "publisher":
							result.PublisherElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PublisherElement as Hl7.Fhir.Model.FhirString, reader); // 170
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_contact, reader); // 180
							result.Contact.Add(newItem_contact);
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.Markdown();
							Parse(result.Description as Hl7.Fhir.Model.Markdown, reader); // 190
							break;
						case "useContext":
							var newItem_useContext = new Hl7.Fhir.Model.UsageContext();
							Parse(newItem_useContext, reader); // 200
							result.UseContext.Add(newItem_useContext);
							break;
						case "jurisdiction":
							var newItem_jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_jurisdiction, reader); // 210
							result.Jurisdiction.Add(newItem_jurisdiction);
							break;
						case "purpose":
							result.Purpose = new Hl7.Fhir.Model.Markdown();
							Parse(result.Purpose as Hl7.Fhir.Model.Markdown, reader); // 220
							break;
						case "copyright":
							result.Copyright = new Hl7.Fhir.Model.Markdown();
							Parse(result.Copyright as Hl7.Fhir.Model.Markdown, reader); // 230
							break;
						case "sourceUri":
							result.Source = new Hl7.Fhir.Model.FhirUri();
							Parse(result.Source as Hl7.Fhir.Model.FhirUri, reader); // 240
							break;
						case "sourceCanonical":
							result.Source = new Hl7.Fhir.Model.Canonical();
							Parse(result.Source as Hl7.Fhir.Model.Canonical, reader); // 240
							break;
						case "targetUri":
							result.Target = new Hl7.Fhir.Model.FhirUri();
							Parse(result.Target as Hl7.Fhir.Model.FhirUri, reader); // 250
							break;
						case "targetCanonical":
							result.Target = new Hl7.Fhir.Model.Canonical();
							Parse(result.Target as Hl7.Fhir.Model.Canonical, reader); // 250
							break;
						case "group":
							var newItem_group = new Hl7.Fhir.Model.ConceptMap.GroupComponent();
							Parse(newItem_group, reader); // 260
							result.Group.Add(newItem_group);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Condition result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "clinicalStatus":
							result.ClinicalStatus = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.ClinicalStatus as Hl7.Fhir.Model.CodeableConcept, reader); // 100
							break;
						case "verificationStatus":
							result.VerificationStatus = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.VerificationStatus as Hl7.Fhir.Model.CodeableConcept, reader); // 110
							break;
						case "category":
							var newItem_category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_category, reader); // 120
							result.Category.Add(newItem_category);
							break;
						case "severity":
							result.Severity = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Severity as Hl7.Fhir.Model.CodeableConcept, reader); // 130
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 140
							break;
						case "bodySite":
							var newItem_bodySite = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_bodySite, reader); // 150
							result.BodySite.Add(newItem_bodySite);
							break;
						case "subject":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 160
							break;
						case "encounter":
							result.Encounter = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Encounter as Hl7.Fhir.Model.ResourceReference, reader); // 170
							break;
						case "onsetDateTime":
							result.Onset = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Onset as Hl7.Fhir.Model.FhirDateTime, reader); // 180
							break;
						case "onsetAge":
							result.Onset = new Hl7.Fhir.Model.Age();
							Parse(result.Onset as Hl7.Fhir.Model.Age, reader); // 180
							break;
						case "onsetPeriod":
							result.Onset = new Hl7.Fhir.Model.Period();
							Parse(result.Onset as Hl7.Fhir.Model.Period, reader); // 180
							break;
						case "onsetRange":
							result.Onset = new Hl7.Fhir.Model.Range();
							Parse(result.Onset as Hl7.Fhir.Model.Range, reader); // 180
							break;
						case "onsetString":
							result.Onset = new Hl7.Fhir.Model.FhirString();
							Parse(result.Onset as Hl7.Fhir.Model.FhirString, reader); // 180
							break;
						case "abatementDateTime":
							result.Abatement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Abatement as Hl7.Fhir.Model.FhirDateTime, reader); // 190
							break;
						case "abatementAge":
							result.Abatement = new Hl7.Fhir.Model.Age();
							Parse(result.Abatement as Hl7.Fhir.Model.Age, reader); // 190
							break;
						case "abatementPeriod":
							result.Abatement = new Hl7.Fhir.Model.Period();
							Parse(result.Abatement as Hl7.Fhir.Model.Period, reader); // 190
							break;
						case "abatementRange":
							result.Abatement = new Hl7.Fhir.Model.Range();
							Parse(result.Abatement as Hl7.Fhir.Model.Range, reader); // 190
							break;
						case "abatementString":
							result.Abatement = new Hl7.Fhir.Model.FhirString();
							Parse(result.Abatement as Hl7.Fhir.Model.FhirString, reader); // 190
							break;
						case "recordedDate":
							result.RecordedDateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.RecordedDateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 200
							break;
						case "recorder":
							result.Recorder = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Recorder as Hl7.Fhir.Model.ResourceReference, reader); // 210
							break;
						case "asserter":
							result.Asserter = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Asserter as Hl7.Fhir.Model.ResourceReference, reader); // 220
							break;
						case "stage":
							var newItem_stage = new Hl7.Fhir.Model.Condition.StageComponent();
							Parse(newItem_stage, reader); // 230
							result.Stage.Add(newItem_stage);
							break;
						case "evidence":
							var newItem_evidence = new Hl7.Fhir.Model.Condition.EvidenceComponent();
							Parse(newItem_evidence, reader); // 240
							result.Evidence.Add(newItem_evidence);
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 250
							result.Note.Add(newItem_note);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Consent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Consent.ConsentState>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Consent.ConsentState>, reader); // 100
							break;
						case "scope":
							result.Scope = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Scope as Hl7.Fhir.Model.CodeableConcept, reader); // 110
							break;
						case "category":
							var newItem_category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_category, reader); // 120
							result.Category.Add(newItem_category);
							break;
						case "patient":
							result.Patient = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Patient as Hl7.Fhir.Model.ResourceReference, reader); // 130
							break;
						case "dateTime":
							result.DateTimeElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateTimeElement as Hl7.Fhir.Model.FhirDateTime, reader); // 140
							break;
						case "performer":
							var newItem_performer = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_performer, reader); // 150
							result.Performer.Add(newItem_performer);
							break;
						case "organization":
							var newItem_organization = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_organization, reader); // 160
							result.Organization.Add(newItem_organization);
							break;
						case "sourceAttachment":
							result.Source = new Hl7.Fhir.Model.Attachment();
							Parse(result.Source as Hl7.Fhir.Model.Attachment, reader); // 170
							break;
						case "sourceReference":
							result.Source = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Source as Hl7.Fhir.Model.ResourceReference, reader); // 170
							break;
						case "policy":
							var newItem_policy = new Hl7.Fhir.Model.Consent.PolicyComponent();
							Parse(newItem_policy, reader); // 180
							result.Policy.Add(newItem_policy);
							break;
						case "policyRule":
							result.PolicyRule = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.PolicyRule as Hl7.Fhir.Model.CodeableConcept, reader); // 190
							break;
						case "verification":
							var newItem_verification = new Hl7.Fhir.Model.Consent.VerificationComponent();
							Parse(newItem_verification, reader); // 200
							result.Verification.Add(newItem_verification);
							break;
						case "provision":
							result.Provision = new Hl7.Fhir.Model.Consent.provisionComponent();
							Parse(result.Provision as Hl7.Fhir.Model.Consent.provisionComponent, reader); // 210
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Contract result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUri, reader); // 100
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Contract.ContractResourceStatusCodes>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Contract.ContractResourceStatusCodes>, reader); // 120
							break;
						case "legalState":
							result.LegalState = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.LegalState as Hl7.Fhir.Model.CodeableConcept, reader); // 130
							break;
						case "instantiatesCanonical":
							result.InstantiatesCanonical = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.InstantiatesCanonical as Hl7.Fhir.Model.ResourceReference, reader); // 140
							break;
						case "instantiatesUri":
							result.InstantiatesUriElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.InstantiatesUriElement as Hl7.Fhir.Model.FhirUri, reader); // 150
							break;
						case "contentDerivative":
							result.ContentDerivative = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.ContentDerivative as Hl7.Fhir.Model.CodeableConcept, reader); // 160
							break;
						case "issued":
							result.IssuedElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.IssuedElement as Hl7.Fhir.Model.FhirDateTime, reader); // 170
							break;
						case "applies":
							result.Applies = new Hl7.Fhir.Model.Period();
							Parse(result.Applies as Hl7.Fhir.Model.Period, reader); // 180
							break;
						case "expirationType":
							result.ExpirationType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.ExpirationType as Hl7.Fhir.Model.CodeableConcept, reader); // 190
							break;
						case "subject":
							var newItem_subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_subject, reader); // 200
							result.Subject.Add(newItem_subject);
							break;
						case "authority":
							var newItem_authority = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_authority, reader); // 210
							result.Authority.Add(newItem_authority);
							break;
						case "domain":
							var newItem_domain = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_domain, reader); // 220
							result.Domain.Add(newItem_domain);
							break;
						case "site":
							var newItem_site = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_site, reader); // 230
							result.Site.Add(newItem_site);
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 240
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 250
							break;
						case "subtitle":
							result.SubtitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.SubtitleElement as Hl7.Fhir.Model.FhirString, reader); // 260
							break;
						case "alias":
							var newItem_alias = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_alias, reader); // 270
							result.AliasElement.Add(newItem_alias);
							break;
						case "author":
							result.Author = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Author as Hl7.Fhir.Model.ResourceReference, reader); // 280
							break;
						case "scope":
							result.Scope = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Scope as Hl7.Fhir.Model.CodeableConcept, reader); // 290
							break;
						case "topicCodeableConcept":
							result.Topic = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Topic as Hl7.Fhir.Model.CodeableConcept, reader); // 300
							break;
						case "topicReference":
							result.Topic = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Topic as Hl7.Fhir.Model.ResourceReference, reader); // 300
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 310
							break;
						case "subType":
							var newItem_subType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_subType, reader); // 320
							result.SubType.Add(newItem_subType);
							break;
						case "contentDefinition":
							result.ContentDefinition = new Hl7.Fhir.Model.Contract.ContentDefinitionComponent();
							Parse(result.ContentDefinition as Hl7.Fhir.Model.Contract.ContentDefinitionComponent, reader); // 330
							break;
						case "term":
							var newItem_term = new Hl7.Fhir.Model.Contract.TermComponent();
							Parse(newItem_term, reader); // 340
							result.Term.Add(newItem_term);
							break;
						case "supportingInfo":
							var newItem_supportingInfo = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_supportingInfo, reader); // 350
							result.SupportingInfo.Add(newItem_supportingInfo);
							break;
						case "relevantHistory":
							var newItem_relevantHistory = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_relevantHistory, reader); // 360
							result.RelevantHistory.Add(newItem_relevantHistory);
							break;
						case "signer":
							var newItem_signer = new Hl7.Fhir.Model.Contract.SignatoryComponent();
							Parse(newItem_signer, reader); // 370
							result.Signer.Add(newItem_signer);
							break;
						case "friendly":
							var newItem_friendly = new Hl7.Fhir.Model.Contract.FriendlyLanguageComponent();
							Parse(newItem_friendly, reader); // 380
							result.Friendly.Add(newItem_friendly);
							break;
						case "legal":
							var newItem_legal = new Hl7.Fhir.Model.Contract.LegalLanguageComponent();
							Parse(newItem_legal, reader); // 390
							result.Legal.Add(newItem_legal);
							break;
						case "rule":
							var newItem_rule = new Hl7.Fhir.Model.Contract.ComputableLanguageComponent();
							Parse(newItem_rule, reader); // 400
							result.Rule.Add(newItem_rule);
							break;
						case "legallyBindingAttachment":
							result.LegallyBinding = new Hl7.Fhir.Model.Attachment();
							Parse(result.LegallyBinding as Hl7.Fhir.Model.Attachment, reader); // 410
							break;
						case "legallyBindingReference":
							result.LegallyBinding = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.LegallyBinding as Hl7.Fhir.Model.ResourceReference, reader); // 410
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Coverage result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>, reader); // 100
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 110
							break;
						case "policyHolder":
							result.PolicyHolder = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.PolicyHolder as Hl7.Fhir.Model.ResourceReference, reader); // 120
							break;
						case "subscriber":
							result.Subscriber = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subscriber as Hl7.Fhir.Model.ResourceReference, reader); // 130
							break;
						case "subscriberId":
							result.SubscriberIdElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.SubscriberIdElement as Hl7.Fhir.Model.FhirString, reader); // 140
							break;
						case "beneficiary":
							result.Beneficiary = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Beneficiary as Hl7.Fhir.Model.ResourceReference, reader); // 150
							break;
						case "dependent":
							result.DependentElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DependentElement as Hl7.Fhir.Model.FhirString, reader); // 160
							break;
						case "relationship":
							result.Relationship = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Relationship as Hl7.Fhir.Model.CodeableConcept, reader); // 170
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 180
							break;
						case "payor":
							var newItem_payor = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_payor, reader); // 190
							result.Payor.Add(newItem_payor);
							break;
						case "class":
							var newItem_class = new Hl7.Fhir.Model.Coverage.ClassComponent();
							Parse(newItem_class, reader); // 200
							result.Class.Add(newItem_class);
							break;
						case "order":
							result.OrderElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.OrderElement as Hl7.Fhir.Model.PositiveInt, reader); // 210
							break;
						case "network":
							result.NetworkElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NetworkElement as Hl7.Fhir.Model.FhirString, reader); // 220
							break;
						case "costToBeneficiary":
							var newItem_costToBeneficiary = new Hl7.Fhir.Model.Coverage.CostToBeneficiaryComponent();
							Parse(newItem_costToBeneficiary, reader); // 230
							result.CostToBeneficiary.Add(newItem_costToBeneficiary);
							break;
						case "subrogation":
							result.SubrogationElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.SubrogationElement as Hl7.Fhir.Model.FhirBoolean, reader); // 240
							break;
						case "contract":
							var newItem_contract = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_contract, reader); // 250
							result.Contract.Add(newItem_contract);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(CoverageEligibilityRequest result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>, reader); // 100
							break;
						case "priority":
							result.Priority = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Priority as Hl7.Fhir.Model.CodeableConcept, reader); // 110
							break;
						case "purpose":
							var newItem_purpose = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CoverageEligibilityRequest.EligibilityRequestPurpose>();
							Parse(newItem_purpose, reader); // 120
							result.PurposeElement.Add(newItem_purpose);
							break;
						case "patient":
							result.Patient = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Patient as Hl7.Fhir.Model.ResourceReference, reader); // 130
							break;
						case "servicedDate":
							result.Serviced = new Hl7.Fhir.Model.Date();
							Parse(result.Serviced as Hl7.Fhir.Model.Date, reader); // 140
							break;
						case "servicedPeriod":
							result.Serviced = new Hl7.Fhir.Model.Period();
							Parse(result.Serviced as Hl7.Fhir.Model.Period, reader); // 140
							break;
						case "created":
							result.CreatedElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.CreatedElement as Hl7.Fhir.Model.FhirDateTime, reader); // 150
							break;
						case "enterer":
							result.Enterer = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Enterer as Hl7.Fhir.Model.ResourceReference, reader); // 160
							break;
						case "provider":
							result.Provider = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Provider as Hl7.Fhir.Model.ResourceReference, reader); // 170
							break;
						case "insurer":
							result.Insurer = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Insurer as Hl7.Fhir.Model.ResourceReference, reader); // 180
							break;
						case "facility":
							result.Facility = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Facility as Hl7.Fhir.Model.ResourceReference, reader); // 190
							break;
						case "supportingInfo":
							var newItem_supportingInfo = new Hl7.Fhir.Model.CoverageEligibilityRequest.SupportingInformationComponent();
							Parse(newItem_supportingInfo, reader); // 200
							result.SupportingInfo.Add(newItem_supportingInfo);
							break;
						case "insurance":
							var newItem_insurance = new Hl7.Fhir.Model.CoverageEligibilityRequest.InsuranceComponent();
							Parse(newItem_insurance, reader); // 210
							result.Insurance.Add(newItem_insurance);
							break;
						case "item":
							var newItem_item = new Hl7.Fhir.Model.CoverageEligibilityRequest.DetailsComponent();
							Parse(newItem_item, reader); // 220
							result.Item.Add(newItem_item);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(CoverageEligibilityResponse result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>, reader); // 100
							break;
						case "purpose":
							var newItem_purpose = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CoverageEligibilityResponse.EligibilityResponsePurpose>();
							Parse(newItem_purpose, reader); // 110
							result.PurposeElement.Add(newItem_purpose);
							break;
						case "patient":
							result.Patient = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Patient as Hl7.Fhir.Model.ResourceReference, reader); // 120
							break;
						case "servicedDate":
							result.Serviced = new Hl7.Fhir.Model.Date();
							Parse(result.Serviced as Hl7.Fhir.Model.Date, reader); // 130
							break;
						case "servicedPeriod":
							result.Serviced = new Hl7.Fhir.Model.Period();
							Parse(result.Serviced as Hl7.Fhir.Model.Period, reader); // 130
							break;
						case "created":
							result.CreatedElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.CreatedElement as Hl7.Fhir.Model.FhirDateTime, reader); // 140
							break;
						case "requestor":
							result.Requestor = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Requestor as Hl7.Fhir.Model.ResourceReference, reader); // 150
							break;
						case "request":
							result.Request = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Request as Hl7.Fhir.Model.ResourceReference, reader); // 160
							break;
						case "outcome":
							result.OutcomeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ClaimProcessingCodes>();
							Parse(result.OutcomeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ClaimProcessingCodes>, reader); // 170
							break;
						case "disposition":
							result.DispositionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DispositionElement as Hl7.Fhir.Model.FhirString, reader); // 180
							break;
						case "insurer":
							result.Insurer = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Insurer as Hl7.Fhir.Model.ResourceReference, reader); // 190
							break;
						case "insurance":
							var newItem_insurance = new Hl7.Fhir.Model.CoverageEligibilityResponse.InsuranceComponent();
							Parse(newItem_insurance, reader); // 200
							result.Insurance.Add(newItem_insurance);
							break;
						case "preAuthRef":
							result.PreAuthRefElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PreAuthRefElement as Hl7.Fhir.Model.FhirString, reader); // 210
							break;
						case "form":
							result.Form = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Form as Hl7.Fhir.Model.CodeableConcept, reader); // 220
							break;
						case "error":
							var newItem_error = new Hl7.Fhir.Model.CoverageEligibilityResponse.ErrorsComponent();
							Parse(newItem_error, reader); // 230
							result.Error.Add(newItem_error);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(DetectedIssue result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ObservationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ObservationStatus>, reader); // 100
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 110
							break;
						case "severity":
							result.SeverityElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DetectedIssue.DetectedIssueSeverity>();
							Parse(result.SeverityElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DetectedIssue.DetectedIssueSeverity>, reader); // 120
							break;
						case "patient":
							result.Patient = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Patient as Hl7.Fhir.Model.ResourceReference, reader); // 130
							break;
						case "identifiedDateTime":
							result.Identified = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Identified as Hl7.Fhir.Model.FhirDateTime, reader); // 140
							break;
						case "identifiedPeriod":
							result.Identified = new Hl7.Fhir.Model.Period();
							Parse(result.Identified as Hl7.Fhir.Model.Period, reader); // 140
							break;
						case "author":
							result.Author = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Author as Hl7.Fhir.Model.ResourceReference, reader); // 150
							break;
						case "implicated":
							var newItem_implicated = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_implicated, reader); // 160
							result.Implicated.Add(newItem_implicated);
							break;
						case "evidence":
							var newItem_evidence = new Hl7.Fhir.Model.DetectedIssue.EvidenceComponent();
							Parse(newItem_evidence, reader); // 170
							result.Evidence.Add(newItem_evidence);
							break;
						case "detail":
							result.DetailElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DetailElement as Hl7.Fhir.Model.FhirString, reader); // 180
							break;
						case "reference":
							result.ReferenceElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ReferenceElement as Hl7.Fhir.Model.FhirUri, reader); // 190
							break;
						case "mitigation":
							var newItem_mitigation = new Hl7.Fhir.Model.DetectedIssue.MitigationComponent();
							Parse(newItem_mitigation, reader); // 200
							result.Mitigation.Add(newItem_mitigation);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Device result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "definition":
							result.Definition = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Definition as Hl7.Fhir.Model.ResourceReference, reader); // 100
							break;
						case "udiCarrier":
							var newItem_udiCarrier = new Hl7.Fhir.Model.Device.UdiCarrierComponent();
							Parse(newItem_udiCarrier, reader); // 110
							result.UdiCarrier.Add(newItem_udiCarrier);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Device.FHIRDeviceStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Device.FHIRDeviceStatus>, reader); // 120
							break;
						case "statusReason":
							var newItem_statusReason = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_statusReason, reader); // 130
							result.StatusReason.Add(newItem_statusReason);
							break;
						case "distinctIdentifier":
							result.DistinctIdentifierElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DistinctIdentifierElement as Hl7.Fhir.Model.FhirString, reader); // 140
							break;
						case "manufacturer":
							result.ManufacturerElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ManufacturerElement as Hl7.Fhir.Model.FhirString, reader); // 150
							break;
						case "manufactureDate":
							result.ManufactureDateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.ManufactureDateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 160
							break;
						case "expirationDate":
							result.ExpirationDateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.ExpirationDateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 170
							break;
						case "lotNumber":
							result.LotNumberElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.LotNumberElement as Hl7.Fhir.Model.FhirString, reader); // 180
							break;
						case "serialNumber":
							result.SerialNumberElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.SerialNumberElement as Hl7.Fhir.Model.FhirString, reader); // 190
							break;
						case "deviceName":
							var newItem_deviceName = new Hl7.Fhir.Model.Device.DeviceNameComponent();
							Parse(newItem_deviceName, reader); // 200
							result.DeviceName.Add(newItem_deviceName);
							break;
						case "modelNumber":
							result.ModelNumberElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ModelNumberElement as Hl7.Fhir.Model.FhirString, reader); // 210
							break;
						case "partNumber":
							result.PartNumberElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PartNumberElement as Hl7.Fhir.Model.FhirString, reader); // 220
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 230
							break;
						case "specialization":
							var newItem_specialization = new Hl7.Fhir.Model.Device.SpecializationComponent();
							Parse(newItem_specialization, reader); // 240
							result.Specialization.Add(newItem_specialization);
							break;
						case "version":
							var newItem_version = new Hl7.Fhir.Model.Device.VersionComponent();
							Parse(newItem_version, reader); // 250
							result.Version.Add(newItem_version);
							break;
						case "property":
							var newItem_property = new Hl7.Fhir.Model.Device.PropertyComponent();
							Parse(newItem_property, reader); // 260
							result.Property.Add(newItem_property);
							break;
						case "patient":
							result.Patient = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Patient as Hl7.Fhir.Model.ResourceReference, reader); // 270
							break;
						case "owner":
							result.Owner = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Owner as Hl7.Fhir.Model.ResourceReference, reader); // 280
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.ContactPoint();
							Parse(newItem_contact, reader); // 290
							result.Contact.Add(newItem_contact);
							break;
						case "location":
							result.Location = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Location as Hl7.Fhir.Model.ResourceReference, reader); // 300
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUri, reader); // 310
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 320
							result.Note.Add(newItem_note);
							break;
						case "safety":
							var newItem_safety = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_safety, reader); // 330
							result.Safety.Add(newItem_safety);
							break;
						case "parent":
							result.Parent = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Parent as Hl7.Fhir.Model.ResourceReference, reader); // 340
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(DeviceDefinition result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "udiDeviceIdentifier":
							var newItem_udiDeviceIdentifier = new Hl7.Fhir.Model.DeviceDefinition.UdiDeviceIdentifierComponent();
							Parse(newItem_udiDeviceIdentifier, reader); // 100
							result.UdiDeviceIdentifier.Add(newItem_udiDeviceIdentifier);
							break;
						case "manufacturerString":
							result.Manufacturer = new Hl7.Fhir.Model.FhirString();
							Parse(result.Manufacturer as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "manufacturerReference":
							result.Manufacturer = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Manufacturer as Hl7.Fhir.Model.ResourceReference, reader); // 110
							break;
						case "deviceName":
							var newItem_deviceName = new Hl7.Fhir.Model.DeviceDefinition.DeviceNameComponent();
							Parse(newItem_deviceName, reader); // 120
							result.DeviceName.Add(newItem_deviceName);
							break;
						case "modelNumber":
							result.ModelNumberElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ModelNumberElement as Hl7.Fhir.Model.FhirString, reader); // 130
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 140
							break;
						case "specialization":
							var newItem_specialization = new Hl7.Fhir.Model.DeviceDefinition.SpecializationComponent();
							Parse(newItem_specialization, reader); // 150
							result.Specialization.Add(newItem_specialization);
							break;
						case "version":
							var newItem_version = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_version, reader); // 160
							result.VersionElement.Add(newItem_version);
							break;
						case "safety":
							var newItem_safety = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_safety, reader); // 170
							result.Safety.Add(newItem_safety);
							break;
						case "shelfLifeStorage":
							var newItem_shelfLifeStorage = new Hl7.Fhir.Model.ProductShelfLife();
							Parse(newItem_shelfLifeStorage, reader); // 180
							result.ShelfLifeStorage.Add(newItem_shelfLifeStorage);
							break;
						case "physicalCharacteristics":
							result.PhysicalCharacteristics = new Hl7.Fhir.Model.ProdCharacteristic();
							Parse(result.PhysicalCharacteristics as Hl7.Fhir.Model.ProdCharacteristic, reader); // 190
							break;
						case "languageCode":
							var newItem_languageCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_languageCode, reader); // 200
							result.LanguageCode.Add(newItem_languageCode);
							break;
						case "capability":
							var newItem_capability = new Hl7.Fhir.Model.DeviceDefinition.CapabilityComponent();
							Parse(newItem_capability, reader); // 210
							result.Capability.Add(newItem_capability);
							break;
						case "property":
							var newItem_property = new Hl7.Fhir.Model.DeviceDefinition.PropertyComponent();
							Parse(newItem_property, reader); // 220
							result.Property.Add(newItem_property);
							break;
						case "owner":
							result.Owner = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Owner as Hl7.Fhir.Model.ResourceReference, reader); // 230
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.ContactPoint();
							Parse(newItem_contact, reader); // 240
							result.Contact.Add(newItem_contact);
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUri, reader); // 250
							break;
						case "onlineInformation":
							result.OnlineInformationElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.OnlineInformationElement as Hl7.Fhir.Model.FhirUri, reader); // 260
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 270
							result.Note.Add(newItem_note);
							break;
						case "quantity":
							result.Quantity = new Hl7.Fhir.Model.Quantity();
							Parse(result.Quantity as Hl7.Fhir.Model.Quantity, reader); // 280
							break;
						case "parentDevice":
							result.ParentDevice = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.ParentDevice as Hl7.Fhir.Model.ResourceReference, reader); // 290
							break;
						case "material":
							var newItem_material = new Hl7.Fhir.Model.DeviceDefinition.MaterialComponent();
							Parse(newItem_material, reader); // 300
							result.Material.Add(newItem_material);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(DeviceMetric result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 100
							break;
						case "unit":
							result.Unit = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Unit as Hl7.Fhir.Model.CodeableConcept, reader); // 110
							break;
						case "source":
							result.Source = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Source as Hl7.Fhir.Model.ResourceReference, reader); // 120
							break;
						case "parent":
							result.Parent = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Parent as Hl7.Fhir.Model.ResourceReference, reader); // 130
							break;
						case "operationalStatus":
							result.OperationalStatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DeviceMetric.DeviceMetricOperationalStatus>();
							Parse(result.OperationalStatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DeviceMetric.DeviceMetricOperationalStatus>, reader); // 140
							break;
						case "color":
							result.ColorElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DeviceMetric.DeviceMetricColor>();
							Parse(result.ColorElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DeviceMetric.DeviceMetricColor>, reader); // 150
							break;
						case "category":
							result.CategoryElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DeviceMetric.DeviceMetricCategory>();
							Parse(result.CategoryElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DeviceMetric.DeviceMetricCategory>, reader); // 160
							break;
						case "measurementPeriod":
							result.MeasurementPeriod = new Hl7.Fhir.Model.Timing();
							Parse(result.MeasurementPeriod as Hl7.Fhir.Model.Timing, reader); // 170
							break;
						case "calibration":
							var newItem_calibration = new Hl7.Fhir.Model.DeviceMetric.CalibrationComponent();
							Parse(newItem_calibration, reader); // 180
							result.Calibration.Add(newItem_calibration);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(DeviceRequest result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "instantiatesCanonical":
							var newItem_instantiatesCanonical = new Hl7.Fhir.Model.Canonical();
							Parse(newItem_instantiatesCanonical, reader); // 100
							result.InstantiatesCanonicalElement.Add(newItem_instantiatesCanonical);
							break;
						case "instantiatesUri":
							var newItem_instantiatesUri = new Hl7.Fhir.Model.FhirUri();
							Parse(newItem_instantiatesUri, reader); // 110
							result.InstantiatesUriElement.Add(newItem_instantiatesUri);
							break;
						case "basedOn":
							var newItem_basedOn = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_basedOn, reader); // 120
							result.BasedOn.Add(newItem_basedOn);
							break;
						case "priorRequest":
							var newItem_priorRequest = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_priorRequest, reader); // 130
							result.PriorRequest.Add(newItem_priorRequest);
							break;
						case "groupIdentifier":
							result.GroupIdentifier = new Hl7.Fhir.Model.Identifier();
							Parse(result.GroupIdentifier as Hl7.Fhir.Model.Identifier, reader); // 140
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestStatus>, reader); // 150
							break;
						case "intent":
							result.IntentElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestIntent>();
							Parse(result.IntentElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestIntent>, reader); // 160
							break;
						case "priority":
							result.PriorityElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestPriority>();
							Parse(result.PriorityElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestPriority>, reader); // 170
							break;
						case "codeReference":
							result.Code = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Code as Hl7.Fhir.Model.ResourceReference, reader); // 180
							break;
						case "codeCodeableConcept":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 180
							break;
						case "parameter":
							var newItem_parameter = new Hl7.Fhir.Model.DeviceRequest.ParameterComponent();
							Parse(newItem_parameter, reader); // 190
							result.Parameter.Add(newItem_parameter);
							break;
						case "subject":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 200
							break;
						case "encounter":
							result.Encounter = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Encounter as Hl7.Fhir.Model.ResourceReference, reader); // 210
							break;
						case "occurrenceDateTime":
							result.Occurrence = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Occurrence as Hl7.Fhir.Model.FhirDateTime, reader); // 220
							break;
						case "occurrencePeriod":
							result.Occurrence = new Hl7.Fhir.Model.Period();
							Parse(result.Occurrence as Hl7.Fhir.Model.Period, reader); // 220
							break;
						case "occurrenceTiming":
							result.Occurrence = new Hl7.Fhir.Model.Timing();
							Parse(result.Occurrence as Hl7.Fhir.Model.Timing, reader); // 220
							break;
						case "authoredOn":
							result.AuthoredOnElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.AuthoredOnElement as Hl7.Fhir.Model.FhirDateTime, reader); // 230
							break;
						case "requester":
							result.Requester = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Requester as Hl7.Fhir.Model.ResourceReference, reader); // 240
							break;
						case "performerType":
							result.PerformerType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.PerformerType as Hl7.Fhir.Model.CodeableConcept, reader); // 250
							break;
						case "performer":
							result.Performer = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Performer as Hl7.Fhir.Model.ResourceReference, reader); // 260
							break;
						case "reasonCode":
							var newItem_reasonCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_reasonCode, reader); // 270
							result.ReasonCode.Add(newItem_reasonCode);
							break;
						case "reasonReference":
							var newItem_reasonReference = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_reasonReference, reader); // 280
							result.ReasonReference.Add(newItem_reasonReference);
							break;
						case "insurance":
							var newItem_insurance = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_insurance, reader); // 290
							result.Insurance.Add(newItem_insurance);
							break;
						case "supportingInfo":
							var newItem_supportingInfo = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_supportingInfo, reader); // 300
							result.SupportingInfo.Add(newItem_supportingInfo);
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 310
							result.Note.Add(newItem_note);
							break;
						case "relevantHistory":
							var newItem_relevantHistory = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_relevantHistory, reader); // 320
							result.RelevantHistory.Add(newItem_relevantHistory);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(DeviceUseStatement result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "basedOn":
							var newItem_basedOn = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_basedOn, reader); // 100
							result.BasedOn.Add(newItem_basedOn);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DeviceUseStatement.DeviceUseStatementStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DeviceUseStatement.DeviceUseStatementStatus>, reader); // 110
							break;
						case "subject":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 120
							break;
						case "derivedFrom":
							var newItem_derivedFrom = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_derivedFrom, reader); // 130
							result.DerivedFrom.Add(newItem_derivedFrom);
							break;
						case "timingTiming":
							result.Timing = new Hl7.Fhir.Model.Timing();
							Parse(result.Timing as Hl7.Fhir.Model.Timing, reader); // 140
							break;
						case "timingPeriod":
							result.Timing = new Hl7.Fhir.Model.Period();
							Parse(result.Timing as Hl7.Fhir.Model.Period, reader); // 140
							break;
						case "timingDateTime":
							result.Timing = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Timing as Hl7.Fhir.Model.FhirDateTime, reader); // 140
							break;
						case "recordedOn":
							result.RecordedOnElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.RecordedOnElement as Hl7.Fhir.Model.FhirDateTime, reader); // 150
							break;
						case "source":
							result.Source = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Source as Hl7.Fhir.Model.ResourceReference, reader); // 160
							break;
						case "device":
							result.Device = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Device as Hl7.Fhir.Model.ResourceReference, reader); // 170
							break;
						case "reasonCode":
							var newItem_reasonCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_reasonCode, reader); // 180
							result.ReasonCode.Add(newItem_reasonCode);
							break;
						case "reasonReference":
							var newItem_reasonReference = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_reasonReference, reader); // 190
							result.ReasonReference.Add(newItem_reasonReference);
							break;
						case "bodySite":
							result.BodySite = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.BodySite as Hl7.Fhir.Model.CodeableConcept, reader); // 200
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 210
							result.Note.Add(newItem_note);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(DiagnosticReport result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "basedOn":
							var newItem_basedOn = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_basedOn, reader); // 100
							result.BasedOn.Add(newItem_basedOn);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DiagnosticReport.DiagnosticReportStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DiagnosticReport.DiagnosticReportStatus>, reader); // 110
							break;
						case "category":
							var newItem_category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_category, reader); // 120
							result.Category.Add(newItem_category);
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 130
							break;
						case "subject":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 140
							break;
						case "encounter":
							result.Encounter = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Encounter as Hl7.Fhir.Model.ResourceReference, reader); // 150
							break;
						case "effectiveDateTime":
							result.Effective = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Effective as Hl7.Fhir.Model.FhirDateTime, reader); // 160
							break;
						case "effectivePeriod":
							result.Effective = new Hl7.Fhir.Model.Period();
							Parse(result.Effective as Hl7.Fhir.Model.Period, reader); // 160
							break;
						case "issued":
							result.IssuedElement = new Hl7.Fhir.Model.Instant();
							Parse(result.IssuedElement as Hl7.Fhir.Model.Instant, reader); // 170
							break;
						case "performer":
							var newItem_performer = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_performer, reader); // 180
							result.Performer.Add(newItem_performer);
							break;
						case "resultsInterpreter":
							var newItem_resultsInterpreter = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_resultsInterpreter, reader); // 190
							result.ResultsInterpreter.Add(newItem_resultsInterpreter);
							break;
						case "specimen":
							var newItem_specimen = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_specimen, reader); // 200
							result.Specimen.Add(newItem_specimen);
							break;
						case "result":
							var newItem_result = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_result, reader); // 210
							result.Result.Add(newItem_result);
							break;
						case "imagingStudy":
							var newItem_imagingStudy = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_imagingStudy, reader); // 220
							result.ImagingStudy.Add(newItem_imagingStudy);
							break;
						case "media":
							var newItem_media = new Hl7.Fhir.Model.DiagnosticReport.MediaComponent();
							Parse(newItem_media, reader); // 230
							result.Media.Add(newItem_media);
							break;
						case "conclusion":
							result.ConclusionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ConclusionElement as Hl7.Fhir.Model.FhirString, reader); // 240
							break;
						case "conclusionCode":
							var newItem_conclusionCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_conclusionCode, reader); // 250
							result.ConclusionCode.Add(newItem_conclusionCode);
							break;
						case "presentedForm":
							var newItem_presentedForm = new Hl7.Fhir.Model.Attachment();
							Parse(newItem_presentedForm, reader); // 260
							result.PresentedForm.Add(newItem_presentedForm);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(DocumentManifest result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "masterIdentifier":
							result.MasterIdentifier = new Hl7.Fhir.Model.Identifier();
							Parse(result.MasterIdentifier as Hl7.Fhir.Model.Identifier, reader); // 90
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 100
							result.Identifier.Add(newItem_identifier);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DocumentReferenceStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DocumentReferenceStatus>, reader); // 110
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 120
							break;
						case "subject":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 130
							break;
						case "created":
							result.CreatedElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.CreatedElement as Hl7.Fhir.Model.FhirDateTime, reader); // 140
							break;
						case "author":
							var newItem_author = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_author, reader); // 150
							result.Author.Add(newItem_author);
							break;
						case "recipient":
							var newItem_recipient = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_recipient, reader); // 160
							result.Recipient.Add(newItem_recipient);
							break;
						case "source":
							result.SourceElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.SourceElement as Hl7.Fhir.Model.FhirUri, reader); // 170
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 180
							break;
						case "content":
							var newItem_content = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_content, reader); // 190
							result.Content.Add(newItem_content);
							break;
						case "related":
							var newItem_related = new Hl7.Fhir.Model.DocumentManifest.RelatedComponent();
							Parse(newItem_related, reader); // 200
							result.Related.Add(newItem_related);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(DocumentReference result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "masterIdentifier":
							result.MasterIdentifier = new Hl7.Fhir.Model.Identifier();
							Parse(result.MasterIdentifier as Hl7.Fhir.Model.Identifier, reader); // 90
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 100
							result.Identifier.Add(newItem_identifier);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DocumentReferenceStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DocumentReferenceStatus>, reader); // 110
							break;
						case "docStatus":
							result.DocStatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CompositionStatus>();
							Parse(result.DocStatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CompositionStatus>, reader); // 120
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 130
							break;
						case "category":
							var newItem_category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_category, reader); // 140
							result.Category.Add(newItem_category);
							break;
						case "subject":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 150
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.Instant();
							Parse(result.DateElement as Hl7.Fhir.Model.Instant, reader); // 160
							break;
						case "author":
							var newItem_author = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_author, reader); // 170
							result.Author.Add(newItem_author);
							break;
						case "authenticator":
							result.Authenticator = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Authenticator as Hl7.Fhir.Model.ResourceReference, reader); // 180
							break;
						case "custodian":
							result.Custodian = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Custodian as Hl7.Fhir.Model.ResourceReference, reader); // 190
							break;
						case "relatesTo":
							var newItem_relatesTo = new Hl7.Fhir.Model.DocumentReference.RelatesToComponent();
							Parse(newItem_relatesTo, reader); // 200
							result.RelatesTo.Add(newItem_relatesTo);
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 210
							break;
						case "securityLabel":
							var newItem_securityLabel = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_securityLabel, reader); // 220
							result.SecurityLabel.Add(newItem_securityLabel);
							break;
						case "content":
							var newItem_content = new Hl7.Fhir.Model.DocumentReference.ContentComponent();
							Parse(newItem_content, reader); // 230
							result.Content.Add(newItem_content);
							break;
						case "context":
							result.Context = new Hl7.Fhir.Model.DocumentReference.ContextComponent();
							Parse(result.Context as Hl7.Fhir.Model.DocumentReference.ContextComponent, reader); // 240
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(EffectEvidenceSynthesis result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUri, reader); // 90
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 100
							result.Identifier.Add(newItem_identifier);
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 130
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>, reader); // 140
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 150
							break;
						case "publisher":
							result.PublisherElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PublisherElement as Hl7.Fhir.Model.FhirString, reader); // 160
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_contact, reader); // 170
							result.Contact.Add(newItem_contact);
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.Markdown();
							Parse(result.Description as Hl7.Fhir.Model.Markdown, reader); // 180
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 190
							result.Note.Add(newItem_note);
							break;
						case "useContext":
							var newItem_useContext = new Hl7.Fhir.Model.UsageContext();
							Parse(newItem_useContext, reader); // 200
							result.UseContext.Add(newItem_useContext);
							break;
						case "jurisdiction":
							var newItem_jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_jurisdiction, reader); // 210
							result.Jurisdiction.Add(newItem_jurisdiction);
							break;
						case "copyright":
							result.Copyright = new Hl7.Fhir.Model.Markdown();
							Parse(result.Copyright as Hl7.Fhir.Model.Markdown, reader); // 220
							break;
						case "approvalDate":
							result.ApprovalDateElement = new Hl7.Fhir.Model.Date();
							Parse(result.ApprovalDateElement as Hl7.Fhir.Model.Date, reader); // 230
							break;
						case "lastReviewDate":
							result.LastReviewDateElement = new Hl7.Fhir.Model.Date();
							Parse(result.LastReviewDateElement as Hl7.Fhir.Model.Date, reader); // 240
							break;
						case "effectivePeriod":
							result.EffectivePeriod = new Hl7.Fhir.Model.Period();
							Parse(result.EffectivePeriod as Hl7.Fhir.Model.Period, reader); // 250
							break;
						case "topic":
							var newItem_topic = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_topic, reader); // 260
							result.Topic.Add(newItem_topic);
							break;
						case "author":
							var newItem_author = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_author, reader); // 270
							result.Author.Add(newItem_author);
							break;
						case "editor":
							var newItem_editor = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_editor, reader); // 280
							result.Editor.Add(newItem_editor);
							break;
						case "reviewer":
							var newItem_reviewer = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_reviewer, reader); // 290
							result.Reviewer.Add(newItem_reviewer);
							break;
						case "endorser":
							var newItem_endorser = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_endorser, reader); // 300
							result.Endorser.Add(newItem_endorser);
							break;
						case "relatedArtifact":
							var newItem_relatedArtifact = new Hl7.Fhir.Model.RelatedArtifact();
							Parse(newItem_relatedArtifact, reader); // 310
							result.RelatedArtifact.Add(newItem_relatedArtifact);
							break;
						case "synthesisType":
							result.SynthesisType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.SynthesisType as Hl7.Fhir.Model.CodeableConcept, reader); // 320
							break;
						case "studyType":
							result.StudyType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.StudyType as Hl7.Fhir.Model.CodeableConcept, reader); // 330
							break;
						case "population":
							result.Population = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Population as Hl7.Fhir.Model.ResourceReference, reader); // 340
							break;
						case "exposure":
							result.Exposure = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Exposure as Hl7.Fhir.Model.ResourceReference, reader); // 350
							break;
						case "exposureAlternative":
							result.ExposureAlternative = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.ExposureAlternative as Hl7.Fhir.Model.ResourceReference, reader); // 360
							break;
						case "outcome":
							result.Outcome = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Outcome as Hl7.Fhir.Model.ResourceReference, reader); // 370
							break;
						case "sampleSize":
							result.SampleSize = new Hl7.Fhir.Model.EffectEvidenceSynthesis.SampleSizeComponent();
							Parse(result.SampleSize as Hl7.Fhir.Model.EffectEvidenceSynthesis.SampleSizeComponent, reader); // 380
							break;
						case "resultsByExposure":
							var newItem_resultsByExposure = new Hl7.Fhir.Model.EffectEvidenceSynthesis.ResultsByExposureComponent();
							Parse(newItem_resultsByExposure, reader); // 390
							result.ResultsByExposure.Add(newItem_resultsByExposure);
							break;
						case "effectEstimate":
							var newItem_effectEstimate = new Hl7.Fhir.Model.EffectEvidenceSynthesis.EffectEstimateComponent();
							Parse(newItem_effectEstimate, reader); // 400
							result.EffectEstimate.Add(newItem_effectEstimate);
							break;
						case "certainty":
							var newItem_certainty = new Hl7.Fhir.Model.EffectEvidenceSynthesis.CertaintyComponent();
							Parse(newItem_certainty, reader); // 410
							result.Certainty.Add(newItem_certainty);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Encounter result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Encounter.EncounterStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Encounter.EncounterStatus>, reader); // 100
							break;
						case "statusHistory":
							var newItem_statusHistory = new Hl7.Fhir.Model.Encounter.StatusHistoryComponent();
							Parse(newItem_statusHistory, reader); // 110
							result.StatusHistory.Add(newItem_statusHistory);
							break;
						case "class":
							result.Class = new Hl7.Fhir.Model.Coding();
							Parse(result.Class as Hl7.Fhir.Model.Coding, reader); // 120
							break;
						case "classHistory":
							var newItem_classHistory = new Hl7.Fhir.Model.Encounter.ClassHistoryComponent();
							Parse(newItem_classHistory, reader); // 130
							result.ClassHistory.Add(newItem_classHistory);
							break;
						case "type":
							var newItem_type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_type, reader); // 140
							result.Type.Add(newItem_type);
							break;
						case "serviceType":
							result.ServiceType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.ServiceType as Hl7.Fhir.Model.CodeableConcept, reader); // 150
							break;
						case "priority":
							result.Priority = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Priority as Hl7.Fhir.Model.CodeableConcept, reader); // 160
							break;
						case "subject":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 170
							break;
						case "episodeOfCare":
							var newItem_episodeOfCare = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_episodeOfCare, reader); // 180
							result.EpisodeOfCare.Add(newItem_episodeOfCare);
							break;
						case "basedOn":
							var newItem_basedOn = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_basedOn, reader); // 190
							result.BasedOn.Add(newItem_basedOn);
							break;
						case "participant":
							var newItem_participant = new Hl7.Fhir.Model.Encounter.ParticipantComponent();
							Parse(newItem_participant, reader); // 200
							result.Participant.Add(newItem_participant);
							break;
						case "appointment":
							var newItem_appointment = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_appointment, reader); // 210
							result.Appointment.Add(newItem_appointment);
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 220
							break;
						case "length":
							result.Length = new Hl7.Fhir.Model.Duration();
							Parse(result.Length as Hl7.Fhir.Model.Duration, reader); // 230
							break;
						case "reasonCode":
							var newItem_reasonCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_reasonCode, reader); // 240
							result.ReasonCode.Add(newItem_reasonCode);
							break;
						case "reasonReference":
							var newItem_reasonReference = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_reasonReference, reader); // 250
							result.ReasonReference.Add(newItem_reasonReference);
							break;
						case "diagnosis":
							var newItem_diagnosis = new Hl7.Fhir.Model.Encounter.DiagnosisComponent();
							Parse(newItem_diagnosis, reader); // 260
							result.Diagnosis.Add(newItem_diagnosis);
							break;
						case "account":
							var newItem_account = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_account, reader); // 270
							result.Account.Add(newItem_account);
							break;
						case "hospitalization":
							result.Hospitalization = new Hl7.Fhir.Model.Encounter.HospitalizationComponent();
							Parse(result.Hospitalization as Hl7.Fhir.Model.Encounter.HospitalizationComponent, reader); // 280
							break;
						case "location":
							var newItem_location = new Hl7.Fhir.Model.Encounter.LocationComponent();
							Parse(newItem_location, reader); // 290
							result.Location.Add(newItem_location);
							break;
						case "serviceProvider":
							result.ServiceProvider = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.ServiceProvider as Hl7.Fhir.Model.ResourceReference, reader); // 300
							break;
						case "partOf":
							result.PartOf = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.PartOf as Hl7.Fhir.Model.ResourceReference, reader); // 310
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Endpoint result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Endpoint.EndpointStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Endpoint.EndpointStatus>, reader); // 100
							break;
						case "connectionType":
							result.ConnectionType = new Hl7.Fhir.Model.Coding();
							Parse(result.ConnectionType as Hl7.Fhir.Model.Coding, reader); // 110
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "managingOrganization":
							result.ManagingOrganization = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.ManagingOrganization as Hl7.Fhir.Model.ResourceReference, reader); // 130
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.ContactPoint();
							Parse(newItem_contact, reader); // 140
							result.Contact.Add(newItem_contact);
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 150
							break;
						case "payloadType":
							var newItem_payloadType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_payloadType, reader); // 160
							result.PayloadType.Add(newItem_payloadType);
							break;
						case "payloadMimeType":
							var newItem_payloadMimeType = new Hl7.Fhir.Model.Code();
							Parse(newItem_payloadMimeType, reader); // 170
							result.PayloadMimeTypeElement.Add(newItem_payloadMimeType);
							break;
						case "address":
							result.AddressElement = new Hl7.Fhir.Model.FhirUrl();
							Parse(result.AddressElement as Hl7.Fhir.Model.FhirUrl, reader); // 180
							break;
						case "header":
							var newItem_header = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_header, reader); // 190
							result.HeaderElement.Add(newItem_header);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(EnrollmentRequest result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>, reader); // 100
							break;
						case "created":
							result.CreatedElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.CreatedElement as Hl7.Fhir.Model.FhirDateTime, reader); // 110
							break;
						case "insurer":
							result.Insurer = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Insurer as Hl7.Fhir.Model.ResourceReference, reader); // 120
							break;
						case "provider":
							result.Provider = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Provider as Hl7.Fhir.Model.ResourceReference, reader); // 130
							break;
						case "candidate":
							result.Candidate = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Candidate as Hl7.Fhir.Model.ResourceReference, reader); // 140
							break;
						case "coverage":
							result.Coverage = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Coverage as Hl7.Fhir.Model.ResourceReference, reader); // 150
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(EnrollmentResponse result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>, reader); // 100
							break;
						case "request":
							result.Request = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Request as Hl7.Fhir.Model.ResourceReference, reader); // 110
							break;
						case "outcome":
							result.OutcomeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ClaimProcessingCodes>();
							Parse(result.OutcomeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ClaimProcessingCodes>, reader); // 120
							break;
						case "disposition":
							result.DispositionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DispositionElement as Hl7.Fhir.Model.FhirString, reader); // 130
							break;
						case "created":
							result.CreatedElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.CreatedElement as Hl7.Fhir.Model.FhirDateTime, reader); // 140
							break;
						case "organization":
							result.Organization = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Organization as Hl7.Fhir.Model.ResourceReference, reader); // 150
							break;
						case "requestProvider":
							result.RequestProvider = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.RequestProvider as Hl7.Fhir.Model.ResourceReference, reader); // 160
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(EpisodeOfCare result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.EpisodeOfCare.EpisodeOfCareStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.EpisodeOfCare.EpisodeOfCareStatus>, reader); // 100
							break;
						case "statusHistory":
							var newItem_statusHistory = new Hl7.Fhir.Model.EpisodeOfCare.StatusHistoryComponent();
							Parse(newItem_statusHistory, reader); // 110
							result.StatusHistory.Add(newItem_statusHistory);
							break;
						case "type":
							var newItem_type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_type, reader); // 120
							result.Type.Add(newItem_type);
							break;
						case "diagnosis":
							var newItem_diagnosis = new Hl7.Fhir.Model.EpisodeOfCare.DiagnosisComponent();
							Parse(newItem_diagnosis, reader); // 130
							result.Diagnosis.Add(newItem_diagnosis);
							break;
						case "patient":
							result.Patient = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Patient as Hl7.Fhir.Model.ResourceReference, reader); // 140
							break;
						case "managingOrganization":
							result.ManagingOrganization = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.ManagingOrganization as Hl7.Fhir.Model.ResourceReference, reader); // 150
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 160
							break;
						case "referralRequest":
							var newItem_referralRequest = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_referralRequest, reader); // 170
							result.ReferralRequest.Add(newItem_referralRequest);
							break;
						case "careManager":
							result.CareManager = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.CareManager as Hl7.Fhir.Model.ResourceReference, reader); // 180
							break;
						case "team":
							var newItem_team = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_team, reader); // 190
							result.Team.Add(newItem_team);
							break;
						case "account":
							var newItem_account = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_account, reader); // 200
							result.Account.Add(newItem_account);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(EventDefinition result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUri, reader); // 90
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 100
							result.Identifier.Add(newItem_identifier);
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 130
							break;
						case "subtitle":
							result.SubtitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.SubtitleElement as Hl7.Fhir.Model.FhirString, reader); // 140
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>, reader); // 150
							break;
						case "experimental":
							result.ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ExperimentalElement as Hl7.Fhir.Model.FhirBoolean, reader); // 160
							break;
						case "subjectCodeableConcept":
							result.Subject = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Subject as Hl7.Fhir.Model.CodeableConcept, reader); // 170
							break;
						case "subjectReference":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 170
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 180
							break;
						case "publisher":
							result.PublisherElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PublisherElement as Hl7.Fhir.Model.FhirString, reader); // 190
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_contact, reader); // 200
							result.Contact.Add(newItem_contact);
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.Markdown();
							Parse(result.Description as Hl7.Fhir.Model.Markdown, reader); // 210
							break;
						case "useContext":
							var newItem_useContext = new Hl7.Fhir.Model.UsageContext();
							Parse(newItem_useContext, reader); // 220
							result.UseContext.Add(newItem_useContext);
							break;
						case "jurisdiction":
							var newItem_jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_jurisdiction, reader); // 230
							result.Jurisdiction.Add(newItem_jurisdiction);
							break;
						case "purpose":
							result.Purpose = new Hl7.Fhir.Model.Markdown();
							Parse(result.Purpose as Hl7.Fhir.Model.Markdown, reader); // 240
							break;
						case "usage":
							result.UsageElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.UsageElement as Hl7.Fhir.Model.FhirString, reader); // 250
							break;
						case "copyright":
							result.Copyright = new Hl7.Fhir.Model.Markdown();
							Parse(result.Copyright as Hl7.Fhir.Model.Markdown, reader); // 260
							break;
						case "approvalDate":
							result.ApprovalDateElement = new Hl7.Fhir.Model.Date();
							Parse(result.ApprovalDateElement as Hl7.Fhir.Model.Date, reader); // 270
							break;
						case "lastReviewDate":
							result.LastReviewDateElement = new Hl7.Fhir.Model.Date();
							Parse(result.LastReviewDateElement as Hl7.Fhir.Model.Date, reader); // 280
							break;
						case "effectivePeriod":
							result.EffectivePeriod = new Hl7.Fhir.Model.Period();
							Parse(result.EffectivePeriod as Hl7.Fhir.Model.Period, reader); // 290
							break;
						case "topic":
							var newItem_topic = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_topic, reader); // 300
							result.Topic.Add(newItem_topic);
							break;
						case "author":
							var newItem_author = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_author, reader); // 310
							result.Author.Add(newItem_author);
							break;
						case "editor":
							var newItem_editor = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_editor, reader); // 320
							result.Editor.Add(newItem_editor);
							break;
						case "reviewer":
							var newItem_reviewer = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_reviewer, reader); // 330
							result.Reviewer.Add(newItem_reviewer);
							break;
						case "endorser":
							var newItem_endorser = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_endorser, reader); // 340
							result.Endorser.Add(newItem_endorser);
							break;
						case "relatedArtifact":
							var newItem_relatedArtifact = new Hl7.Fhir.Model.RelatedArtifact();
							Parse(newItem_relatedArtifact, reader); // 350
							result.RelatedArtifact.Add(newItem_relatedArtifact);
							break;
						case "trigger":
							var newItem_trigger = new Hl7.Fhir.Model.TriggerDefinition();
							Parse(newItem_trigger, reader); // 360
							result.Trigger.Add(newItem_trigger);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Evidence result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUri, reader); // 90
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 100
							result.Identifier.Add(newItem_identifier);
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 130
							break;
						case "shortTitle":
							result.ShortTitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ShortTitleElement as Hl7.Fhir.Model.FhirString, reader); // 140
							break;
						case "subtitle":
							result.SubtitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.SubtitleElement as Hl7.Fhir.Model.FhirString, reader); // 150
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>, reader); // 160
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 170
							break;
						case "publisher":
							result.PublisherElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PublisherElement as Hl7.Fhir.Model.FhirString, reader); // 180
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_contact, reader); // 190
							result.Contact.Add(newItem_contact);
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.Markdown();
							Parse(result.Description as Hl7.Fhir.Model.Markdown, reader); // 200
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 210
							result.Note.Add(newItem_note);
							break;
						case "useContext":
							var newItem_useContext = new Hl7.Fhir.Model.UsageContext();
							Parse(newItem_useContext, reader); // 220
							result.UseContext.Add(newItem_useContext);
							break;
						case "jurisdiction":
							var newItem_jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_jurisdiction, reader); // 230
							result.Jurisdiction.Add(newItem_jurisdiction);
							break;
						case "copyright":
							result.Copyright = new Hl7.Fhir.Model.Markdown();
							Parse(result.Copyright as Hl7.Fhir.Model.Markdown, reader); // 240
							break;
						case "approvalDate":
							result.ApprovalDateElement = new Hl7.Fhir.Model.Date();
							Parse(result.ApprovalDateElement as Hl7.Fhir.Model.Date, reader); // 250
							break;
						case "lastReviewDate":
							result.LastReviewDateElement = new Hl7.Fhir.Model.Date();
							Parse(result.LastReviewDateElement as Hl7.Fhir.Model.Date, reader); // 260
							break;
						case "effectivePeriod":
							result.EffectivePeriod = new Hl7.Fhir.Model.Period();
							Parse(result.EffectivePeriod as Hl7.Fhir.Model.Period, reader); // 270
							break;
						case "topic":
							var newItem_topic = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_topic, reader); // 280
							result.Topic.Add(newItem_topic);
							break;
						case "author":
							var newItem_author = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_author, reader); // 290
							result.Author.Add(newItem_author);
							break;
						case "editor":
							var newItem_editor = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_editor, reader); // 300
							result.Editor.Add(newItem_editor);
							break;
						case "reviewer":
							var newItem_reviewer = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_reviewer, reader); // 310
							result.Reviewer.Add(newItem_reviewer);
							break;
						case "endorser":
							var newItem_endorser = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_endorser, reader); // 320
							result.Endorser.Add(newItem_endorser);
							break;
						case "relatedArtifact":
							var newItem_relatedArtifact = new Hl7.Fhir.Model.RelatedArtifact();
							Parse(newItem_relatedArtifact, reader); // 330
							result.RelatedArtifact.Add(newItem_relatedArtifact);
							break;
						case "exposureBackground":
							result.ExposureBackground = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.ExposureBackground as Hl7.Fhir.Model.ResourceReference, reader); // 340
							break;
						case "exposureVariant":
							var newItem_exposureVariant = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_exposureVariant, reader); // 350
							result.ExposureVariant.Add(newItem_exposureVariant);
							break;
						case "outcome":
							var newItem_outcome = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_outcome, reader); // 360
							result.Outcome.Add(newItem_outcome);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(EvidenceVariable result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUri, reader); // 90
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 100
							result.Identifier.Add(newItem_identifier);
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 130
							break;
						case "shortTitle":
							result.ShortTitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ShortTitleElement as Hl7.Fhir.Model.FhirString, reader); // 140
							break;
						case "subtitle":
							result.SubtitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.SubtitleElement as Hl7.Fhir.Model.FhirString, reader); // 150
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>, reader); // 160
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 170
							break;
						case "publisher":
							result.PublisherElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PublisherElement as Hl7.Fhir.Model.FhirString, reader); // 180
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_contact, reader); // 190
							result.Contact.Add(newItem_contact);
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.Markdown();
							Parse(result.Description as Hl7.Fhir.Model.Markdown, reader); // 200
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 210
							result.Note.Add(newItem_note);
							break;
						case "useContext":
							var newItem_useContext = new Hl7.Fhir.Model.UsageContext();
							Parse(newItem_useContext, reader); // 220
							result.UseContext.Add(newItem_useContext);
							break;
						case "jurisdiction":
							var newItem_jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_jurisdiction, reader); // 230
							result.Jurisdiction.Add(newItem_jurisdiction);
							break;
						case "copyright":
							result.Copyright = new Hl7.Fhir.Model.Markdown();
							Parse(result.Copyright as Hl7.Fhir.Model.Markdown, reader); // 240
							break;
						case "approvalDate":
							result.ApprovalDateElement = new Hl7.Fhir.Model.Date();
							Parse(result.ApprovalDateElement as Hl7.Fhir.Model.Date, reader); // 250
							break;
						case "lastReviewDate":
							result.LastReviewDateElement = new Hl7.Fhir.Model.Date();
							Parse(result.LastReviewDateElement as Hl7.Fhir.Model.Date, reader); // 260
							break;
						case "effectivePeriod":
							result.EffectivePeriod = new Hl7.Fhir.Model.Period();
							Parse(result.EffectivePeriod as Hl7.Fhir.Model.Period, reader); // 270
							break;
						case "topic":
							var newItem_topic = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_topic, reader); // 280
							result.Topic.Add(newItem_topic);
							break;
						case "author":
							var newItem_author = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_author, reader); // 290
							result.Author.Add(newItem_author);
							break;
						case "editor":
							var newItem_editor = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_editor, reader); // 300
							result.Editor.Add(newItem_editor);
							break;
						case "reviewer":
							var newItem_reviewer = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_reviewer, reader); // 310
							result.Reviewer.Add(newItem_reviewer);
							break;
						case "endorser":
							var newItem_endorser = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_endorser, reader); // 320
							result.Endorser.Add(newItem_endorser);
							break;
						case "relatedArtifact":
							var newItem_relatedArtifact = new Hl7.Fhir.Model.RelatedArtifact();
							Parse(newItem_relatedArtifact, reader); // 330
							result.RelatedArtifact.Add(newItem_relatedArtifact);
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.EvidenceVariableType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.EvidenceVariableType>, reader); // 340
							break;
						case "characteristic":
							var newItem_characteristic = new Hl7.Fhir.Model.EvidenceVariable.CharacteristicComponent();
							Parse(newItem_characteristic, reader); // 350
							result.Characteristic.Add(newItem_characteristic);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(ExampleScenario result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUri, reader); // 90
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 100
							result.Identifier.Add(newItem_identifier);
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>, reader); // 130
							break;
						case "experimental":
							result.ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ExperimentalElement as Hl7.Fhir.Model.FhirBoolean, reader); // 140
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 150
							break;
						case "publisher":
							result.PublisherElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PublisherElement as Hl7.Fhir.Model.FhirString, reader); // 160
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_contact, reader); // 170
							result.Contact.Add(newItem_contact);
							break;
						case "useContext":
							var newItem_useContext = new Hl7.Fhir.Model.UsageContext();
							Parse(newItem_useContext, reader); // 180
							result.UseContext.Add(newItem_useContext);
							break;
						case "jurisdiction":
							var newItem_jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_jurisdiction, reader); // 190
							result.Jurisdiction.Add(newItem_jurisdiction);
							break;
						case "copyright":
							result.Copyright = new Hl7.Fhir.Model.Markdown();
							Parse(result.Copyright as Hl7.Fhir.Model.Markdown, reader); // 200
							break;
						case "purpose":
							result.Purpose = new Hl7.Fhir.Model.Markdown();
							Parse(result.Purpose as Hl7.Fhir.Model.Markdown, reader); // 210
							break;
						case "actor":
							var newItem_actor = new Hl7.Fhir.Model.ExampleScenario.ActorComponent();
							Parse(newItem_actor, reader); // 220
							result.Actor.Add(newItem_actor);
							break;
						case "instance":
							var newItem_instance = new Hl7.Fhir.Model.ExampleScenario.InstanceComponent();
							Parse(newItem_instance, reader); // 230
							result.Instance.Add(newItem_instance);
							break;
						case "process":
							var newItem_process = new Hl7.Fhir.Model.ExampleScenario.ProcessComponent();
							Parse(newItem_process, reader); // 240
							result.Process.Add(newItem_process);
							break;
						case "workflow":
							var newItem_workflow = new Hl7.Fhir.Model.Canonical();
							Parse(newItem_workflow, reader); // 250
							result.WorkflowElement.Add(newItem_workflow);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(ExplanationOfBenefit result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ExplanationOfBenefit.ExplanationOfBenefitStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ExplanationOfBenefit.ExplanationOfBenefitStatus>, reader); // 100
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 110
							break;
						case "subType":
							result.SubType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.SubType as Hl7.Fhir.Model.CodeableConcept, reader); // 120
							break;
						case "use":
							result.UseElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Use>();
							Parse(result.UseElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Use>, reader); // 130
							break;
						case "patient":
							result.Patient = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Patient as Hl7.Fhir.Model.ResourceReference, reader); // 140
							break;
						case "billablePeriod":
							result.BillablePeriod = new Hl7.Fhir.Model.Period();
							Parse(result.BillablePeriod as Hl7.Fhir.Model.Period, reader); // 150
							break;
						case "created":
							result.CreatedElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.CreatedElement as Hl7.Fhir.Model.FhirDateTime, reader); // 160
							break;
						case "enterer":
							result.Enterer = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Enterer as Hl7.Fhir.Model.ResourceReference, reader); // 170
							break;
						case "insurer":
							result.Insurer = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Insurer as Hl7.Fhir.Model.ResourceReference, reader); // 180
							break;
						case "provider":
							result.Provider = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Provider as Hl7.Fhir.Model.ResourceReference, reader); // 190
							break;
						case "priority":
							result.Priority = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Priority as Hl7.Fhir.Model.CodeableConcept, reader); // 200
							break;
						case "fundsReserveRequested":
							result.FundsReserveRequested = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.FundsReserveRequested as Hl7.Fhir.Model.CodeableConcept, reader); // 210
							break;
						case "fundsReserve":
							result.FundsReserve = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.FundsReserve as Hl7.Fhir.Model.CodeableConcept, reader); // 220
							break;
						case "related":
							var newItem_related = new Hl7.Fhir.Model.ExplanationOfBenefit.RelatedClaimComponent();
							Parse(newItem_related, reader); // 230
							result.Related.Add(newItem_related);
							break;
						case "prescription":
							result.Prescription = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Prescription as Hl7.Fhir.Model.ResourceReference, reader); // 240
							break;
						case "originalPrescription":
							result.OriginalPrescription = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.OriginalPrescription as Hl7.Fhir.Model.ResourceReference, reader); // 250
							break;
						case "payee":
							result.Payee = new Hl7.Fhir.Model.ExplanationOfBenefit.PayeeComponent();
							Parse(result.Payee as Hl7.Fhir.Model.ExplanationOfBenefit.PayeeComponent, reader); // 260
							break;
						case "referral":
							result.Referral = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Referral as Hl7.Fhir.Model.ResourceReference, reader); // 270
							break;
						case "facility":
							result.Facility = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Facility as Hl7.Fhir.Model.ResourceReference, reader); // 280
							break;
						case "claim":
							result.Claim = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Claim as Hl7.Fhir.Model.ResourceReference, reader); // 290
							break;
						case "claimResponse":
							result.ClaimResponse = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.ClaimResponse as Hl7.Fhir.Model.ResourceReference, reader); // 300
							break;
						case "outcome":
							result.OutcomeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ClaimProcessingCodes>();
							Parse(result.OutcomeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ClaimProcessingCodes>, reader); // 310
							break;
						case "disposition":
							result.DispositionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DispositionElement as Hl7.Fhir.Model.FhirString, reader); // 320
							break;
						case "preAuthRef":
							var newItem_preAuthRef = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_preAuthRef, reader); // 330
							result.PreAuthRefElement.Add(newItem_preAuthRef);
							break;
						case "preAuthRefPeriod":
							var newItem_preAuthRefPeriod = new Hl7.Fhir.Model.Period();
							Parse(newItem_preAuthRefPeriod, reader); // 340
							result.PreAuthRefPeriod.Add(newItem_preAuthRefPeriod);
							break;
						case "careTeam":
							var newItem_careTeam = new Hl7.Fhir.Model.ExplanationOfBenefit.CareTeamComponent();
							Parse(newItem_careTeam, reader); // 350
							result.CareTeam.Add(newItem_careTeam);
							break;
						case "supportingInfo":
							var newItem_supportingInfo = new Hl7.Fhir.Model.ExplanationOfBenefit.SupportingInformationComponent();
							Parse(newItem_supportingInfo, reader); // 360
							result.SupportingInfo.Add(newItem_supportingInfo);
							break;
						case "diagnosis":
							var newItem_diagnosis = new Hl7.Fhir.Model.ExplanationOfBenefit.DiagnosisComponent();
							Parse(newItem_diagnosis, reader); // 370
							result.Diagnosis.Add(newItem_diagnosis);
							break;
						case "procedure":
							var newItem_procedure = new Hl7.Fhir.Model.ExplanationOfBenefit.ProcedureComponent();
							Parse(newItem_procedure, reader); // 380
							result.Procedure.Add(newItem_procedure);
							break;
						case "precedence":
							result.PrecedenceElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.PrecedenceElement as Hl7.Fhir.Model.PositiveInt, reader); // 390
							break;
						case "insurance":
							var newItem_insurance = new Hl7.Fhir.Model.ExplanationOfBenefit.InsuranceComponent();
							Parse(newItem_insurance, reader); // 400
							result.Insurance.Add(newItem_insurance);
							break;
						case "accident":
							result.Accident = new Hl7.Fhir.Model.ExplanationOfBenefit.AccidentComponent();
							Parse(result.Accident as Hl7.Fhir.Model.ExplanationOfBenefit.AccidentComponent, reader); // 410
							break;
						case "item":
							var newItem_item = new Hl7.Fhir.Model.ExplanationOfBenefit.ItemComponent();
							Parse(newItem_item, reader); // 420
							result.Item.Add(newItem_item);
							break;
						case "addItem":
							var newItem_addItem = new Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemComponent();
							Parse(newItem_addItem, reader); // 430
							result.AddItem.Add(newItem_addItem);
							break;
						case "adjudication":
							var newItem_adjudication = new Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent();
							Parse(newItem_adjudication, reader); // 440
							result.Adjudication.Add(newItem_adjudication);
							break;
						case "total":
							var newItem_total = new Hl7.Fhir.Model.ExplanationOfBenefit.TotalComponent();
							Parse(newItem_total, reader); // 450
							result.Total.Add(newItem_total);
							break;
						case "payment":
							result.Payment = new Hl7.Fhir.Model.ExplanationOfBenefit.PaymentComponent();
							Parse(result.Payment as Hl7.Fhir.Model.ExplanationOfBenefit.PaymentComponent, reader); // 460
							break;
						case "formCode":
							result.FormCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.FormCode as Hl7.Fhir.Model.CodeableConcept, reader); // 470
							break;
						case "form":
							result.Form = new Hl7.Fhir.Model.Attachment();
							Parse(result.Form as Hl7.Fhir.Model.Attachment, reader); // 480
							break;
						case "processNote":
							var newItem_processNote = new Hl7.Fhir.Model.ExplanationOfBenefit.NoteComponent();
							Parse(newItem_processNote, reader); // 490
							result.ProcessNote.Add(newItem_processNote);
							break;
						case "benefitPeriod":
							result.BenefitPeriod = new Hl7.Fhir.Model.Period();
							Parse(result.BenefitPeriod as Hl7.Fhir.Model.Period, reader); // 500
							break;
						case "benefitBalance":
							var newItem_benefitBalance = new Hl7.Fhir.Model.ExplanationOfBenefit.BenefitBalanceComponent();
							Parse(newItem_benefitBalance, reader); // 510
							result.BenefitBalance.Add(newItem_benefitBalance);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(FamilyMemberHistory result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "instantiatesCanonical":
							var newItem_instantiatesCanonical = new Hl7.Fhir.Model.Canonical();
							Parse(newItem_instantiatesCanonical, reader); // 100
							result.InstantiatesCanonicalElement.Add(newItem_instantiatesCanonical);
							break;
						case "instantiatesUri":
							var newItem_instantiatesUri = new Hl7.Fhir.Model.FhirUri();
							Parse(newItem_instantiatesUri, reader); // 110
							result.InstantiatesUriElement.Add(newItem_instantiatesUri);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FamilyMemberHistory.FamilyHistoryStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FamilyMemberHistory.FamilyHistoryStatus>, reader); // 120
							break;
						case "dataAbsentReason":
							result.DataAbsentReason = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.DataAbsentReason as Hl7.Fhir.Model.CodeableConcept, reader); // 130
							break;
						case "patient":
							result.Patient = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Patient as Hl7.Fhir.Model.ResourceReference, reader); // 140
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 150
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 160
							break;
						case "relationship":
							result.Relationship = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Relationship as Hl7.Fhir.Model.CodeableConcept, reader); // 170
							break;
						case "sex":
							result.Sex = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Sex as Hl7.Fhir.Model.CodeableConcept, reader); // 180
							break;
						case "bornPeriod":
							result.Born = new Hl7.Fhir.Model.Period();
							Parse(result.Born as Hl7.Fhir.Model.Period, reader); // 190
							break;
						case "bornDate":
							result.Born = new Hl7.Fhir.Model.Date();
							Parse(result.Born as Hl7.Fhir.Model.Date, reader); // 190
							break;
						case "bornString":
							result.Born = new Hl7.Fhir.Model.FhirString();
							Parse(result.Born as Hl7.Fhir.Model.FhirString, reader); // 190
							break;
						case "ageAge":
							result.Age = new Hl7.Fhir.Model.Age();
							Parse(result.Age as Hl7.Fhir.Model.Age, reader); // 200
							break;
						case "ageRange":
							result.Age = new Hl7.Fhir.Model.Range();
							Parse(result.Age as Hl7.Fhir.Model.Range, reader); // 200
							break;
						case "ageString":
							result.Age = new Hl7.Fhir.Model.FhirString();
							Parse(result.Age as Hl7.Fhir.Model.FhirString, reader); // 200
							break;
						case "estimatedAge":
							result.EstimatedAgeElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.EstimatedAgeElement as Hl7.Fhir.Model.FhirBoolean, reader); // 210
							break;
						case "deceasedBoolean":
							result.Deceased = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.Deceased as Hl7.Fhir.Model.FhirBoolean, reader); // 220
							break;
						case "deceasedAge":
							result.Deceased = new Hl7.Fhir.Model.Age();
							Parse(result.Deceased as Hl7.Fhir.Model.Age, reader); // 220
							break;
						case "deceasedRange":
							result.Deceased = new Hl7.Fhir.Model.Range();
							Parse(result.Deceased as Hl7.Fhir.Model.Range, reader); // 220
							break;
						case "deceasedDate":
							result.Deceased = new Hl7.Fhir.Model.Date();
							Parse(result.Deceased as Hl7.Fhir.Model.Date, reader); // 220
							break;
						case "deceasedString":
							result.Deceased = new Hl7.Fhir.Model.FhirString();
							Parse(result.Deceased as Hl7.Fhir.Model.FhirString, reader); // 220
							break;
						case "reasonCode":
							var newItem_reasonCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_reasonCode, reader); // 230
							result.ReasonCode.Add(newItem_reasonCode);
							break;
						case "reasonReference":
							var newItem_reasonReference = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_reasonReference, reader); // 240
							result.ReasonReference.Add(newItem_reasonReference);
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 250
							result.Note.Add(newItem_note);
							break;
						case "condition":
							var newItem_condition = new Hl7.Fhir.Model.FamilyMemberHistory.ConditionComponent();
							Parse(newItem_condition, reader); // 260
							result.Condition.Add(newItem_condition);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Flag result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Flag.FlagStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Flag.FlagStatus>, reader); // 100
							break;
						case "category":
							var newItem_category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_category, reader); // 110
							result.Category.Add(newItem_category);
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 120
							break;
						case "subject":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 130
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 140
							break;
						case "encounter":
							result.Encounter = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Encounter as Hl7.Fhir.Model.ResourceReference, reader); // 150
							break;
						case "author":
							result.Author = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Author as Hl7.Fhir.Model.ResourceReference, reader); // 160
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Goal result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "lifecycleStatus":
							result.LifecycleStatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Goal.GoalLifecycleStatus>();
							Parse(result.LifecycleStatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Goal.GoalLifecycleStatus>, reader); // 100
							break;
						case "achievementStatus":
							result.AchievementStatus = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.AchievementStatus as Hl7.Fhir.Model.CodeableConcept, reader); // 110
							break;
						case "category":
							var newItem_category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_category, reader); // 120
							result.Category.Add(newItem_category);
							break;
						case "priority":
							result.Priority = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Priority as Hl7.Fhir.Model.CodeableConcept, reader); // 130
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Description as Hl7.Fhir.Model.CodeableConcept, reader); // 140
							break;
						case "subject":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 150
							break;
						case "startDate":
							result.Start = new Hl7.Fhir.Model.Date();
							Parse(result.Start as Hl7.Fhir.Model.Date, reader); // 160
							break;
						case "startCodeableConcept":
							result.Start = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Start as Hl7.Fhir.Model.CodeableConcept, reader); // 160
							break;
						case "target":
							var newItem_target = new Hl7.Fhir.Model.Goal.TargetComponent();
							Parse(newItem_target, reader); // 170
							result.Target.Add(newItem_target);
							break;
						case "statusDate":
							result.StatusDateElement = new Hl7.Fhir.Model.Date();
							Parse(result.StatusDateElement as Hl7.Fhir.Model.Date, reader); // 180
							break;
						case "statusReason":
							result.StatusReasonElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.StatusReasonElement as Hl7.Fhir.Model.FhirString, reader); // 190
							break;
						case "expressedBy":
							result.ExpressedBy = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.ExpressedBy as Hl7.Fhir.Model.ResourceReference, reader); // 200
							break;
						case "addresses":
							var newItem_addresses = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_addresses, reader); // 210
							result.Addresses.Add(newItem_addresses);
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 220
							result.Note.Add(newItem_note);
							break;
						case "outcomeCode":
							var newItem_outcomeCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_outcomeCode, reader); // 230
							result.OutcomeCode.Add(newItem_outcomeCode);
							break;
						case "outcomeReference":
							var newItem_outcomeReference = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_outcomeReference, reader); // 240
							result.OutcomeReference.Add(newItem_outcomeReference);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(GraphDefinition result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUri, reader); // 90
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 100
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>, reader); // 120
							break;
						case "experimental":
							result.ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ExperimentalElement as Hl7.Fhir.Model.FhirBoolean, reader); // 130
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 140
							break;
						case "publisher":
							result.PublisherElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PublisherElement as Hl7.Fhir.Model.FhirString, reader); // 150
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_contact, reader); // 160
							result.Contact.Add(newItem_contact);
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.Markdown();
							Parse(result.Description as Hl7.Fhir.Model.Markdown, reader); // 170
							break;
						case "useContext":
							var newItem_useContext = new Hl7.Fhir.Model.UsageContext();
							Parse(newItem_useContext, reader); // 180
							result.UseContext.Add(newItem_useContext);
							break;
						case "jurisdiction":
							var newItem_jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_jurisdiction, reader); // 190
							result.Jurisdiction.Add(newItem_jurisdiction);
							break;
						case "purpose":
							result.Purpose = new Hl7.Fhir.Model.Markdown();
							Parse(result.Purpose as Hl7.Fhir.Model.Markdown, reader); // 200
							break;
						case "start":
							result.StartElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ResourceType>();
							Parse(result.StartElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ResourceType>, reader); // 210
							break;
						case "profile":
							result.ProfileElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.ProfileElement as Hl7.Fhir.Model.Canonical, reader); // 220
							break;
						case "link":
							var newItem_link = new Hl7.Fhir.Model.GraphDefinition.LinkComponent();
							Parse(newItem_link, reader); // 230
							result.Link.Add(newItem_link);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Group result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "active":
							result.ActiveElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ActiveElement as Hl7.Fhir.Model.FhirBoolean, reader); // 100
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Group.GroupType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Group.GroupType>, reader); // 110
							break;
						case "actual":
							result.ActualElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ActualElement as Hl7.Fhir.Model.FhirBoolean, reader); // 120
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 130
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 140
							break;
						case "quantity":
							result.QuantityElement = new Hl7.Fhir.Model.UnsignedInt();
							Parse(result.QuantityElement as Hl7.Fhir.Model.UnsignedInt, reader); // 150
							break;
						case "managingEntity":
							result.ManagingEntity = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.ManagingEntity as Hl7.Fhir.Model.ResourceReference, reader); // 160
							break;
						case "characteristic":
							var newItem_characteristic = new Hl7.Fhir.Model.Group.CharacteristicComponent();
							Parse(newItem_characteristic, reader); // 170
							result.Characteristic.Add(newItem_characteristic);
							break;
						case "member":
							var newItem_member = new Hl7.Fhir.Model.Group.MemberComponent();
							Parse(newItem_member, reader); // 180
							result.Member.Add(newItem_member);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(GuidanceResponse result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "requestIdentifier":
							result.RequestIdentifier = new Hl7.Fhir.Model.Identifier();
							Parse(result.RequestIdentifier as Hl7.Fhir.Model.Identifier, reader); // 90
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 100
							result.Identifier.Add(newItem_identifier);
							break;
						case "moduleUri":
							result.Module = new Hl7.Fhir.Model.FhirUri();
							Parse(result.Module as Hl7.Fhir.Model.FhirUri, reader); // 110
							break;
						case "moduleCanonical":
							result.Module = new Hl7.Fhir.Model.Canonical();
							Parse(result.Module as Hl7.Fhir.Model.Canonical, reader); // 110
							break;
						case "moduleCodeableConcept":
							result.Module = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Module as Hl7.Fhir.Model.CodeableConcept, reader); // 110
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.GuidanceResponse.GuidanceResponseStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.GuidanceResponse.GuidanceResponseStatus>, reader); // 120
							break;
						case "subject":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 130
							break;
						case "encounter":
							result.Encounter = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Encounter as Hl7.Fhir.Model.ResourceReference, reader); // 140
							break;
						case "occurrenceDateTime":
							result.OccurrenceDateTimeElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.OccurrenceDateTimeElement as Hl7.Fhir.Model.FhirDateTime, reader); // 150
							break;
						case "performer":
							result.Performer = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Performer as Hl7.Fhir.Model.ResourceReference, reader); // 160
							break;
						case "reasonCode":
							var newItem_reasonCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_reasonCode, reader); // 170
							result.ReasonCode.Add(newItem_reasonCode);
							break;
						case "reasonReference":
							var newItem_reasonReference = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_reasonReference, reader); // 180
							result.ReasonReference.Add(newItem_reasonReference);
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 190
							result.Note.Add(newItem_note);
							break;
						case "evaluationMessage":
							var newItem_evaluationMessage = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_evaluationMessage, reader); // 200
							result.EvaluationMessage.Add(newItem_evaluationMessage);
							break;
						case "outputParameters":
							result.OutputParameters = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.OutputParameters as Hl7.Fhir.Model.ResourceReference, reader); // 210
							break;
						case "result":
							result.Result = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Result as Hl7.Fhir.Model.ResourceReference, reader); // 220
							break;
						case "dataRequirement":
							var newItem_dataRequirement = new Hl7.Fhir.Model.DataRequirement();
							Parse(newItem_dataRequirement, reader); // 230
							result.DataRequirement.Add(newItem_dataRequirement);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(HealthcareService result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "active":
							result.ActiveElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ActiveElement as Hl7.Fhir.Model.FhirBoolean, reader); // 100
							break;
						case "providedBy":
							result.ProvidedBy = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.ProvidedBy as Hl7.Fhir.Model.ResourceReference, reader); // 110
							break;
						case "category":
							var newItem_category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_category, reader); // 120
							result.Category.Add(newItem_category);
							break;
						case "type":
							var newItem_type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_type, reader); // 130
							result.Type.Add(newItem_type);
							break;
						case "specialty":
							var newItem_specialty = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_specialty, reader); // 140
							result.Specialty.Add(newItem_specialty);
							break;
						case "location":
							var newItem_location = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_location, reader); // 150
							result.Location.Add(newItem_location);
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 160
							break;
						case "comment":
							result.CommentElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.CommentElement as Hl7.Fhir.Model.FhirString, reader); // 170
							break;
						case "extraDetails":
							result.ExtraDetails = new Hl7.Fhir.Model.Markdown();
							Parse(result.ExtraDetails as Hl7.Fhir.Model.Markdown, reader); // 180
							break;
						case "photo":
							result.Photo = new Hl7.Fhir.Model.Attachment();
							Parse(result.Photo as Hl7.Fhir.Model.Attachment, reader); // 190
							break;
						case "telecom":
							var newItem_telecom = new Hl7.Fhir.Model.ContactPoint();
							Parse(newItem_telecom, reader); // 200
							result.Telecom.Add(newItem_telecom);
							break;
						case "coverageArea":
							var newItem_coverageArea = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_coverageArea, reader); // 210
							result.CoverageArea.Add(newItem_coverageArea);
							break;
						case "serviceProvisionCode":
							var newItem_serviceProvisionCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_serviceProvisionCode, reader); // 220
							result.ServiceProvisionCode.Add(newItem_serviceProvisionCode);
							break;
						case "eligibility":
							var newItem_eligibility = new Hl7.Fhir.Model.HealthcareService.EligibilityComponent();
							Parse(newItem_eligibility, reader); // 230
							result.Eligibility.Add(newItem_eligibility);
							break;
						case "program":
							var newItem_program = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_program, reader); // 240
							result.Program.Add(newItem_program);
							break;
						case "characteristic":
							var newItem_characteristic = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_characteristic, reader); // 250
							result.Characteristic.Add(newItem_characteristic);
							break;
						case "communication":
							var newItem_communication = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_communication, reader); // 260
							result.Communication.Add(newItem_communication);
							break;
						case "referralMethod":
							var newItem_referralMethod = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_referralMethod, reader); // 270
							result.ReferralMethod.Add(newItem_referralMethod);
							break;
						case "appointmentRequired":
							result.AppointmentRequiredElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.AppointmentRequiredElement as Hl7.Fhir.Model.FhirBoolean, reader); // 280
							break;
						case "availableTime":
							var newItem_availableTime = new Hl7.Fhir.Model.HealthcareService.AvailableTimeComponent();
							Parse(newItem_availableTime, reader); // 290
							result.AvailableTime.Add(newItem_availableTime);
							break;
						case "notAvailable":
							var newItem_notAvailable = new Hl7.Fhir.Model.HealthcareService.NotAvailableComponent();
							Parse(newItem_notAvailable, reader); // 300
							result.NotAvailable.Add(newItem_notAvailable);
							break;
						case "availabilityExceptions":
							result.AvailabilityExceptionsElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.AvailabilityExceptionsElement as Hl7.Fhir.Model.FhirString, reader); // 310
							break;
						case "endpoint":
							var newItem_endpoint = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_endpoint, reader); // 320
							result.Endpoint.Add(newItem_endpoint);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(ImagingStudy result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ImagingStudy.ImagingStudyStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ImagingStudy.ImagingStudyStatus>, reader); // 100
							break;
						case "modality":
							var newItem_modality = new Hl7.Fhir.Model.Coding();
							Parse(newItem_modality, reader); // 110
							result.Modality.Add(newItem_modality);
							break;
						case "subject":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 120
							break;
						case "encounter":
							result.Encounter = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Encounter as Hl7.Fhir.Model.ResourceReference, reader); // 130
							break;
						case "started":
							result.StartedElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.StartedElement as Hl7.Fhir.Model.FhirDateTime, reader); // 140
							break;
						case "basedOn":
							var newItem_basedOn = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_basedOn, reader); // 150
							result.BasedOn.Add(newItem_basedOn);
							break;
						case "referrer":
							result.Referrer = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Referrer as Hl7.Fhir.Model.ResourceReference, reader); // 160
							break;
						case "interpreter":
							var newItem_interpreter = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_interpreter, reader); // 170
							result.Interpreter.Add(newItem_interpreter);
							break;
						case "endpoint":
							var newItem_endpoint = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_endpoint, reader); // 180
							result.Endpoint.Add(newItem_endpoint);
							break;
						case "numberOfSeries":
							result.NumberOfSeriesElement = new Hl7.Fhir.Model.UnsignedInt();
							Parse(result.NumberOfSeriesElement as Hl7.Fhir.Model.UnsignedInt, reader); // 190
							break;
						case "numberOfInstances":
							result.NumberOfInstancesElement = new Hl7.Fhir.Model.UnsignedInt();
							Parse(result.NumberOfInstancesElement as Hl7.Fhir.Model.UnsignedInt, reader); // 200
							break;
						case "procedureReference":
							result.ProcedureReference = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.ProcedureReference as Hl7.Fhir.Model.ResourceReference, reader); // 210
							break;
						case "procedureCode":
							var newItem_procedureCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_procedureCode, reader); // 220
							result.ProcedureCode.Add(newItem_procedureCode);
							break;
						case "location":
							result.Location = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Location as Hl7.Fhir.Model.ResourceReference, reader); // 230
							break;
						case "reasonCode":
							var newItem_reasonCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_reasonCode, reader); // 240
							result.ReasonCode.Add(newItem_reasonCode);
							break;
						case "reasonReference":
							var newItem_reasonReference = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_reasonReference, reader); // 250
							result.ReasonReference.Add(newItem_reasonReference);
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 260
							result.Note.Add(newItem_note);
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 270
							break;
						case "series":
							var newItem_series = new Hl7.Fhir.Model.ImagingStudy.SeriesComponent();
							Parse(newItem_series, reader); // 280
							result.Series.Add(newItem_series);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Immunization result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Immunization.ImmunizationStatusCodes>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Immunization.ImmunizationStatusCodes>, reader); // 100
							break;
						case "statusReason":
							result.StatusReason = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.StatusReason as Hl7.Fhir.Model.CodeableConcept, reader); // 110
							break;
						case "vaccineCode":
							result.VaccineCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.VaccineCode as Hl7.Fhir.Model.CodeableConcept, reader); // 120
							break;
						case "patient":
							result.Patient = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Patient as Hl7.Fhir.Model.ResourceReference, reader); // 130
							break;
						case "encounter":
							result.Encounter = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Encounter as Hl7.Fhir.Model.ResourceReference, reader); // 140
							break;
						case "occurrenceDateTime":
							result.Occurrence = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Occurrence as Hl7.Fhir.Model.FhirDateTime, reader); // 150
							break;
						case "occurrenceString":
							result.Occurrence = new Hl7.Fhir.Model.FhirString();
							Parse(result.Occurrence as Hl7.Fhir.Model.FhirString, reader); // 150
							break;
						case "recorded":
							result.RecordedElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.RecordedElement as Hl7.Fhir.Model.FhirDateTime, reader); // 160
							break;
						case "primarySource":
							result.PrimarySourceElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.PrimarySourceElement as Hl7.Fhir.Model.FhirBoolean, reader); // 170
							break;
						case "reportOrigin":
							result.ReportOrigin = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.ReportOrigin as Hl7.Fhir.Model.CodeableConcept, reader); // 180
							break;
						case "location":
							result.Location = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Location as Hl7.Fhir.Model.ResourceReference, reader); // 190
							break;
						case "manufacturer":
							result.Manufacturer = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Manufacturer as Hl7.Fhir.Model.ResourceReference, reader); // 200
							break;
						case "lotNumber":
							result.LotNumberElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.LotNumberElement as Hl7.Fhir.Model.FhirString, reader); // 210
							break;
						case "expirationDate":
							result.ExpirationDateElement = new Hl7.Fhir.Model.Date();
							Parse(result.ExpirationDateElement as Hl7.Fhir.Model.Date, reader); // 220
							break;
						case "site":
							result.Site = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Site as Hl7.Fhir.Model.CodeableConcept, reader); // 230
							break;
						case "route":
							result.Route = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Route as Hl7.Fhir.Model.CodeableConcept, reader); // 240
							break;
						case "doseQuantity":
							result.DoseQuantity = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.DoseQuantity as Hl7.Fhir.Model.SimpleQuantity, reader); // 250
							break;
						case "performer":
							var newItem_performer = new Hl7.Fhir.Model.Immunization.PerformerComponent();
							Parse(newItem_performer, reader); // 260
							result.Performer.Add(newItem_performer);
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 270
							result.Note.Add(newItem_note);
							break;
						case "reasonCode":
							var newItem_reasonCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_reasonCode, reader); // 280
							result.ReasonCode.Add(newItem_reasonCode);
							break;
						case "reasonReference":
							var newItem_reasonReference = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_reasonReference, reader); // 290
							result.ReasonReference.Add(newItem_reasonReference);
							break;
						case "isSubpotent":
							result.IsSubpotentElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.IsSubpotentElement as Hl7.Fhir.Model.FhirBoolean, reader); // 300
							break;
						case "subpotentReason":
							var newItem_subpotentReason = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_subpotentReason, reader); // 310
							result.SubpotentReason.Add(newItem_subpotentReason);
							break;
						case "education":
							var newItem_education = new Hl7.Fhir.Model.Immunization.EducationComponent();
							Parse(newItem_education, reader); // 320
							result.Education.Add(newItem_education);
							break;
						case "programEligibility":
							var newItem_programEligibility = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_programEligibility, reader); // 330
							result.ProgramEligibility.Add(newItem_programEligibility);
							break;
						case "fundingSource":
							result.FundingSource = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.FundingSource as Hl7.Fhir.Model.CodeableConcept, reader); // 340
							break;
						case "reaction":
							var newItem_reaction = new Hl7.Fhir.Model.Immunization.ReactionComponent();
							Parse(newItem_reaction, reader); // 350
							result.Reaction.Add(newItem_reaction);
							break;
						case "protocolApplied":
							var newItem_protocolApplied = new Hl7.Fhir.Model.Immunization.ProtocolAppliedComponent();
							Parse(newItem_protocolApplied, reader); // 360
							result.ProtocolApplied.Add(newItem_protocolApplied);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(ImmunizationEvaluation result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ImmunizationEvaluation.ImmunizationEvaluationStatusCodes>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ImmunizationEvaluation.ImmunizationEvaluationStatusCodes>, reader); // 100
							break;
						case "patient":
							result.Patient = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Patient as Hl7.Fhir.Model.ResourceReference, reader); // 110
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 120
							break;
						case "authority":
							result.Authority = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Authority as Hl7.Fhir.Model.ResourceReference, reader); // 130
							break;
						case "targetDisease":
							result.TargetDisease = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.TargetDisease as Hl7.Fhir.Model.CodeableConcept, reader); // 140
							break;
						case "immunizationEvent":
							result.ImmunizationEvent = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.ImmunizationEvent as Hl7.Fhir.Model.ResourceReference, reader); // 150
							break;
						case "doseStatus":
							result.DoseStatus = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.DoseStatus as Hl7.Fhir.Model.CodeableConcept, reader); // 160
							break;
						case "doseStatusReason":
							var newItem_doseStatusReason = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_doseStatusReason, reader); // 170
							result.DoseStatusReason.Add(newItem_doseStatusReason);
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 180
							break;
						case "series":
							result.SeriesElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.SeriesElement as Hl7.Fhir.Model.FhirString, reader); // 190
							break;
						case "doseNumberPositiveInt":
							result.DoseNumber = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.DoseNumber as Hl7.Fhir.Model.PositiveInt, reader); // 200
							break;
						case "doseNumberString":
							result.DoseNumber = new Hl7.Fhir.Model.FhirString();
							Parse(result.DoseNumber as Hl7.Fhir.Model.FhirString, reader); // 200
							break;
						case "seriesDosesPositiveInt":
							result.SeriesDoses = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.SeriesDoses as Hl7.Fhir.Model.PositiveInt, reader); // 210
							break;
						case "seriesDosesString":
							result.SeriesDoses = new Hl7.Fhir.Model.FhirString();
							Parse(result.SeriesDoses as Hl7.Fhir.Model.FhirString, reader); // 210
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(ImmunizationRecommendation result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "patient":
							result.Patient = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Patient as Hl7.Fhir.Model.ResourceReference, reader); // 100
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 110
							break;
						case "authority":
							result.Authority = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Authority as Hl7.Fhir.Model.ResourceReference, reader); // 120
							break;
						case "recommendation":
							var newItem_recommendation = new Hl7.Fhir.Model.ImmunizationRecommendation.RecommendationComponent();
							Parse(newItem_recommendation, reader); // 130
							result.Recommendation.Add(newItem_recommendation);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(ImplementationGuide result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUri, reader); // 90
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 100
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>, reader); // 130
							break;
						case "experimental":
							result.ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ExperimentalElement as Hl7.Fhir.Model.FhirBoolean, reader); // 140
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 150
							break;
						case "publisher":
							result.PublisherElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PublisherElement as Hl7.Fhir.Model.FhirString, reader); // 160
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_contact, reader); // 170
							result.Contact.Add(newItem_contact);
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.Markdown();
							Parse(result.Description as Hl7.Fhir.Model.Markdown, reader); // 180
							break;
						case "useContext":
							var newItem_useContext = new Hl7.Fhir.Model.UsageContext();
							Parse(newItem_useContext, reader); // 190
							result.UseContext.Add(newItem_useContext);
							break;
						case "jurisdiction":
							var newItem_jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_jurisdiction, reader); // 200
							result.Jurisdiction.Add(newItem_jurisdiction);
							break;
						case "copyright":
							result.Copyright = new Hl7.Fhir.Model.Markdown();
							Parse(result.Copyright as Hl7.Fhir.Model.Markdown, reader); // 210
							break;
						case "packageId":
							result.PackageIdElement = new Hl7.Fhir.Model.Id();
							Parse(result.PackageIdElement as Hl7.Fhir.Model.Id, reader); // 220
							break;
						case "license":
							result.LicenseElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ImplementationGuide.SPDXLicense>();
							Parse(result.LicenseElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ImplementationGuide.SPDXLicense>, reader); // 230
							break;
						case "fhirVersion":
							var newItem_fhirVersion = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FHIRVersion>();
							Parse(newItem_fhirVersion, reader); // 240
							result.FhirVersionElement.Add(newItem_fhirVersion);
							break;
						case "dependsOn":
							var newItem_dependsOn = new Hl7.Fhir.Model.ImplementationGuide.DependsOnComponent();
							Parse(newItem_dependsOn, reader); // 250
							result.DependsOn.Add(newItem_dependsOn);
							break;
						case "global":
							var newItem_global = new Hl7.Fhir.Model.ImplementationGuide.GlobalComponent();
							Parse(newItem_global, reader); // 260
							result.Global.Add(newItem_global);
							break;
						case "definition":
							result.Definition = new Hl7.Fhir.Model.ImplementationGuide.DefinitionComponent();
							Parse(result.Definition as Hl7.Fhir.Model.ImplementationGuide.DefinitionComponent, reader); // 270
							break;
						case "manifest":
							result.Manifest = new Hl7.Fhir.Model.ImplementationGuide.ManifestComponent();
							Parse(result.Manifest as Hl7.Fhir.Model.ImplementationGuide.ManifestComponent, reader); // 280
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(InsurancePlan result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>, reader); // 100
							break;
						case "type":
							var newItem_type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_type, reader); // 110
							result.Type.Add(newItem_type);
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "alias":
							var newItem_alias = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_alias, reader); // 130
							result.AliasElement.Add(newItem_alias);
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 140
							break;
						case "ownedBy":
							result.OwnedBy = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.OwnedBy as Hl7.Fhir.Model.ResourceReference, reader); // 150
							break;
						case "administeredBy":
							result.AdministeredBy = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.AdministeredBy as Hl7.Fhir.Model.ResourceReference, reader); // 160
							break;
						case "coverageArea":
							var newItem_coverageArea = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_coverageArea, reader); // 170
							result.CoverageArea.Add(newItem_coverageArea);
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.InsurancePlan.ContactComponent();
							Parse(newItem_contact, reader); // 180
							result.Contact.Add(newItem_contact);
							break;
						case "endpoint":
							var newItem_endpoint = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_endpoint, reader); // 190
							result.Endpoint.Add(newItem_endpoint);
							break;
						case "network":
							var newItem_network = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_network, reader); // 200
							result.Network.Add(newItem_network);
							break;
						case "coverage":
							var newItem_coverage = new Hl7.Fhir.Model.InsurancePlan.CoverageComponent();
							Parse(newItem_coverage, reader); // 210
							result.Coverage.Add(newItem_coverage);
							break;
						case "plan":
							var newItem_plan = new Hl7.Fhir.Model.InsurancePlan.PlanComponent();
							Parse(newItem_plan, reader); // 220
							result.Plan.Add(newItem_plan);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Invoice result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Invoice.InvoiceStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Invoice.InvoiceStatus>, reader); // 100
							break;
						case "cancelledReason":
							result.CancelledReasonElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.CancelledReasonElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 120
							break;
						case "subject":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 130
							break;
						case "recipient":
							result.Recipient = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Recipient as Hl7.Fhir.Model.ResourceReference, reader); // 140
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 150
							break;
						case "participant":
							var newItem_participant = new Hl7.Fhir.Model.Invoice.ParticipantComponent();
							Parse(newItem_participant, reader); // 160
							result.Participant.Add(newItem_participant);
							break;
						case "issuer":
							result.Issuer = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Issuer as Hl7.Fhir.Model.ResourceReference, reader); // 170
							break;
						case "account":
							result.Account = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Account as Hl7.Fhir.Model.ResourceReference, reader); // 180
							break;
						case "lineItem":
							var newItem_lineItem = new Hl7.Fhir.Model.Invoice.LineItemComponent();
							Parse(newItem_lineItem, reader); // 190
							result.LineItem.Add(newItem_lineItem);
							break;
						case "totalPriceComponent":
							var newItem_totalPriceComponent = new Hl7.Fhir.Model.Invoice.PriceComponentComponent();
							Parse(newItem_totalPriceComponent, reader); // 200
							result.TotalPriceComponent.Add(newItem_totalPriceComponent);
							break;
						case "totalNet":
							result.TotalNet = new Hl7.Fhir.Model.Money();
							Parse(result.TotalNet as Hl7.Fhir.Model.Money, reader); // 210
							break;
						case "totalGross":
							result.TotalGross = new Hl7.Fhir.Model.Money();
							Parse(result.TotalGross as Hl7.Fhir.Model.Money, reader); // 220
							break;
						case "paymentTerms":
							result.PaymentTerms = new Hl7.Fhir.Model.Markdown();
							Parse(result.PaymentTerms as Hl7.Fhir.Model.Markdown, reader); // 230
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 240
							result.Note.Add(newItem_note);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Library result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUri, reader); // 90
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 100
							result.Identifier.Add(newItem_identifier);
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 130
							break;
						case "subtitle":
							result.SubtitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.SubtitleElement as Hl7.Fhir.Model.FhirString, reader); // 140
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>, reader); // 150
							break;
						case "experimental":
							result.ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ExperimentalElement as Hl7.Fhir.Model.FhirBoolean, reader); // 160
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 170
							break;
						case "subjectCodeableConcept":
							result.Subject = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Subject as Hl7.Fhir.Model.CodeableConcept, reader); // 180
							break;
						case "subjectReference":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 180
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 190
							break;
						case "publisher":
							result.PublisherElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PublisherElement as Hl7.Fhir.Model.FhirString, reader); // 200
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_contact, reader); // 210
							result.Contact.Add(newItem_contact);
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.Markdown();
							Parse(result.Description as Hl7.Fhir.Model.Markdown, reader); // 220
							break;
						case "useContext":
							var newItem_useContext = new Hl7.Fhir.Model.UsageContext();
							Parse(newItem_useContext, reader); // 230
							result.UseContext.Add(newItem_useContext);
							break;
						case "jurisdiction":
							var newItem_jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_jurisdiction, reader); // 240
							result.Jurisdiction.Add(newItem_jurisdiction);
							break;
						case "purpose":
							result.Purpose = new Hl7.Fhir.Model.Markdown();
							Parse(result.Purpose as Hl7.Fhir.Model.Markdown, reader); // 250
							break;
						case "usage":
							result.UsageElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.UsageElement as Hl7.Fhir.Model.FhirString, reader); // 260
							break;
						case "copyright":
							result.Copyright = new Hl7.Fhir.Model.Markdown();
							Parse(result.Copyright as Hl7.Fhir.Model.Markdown, reader); // 270
							break;
						case "approvalDate":
							result.ApprovalDateElement = new Hl7.Fhir.Model.Date();
							Parse(result.ApprovalDateElement as Hl7.Fhir.Model.Date, reader); // 280
							break;
						case "lastReviewDate":
							result.LastReviewDateElement = new Hl7.Fhir.Model.Date();
							Parse(result.LastReviewDateElement as Hl7.Fhir.Model.Date, reader); // 290
							break;
						case "effectivePeriod":
							result.EffectivePeriod = new Hl7.Fhir.Model.Period();
							Parse(result.EffectivePeriod as Hl7.Fhir.Model.Period, reader); // 300
							break;
						case "topic":
							var newItem_topic = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_topic, reader); // 310
							result.Topic.Add(newItem_topic);
							break;
						case "author":
							var newItem_author = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_author, reader); // 320
							result.Author.Add(newItem_author);
							break;
						case "editor":
							var newItem_editor = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_editor, reader); // 330
							result.Editor.Add(newItem_editor);
							break;
						case "reviewer":
							var newItem_reviewer = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_reviewer, reader); // 340
							result.Reviewer.Add(newItem_reviewer);
							break;
						case "endorser":
							var newItem_endorser = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_endorser, reader); // 350
							result.Endorser.Add(newItem_endorser);
							break;
						case "relatedArtifact":
							var newItem_relatedArtifact = new Hl7.Fhir.Model.RelatedArtifact();
							Parse(newItem_relatedArtifact, reader); // 360
							result.RelatedArtifact.Add(newItem_relatedArtifact);
							break;
						case "parameter":
							var newItem_parameter = new Hl7.Fhir.Model.ParameterDefinition();
							Parse(newItem_parameter, reader); // 370
							result.Parameter.Add(newItem_parameter);
							break;
						case "dataRequirement":
							var newItem_dataRequirement = new Hl7.Fhir.Model.DataRequirement();
							Parse(newItem_dataRequirement, reader); // 380
							result.DataRequirement.Add(newItem_dataRequirement);
							break;
						case "content":
							var newItem_content = new Hl7.Fhir.Model.Attachment();
							Parse(newItem_content, reader); // 390
							result.Content.Add(newItem_content);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Linkage result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "active":
							result.ActiveElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ActiveElement as Hl7.Fhir.Model.FhirBoolean, reader); // 90
							break;
						case "author":
							result.Author = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Author as Hl7.Fhir.Model.ResourceReference, reader); // 100
							break;
						case "item":
							var newItem_item = new Hl7.Fhir.Model.Linkage.ItemComponent();
							Parse(newItem_item, reader); // 110
							result.Item.Add(newItem_item);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(List result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.List.ListStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.List.ListStatus>, reader); // 100
							break;
						case "mode":
							result.ModeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ListMode>();
							Parse(result.ModeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ListMode>, reader); // 110
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 130
							break;
						case "subject":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 140
							break;
						case "encounter":
							result.Encounter = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Encounter as Hl7.Fhir.Model.ResourceReference, reader); // 150
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 160
							break;
						case "source":
							result.Source = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Source as Hl7.Fhir.Model.ResourceReference, reader); // 170
							break;
						case "orderedBy":
							result.OrderedBy = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.OrderedBy as Hl7.Fhir.Model.CodeableConcept, reader); // 180
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 190
							result.Note.Add(newItem_note);
							break;
						case "entry":
							var newItem_entry = new Hl7.Fhir.Model.List.EntryComponent();
							Parse(newItem_entry, reader); // 200
							result.Entry.Add(newItem_entry);
							break;
						case "emptyReason":
							result.EmptyReason = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.EmptyReason as Hl7.Fhir.Model.CodeableConcept, reader); // 210
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Location result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Location.LocationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Location.LocationStatus>, reader); // 100
							break;
						case "operationalStatus":
							result.OperationalStatus = new Hl7.Fhir.Model.Coding();
							Parse(result.OperationalStatus as Hl7.Fhir.Model.Coding, reader); // 110
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "alias":
							var newItem_alias = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_alias, reader); // 130
							result.AliasElement.Add(newItem_alias);
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 140
							break;
						case "mode":
							result.ModeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Location.LocationMode>();
							Parse(result.ModeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Location.LocationMode>, reader); // 150
							break;
						case "type":
							var newItem_type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_type, reader); // 160
							result.Type.Add(newItem_type);
							break;
						case "telecom":
							var newItem_telecom = new Hl7.Fhir.Model.ContactPoint();
							Parse(newItem_telecom, reader); // 170
							result.Telecom.Add(newItem_telecom);
							break;
						case "address":
							result.Address = new Hl7.Fhir.Model.Address();
							Parse(result.Address as Hl7.Fhir.Model.Address, reader); // 180
							break;
						case "physicalType":
							result.PhysicalType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.PhysicalType as Hl7.Fhir.Model.CodeableConcept, reader); // 190
							break;
						case "position":
							result.Position = new Hl7.Fhir.Model.Location.PositionComponent();
							Parse(result.Position as Hl7.Fhir.Model.Location.PositionComponent, reader); // 200
							break;
						case "managingOrganization":
							result.ManagingOrganization = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.ManagingOrganization as Hl7.Fhir.Model.ResourceReference, reader); // 210
							break;
						case "partOf":
							result.PartOf = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.PartOf as Hl7.Fhir.Model.ResourceReference, reader); // 220
							break;
						case "hoursOfOperation":
							var newItem_hoursOfOperation = new Hl7.Fhir.Model.Location.HoursOfOperationComponent();
							Parse(newItem_hoursOfOperation, reader); // 230
							result.HoursOfOperation.Add(newItem_hoursOfOperation);
							break;
						case "availabilityExceptions":
							result.AvailabilityExceptionsElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.AvailabilityExceptionsElement as Hl7.Fhir.Model.FhirString, reader); // 240
							break;
						case "endpoint":
							var newItem_endpoint = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_endpoint, reader); // 250
							result.Endpoint.Add(newItem_endpoint);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Measure result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUri, reader); // 90
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 100
							result.Identifier.Add(newItem_identifier);
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 130
							break;
						case "subtitle":
							result.SubtitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.SubtitleElement as Hl7.Fhir.Model.FhirString, reader); // 140
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>, reader); // 150
							break;
						case "experimental":
							result.ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ExperimentalElement as Hl7.Fhir.Model.FhirBoolean, reader); // 160
							break;
						case "subjectCodeableConcept":
							result.Subject = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Subject as Hl7.Fhir.Model.CodeableConcept, reader); // 170
							break;
						case "subjectReference":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 170
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 180
							break;
						case "publisher":
							result.PublisherElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PublisherElement as Hl7.Fhir.Model.FhirString, reader); // 190
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_contact, reader); // 200
							result.Contact.Add(newItem_contact);
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.Markdown();
							Parse(result.Description as Hl7.Fhir.Model.Markdown, reader); // 210
							break;
						case "useContext":
							var newItem_useContext = new Hl7.Fhir.Model.UsageContext();
							Parse(newItem_useContext, reader); // 220
							result.UseContext.Add(newItem_useContext);
							break;
						case "jurisdiction":
							var newItem_jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_jurisdiction, reader); // 230
							result.Jurisdiction.Add(newItem_jurisdiction);
							break;
						case "purpose":
							result.Purpose = new Hl7.Fhir.Model.Markdown();
							Parse(result.Purpose as Hl7.Fhir.Model.Markdown, reader); // 240
							break;
						case "usage":
							result.UsageElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.UsageElement as Hl7.Fhir.Model.FhirString, reader); // 250
							break;
						case "copyright":
							result.Copyright = new Hl7.Fhir.Model.Markdown();
							Parse(result.Copyright as Hl7.Fhir.Model.Markdown, reader); // 260
							break;
						case "approvalDate":
							result.ApprovalDateElement = new Hl7.Fhir.Model.Date();
							Parse(result.ApprovalDateElement as Hl7.Fhir.Model.Date, reader); // 270
							break;
						case "lastReviewDate":
							result.LastReviewDateElement = new Hl7.Fhir.Model.Date();
							Parse(result.LastReviewDateElement as Hl7.Fhir.Model.Date, reader); // 280
							break;
						case "effectivePeriod":
							result.EffectivePeriod = new Hl7.Fhir.Model.Period();
							Parse(result.EffectivePeriod as Hl7.Fhir.Model.Period, reader); // 290
							break;
						case "topic":
							var newItem_topic = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_topic, reader); // 300
							result.Topic.Add(newItem_topic);
							break;
						case "author":
							var newItem_author = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_author, reader); // 310
							result.Author.Add(newItem_author);
							break;
						case "editor":
							var newItem_editor = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_editor, reader); // 320
							result.Editor.Add(newItem_editor);
							break;
						case "reviewer":
							var newItem_reviewer = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_reviewer, reader); // 330
							result.Reviewer.Add(newItem_reviewer);
							break;
						case "endorser":
							var newItem_endorser = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_endorser, reader); // 340
							result.Endorser.Add(newItem_endorser);
							break;
						case "relatedArtifact":
							var newItem_relatedArtifact = new Hl7.Fhir.Model.RelatedArtifact();
							Parse(newItem_relatedArtifact, reader); // 350
							result.RelatedArtifact.Add(newItem_relatedArtifact);
							break;
						case "library":
							var newItem_library = new Hl7.Fhir.Model.Canonical();
							Parse(newItem_library, reader); // 360
							result.LibraryElement.Add(newItem_library);
							break;
						case "disclaimer":
							result.Disclaimer = new Hl7.Fhir.Model.Markdown();
							Parse(result.Disclaimer as Hl7.Fhir.Model.Markdown, reader); // 370
							break;
						case "scoring":
							result.Scoring = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Scoring as Hl7.Fhir.Model.CodeableConcept, reader); // 380
							break;
						case "compositeScoring":
							result.CompositeScoring = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.CompositeScoring as Hl7.Fhir.Model.CodeableConcept, reader); // 390
							break;
						case "type":
							var newItem_type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_type, reader); // 400
							result.Type.Add(newItem_type);
							break;
						case "riskAdjustment":
							result.RiskAdjustmentElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.RiskAdjustmentElement as Hl7.Fhir.Model.FhirString, reader); // 410
							break;
						case "rateAggregation":
							result.RateAggregationElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.RateAggregationElement as Hl7.Fhir.Model.FhirString, reader); // 420
							break;
						case "rationale":
							result.Rationale = new Hl7.Fhir.Model.Markdown();
							Parse(result.Rationale as Hl7.Fhir.Model.Markdown, reader); // 430
							break;
						case "clinicalRecommendationStatement":
							result.ClinicalRecommendationStatement = new Hl7.Fhir.Model.Markdown();
							Parse(result.ClinicalRecommendationStatement as Hl7.Fhir.Model.Markdown, reader); // 440
							break;
						case "improvementNotation":
							result.ImprovementNotation = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.ImprovementNotation as Hl7.Fhir.Model.CodeableConcept, reader); // 450
							break;
						case "definition":
							var newItem_definition = new Hl7.Fhir.Model.Markdown();
							Parse(newItem_definition, reader); // 460
							result.Definition.Add(newItem_definition);
							break;
						case "guidance":
							result.Guidance = new Hl7.Fhir.Model.Markdown();
							Parse(result.Guidance as Hl7.Fhir.Model.Markdown, reader); // 470
							break;
						case "group":
							var newItem_group = new Hl7.Fhir.Model.Measure.GroupComponent();
							Parse(newItem_group, reader); // 480
							result.Group.Add(newItem_group);
							break;
						case "supplementalData":
							var newItem_supplementalData = new Hl7.Fhir.Model.Measure.SupplementalDataComponent();
							Parse(newItem_supplementalData, reader); // 490
							result.SupplementalData.Add(newItem_supplementalData);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(MeasureReport result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.MeasureReport.MeasureReportStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.MeasureReport.MeasureReportStatus>, reader); // 100
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.MeasureReport.MeasureReportType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.MeasureReport.MeasureReportType>, reader); // 110
							break;
						case "measure":
							result.MeasureElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.MeasureElement as Hl7.Fhir.Model.Canonical, reader); // 120
							break;
						case "subject":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 130
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 140
							break;
						case "reporter":
							result.Reporter = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Reporter as Hl7.Fhir.Model.ResourceReference, reader); // 150
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 160
							break;
						case "improvementNotation":
							result.ImprovementNotation = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.ImprovementNotation as Hl7.Fhir.Model.CodeableConcept, reader); // 170
							break;
						case "group":
							var newItem_group = new Hl7.Fhir.Model.MeasureReport.GroupComponent();
							Parse(newItem_group, reader); // 180
							result.Group.Add(newItem_group);
							break;
						case "evaluatedResource":
							var newItem_evaluatedResource = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_evaluatedResource, reader); // 190
							result.EvaluatedResource.Add(newItem_evaluatedResource);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Media result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "basedOn":
							var newItem_basedOn = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_basedOn, reader); // 100
							result.BasedOn.Add(newItem_basedOn);
							break;
						case "partOf":
							var newItem_partOf = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_partOf, reader); // 110
							result.PartOf.Add(newItem_partOf);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.EventStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.EventStatus>, reader); // 120
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 130
							break;
						case "modality":
							result.Modality = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Modality as Hl7.Fhir.Model.CodeableConcept, reader); // 140
							break;
						case "view":
							result.View = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.View as Hl7.Fhir.Model.CodeableConcept, reader); // 150
							break;
						case "subject":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 160
							break;
						case "encounter":
							result.Encounter = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Encounter as Hl7.Fhir.Model.ResourceReference, reader); // 170
							break;
						case "createdDateTime":
							result.Created = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Created as Hl7.Fhir.Model.FhirDateTime, reader); // 180
							break;
						case "createdPeriod":
							result.Created = new Hl7.Fhir.Model.Period();
							Parse(result.Created as Hl7.Fhir.Model.Period, reader); // 180
							break;
						case "issued":
							result.IssuedElement = new Hl7.Fhir.Model.Instant();
							Parse(result.IssuedElement as Hl7.Fhir.Model.Instant, reader); // 190
							break;
						case "operator":
							result.Operator = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Operator as Hl7.Fhir.Model.ResourceReference, reader); // 200
							break;
						case "reasonCode":
							var newItem_reasonCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_reasonCode, reader); // 210
							result.ReasonCode.Add(newItem_reasonCode);
							break;
						case "bodySite":
							result.BodySite = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.BodySite as Hl7.Fhir.Model.CodeableConcept, reader); // 220
							break;
						case "deviceName":
							result.DeviceNameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DeviceNameElement as Hl7.Fhir.Model.FhirString, reader); // 230
							break;
						case "device":
							result.Device = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Device as Hl7.Fhir.Model.ResourceReference, reader); // 240
							break;
						case "height":
							result.HeightElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.HeightElement as Hl7.Fhir.Model.PositiveInt, reader); // 250
							break;
						case "width":
							result.WidthElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.WidthElement as Hl7.Fhir.Model.PositiveInt, reader); // 260
							break;
						case "frames":
							result.FramesElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.FramesElement as Hl7.Fhir.Model.PositiveInt, reader); // 270
							break;
						case "duration":
							result.DurationElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.DurationElement as Hl7.Fhir.Model.FhirDecimal, reader); // 280
							break;
						case "content":
							result.Content = new Hl7.Fhir.Model.Attachment();
							Parse(result.Content as Hl7.Fhir.Model.Attachment, reader); // 290
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 300
							result.Note.Add(newItem_note);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Medication result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 100
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Medication.MedicationStatusCodes>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Medication.MedicationStatusCodes>, reader); // 110
							break;
						case "manufacturer":
							result.Manufacturer = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Manufacturer as Hl7.Fhir.Model.ResourceReference, reader); // 120
							break;
						case "form":
							result.Form = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Form as Hl7.Fhir.Model.CodeableConcept, reader); // 130
							break;
						case "amount":
							result.Amount = new Hl7.Fhir.Model.Ratio();
							Parse(result.Amount as Hl7.Fhir.Model.Ratio, reader); // 140
							break;
						case "ingredient":
							var newItem_ingredient = new Hl7.Fhir.Model.Medication.IngredientComponent();
							Parse(newItem_ingredient, reader); // 150
							result.Ingredient.Add(newItem_ingredient);
							break;
						case "batch":
							result.Batch = new Hl7.Fhir.Model.Medication.BatchComponent();
							Parse(result.Batch as Hl7.Fhir.Model.Medication.BatchComponent, reader); // 160
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(MedicationAdministration result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "instantiates":
							var newItem_instantiates = new Hl7.Fhir.Model.FhirUri();
							Parse(newItem_instantiates, reader); // 100
							result.InstantiatesElement.Add(newItem_instantiates);
							break;
						case "partOf":
							var newItem_partOf = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_partOf, reader); // 110
							result.PartOf.Add(newItem_partOf);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.MedicationAdministration.MedicationAdministrationStatusCodes>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.MedicationAdministration.MedicationAdministrationStatusCodes>, reader); // 120
							break;
						case "statusReason":
							var newItem_statusReason = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_statusReason, reader); // 130
							result.StatusReason.Add(newItem_statusReason);
							break;
						case "category":
							result.Category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Category as Hl7.Fhir.Model.CodeableConcept, reader); // 140
							break;
						case "medicationCodeableConcept":
							result.Medication = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Medication as Hl7.Fhir.Model.CodeableConcept, reader); // 150
							break;
						case "medicationReference":
							result.Medication = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Medication as Hl7.Fhir.Model.ResourceReference, reader); // 150
							break;
						case "subject":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 160
							break;
						case "context":
							result.Context = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Context as Hl7.Fhir.Model.ResourceReference, reader); // 170
							break;
						case "supportingInformation":
							var newItem_supportingInformation = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_supportingInformation, reader); // 180
							result.SupportingInformation.Add(newItem_supportingInformation);
							break;
						case "effectiveDateTime":
							result.Effective = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Effective as Hl7.Fhir.Model.FhirDateTime, reader); // 190
							break;
						case "effectivePeriod":
							result.Effective = new Hl7.Fhir.Model.Period();
							Parse(result.Effective as Hl7.Fhir.Model.Period, reader); // 190
							break;
						case "performer":
							var newItem_performer = new Hl7.Fhir.Model.MedicationAdministration.PerformerComponent();
							Parse(newItem_performer, reader); // 200
							result.Performer.Add(newItem_performer);
							break;
						case "reasonCode":
							var newItem_reasonCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_reasonCode, reader); // 210
							result.ReasonCode.Add(newItem_reasonCode);
							break;
						case "reasonReference":
							var newItem_reasonReference = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_reasonReference, reader); // 220
							result.ReasonReference.Add(newItem_reasonReference);
							break;
						case "request":
							result.Request = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Request as Hl7.Fhir.Model.ResourceReference, reader); // 230
							break;
						case "device":
							var newItem_device = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_device, reader); // 240
							result.Device.Add(newItem_device);
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 250
							result.Note.Add(newItem_note);
							break;
						case "dosage":
							result.Dosage = new Hl7.Fhir.Model.MedicationAdministration.DosageComponent();
							Parse(result.Dosage as Hl7.Fhir.Model.MedicationAdministration.DosageComponent, reader); // 260
							break;
						case "eventHistory":
							var newItem_eventHistory = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_eventHistory, reader); // 270
							result.EventHistory.Add(newItem_eventHistory);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(MedicationDispense result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "partOf":
							var newItem_partOf = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_partOf, reader); // 100
							result.PartOf.Add(newItem_partOf);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.MedicationDispense.MedicationDispenseStatusCodes>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.MedicationDispense.MedicationDispenseStatusCodes>, reader); // 110
							break;
						case "statusReasonCodeableConcept":
							result.StatusReason = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.StatusReason as Hl7.Fhir.Model.CodeableConcept, reader); // 120
							break;
						case "statusReasonReference":
							result.StatusReason = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.StatusReason as Hl7.Fhir.Model.ResourceReference, reader); // 120
							break;
						case "category":
							result.Category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Category as Hl7.Fhir.Model.CodeableConcept, reader); // 130
							break;
						case "medicationCodeableConcept":
							result.Medication = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Medication as Hl7.Fhir.Model.CodeableConcept, reader); // 140
							break;
						case "medicationReference":
							result.Medication = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Medication as Hl7.Fhir.Model.ResourceReference, reader); // 140
							break;
						case "subject":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 150
							break;
						case "context":
							result.Context = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Context as Hl7.Fhir.Model.ResourceReference, reader); // 160
							break;
						case "supportingInformation":
							var newItem_supportingInformation = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_supportingInformation, reader); // 170
							result.SupportingInformation.Add(newItem_supportingInformation);
							break;
						case "performer":
							var newItem_performer = new Hl7.Fhir.Model.MedicationDispense.PerformerComponent();
							Parse(newItem_performer, reader); // 180
							result.Performer.Add(newItem_performer);
							break;
						case "location":
							result.Location = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Location as Hl7.Fhir.Model.ResourceReference, reader); // 190
							break;
						case "authorizingPrescription":
							var newItem_authorizingPrescription = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_authorizingPrescription, reader); // 200
							result.AuthorizingPrescription.Add(newItem_authorizingPrescription);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 210
							break;
						case "quantity":
							result.Quantity = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Quantity as Hl7.Fhir.Model.SimpleQuantity, reader); // 220
							break;
						case "daysSupply":
							result.DaysSupply = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.DaysSupply as Hl7.Fhir.Model.SimpleQuantity, reader); // 230
							break;
						case "whenPrepared":
							result.WhenPreparedElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.WhenPreparedElement as Hl7.Fhir.Model.FhirDateTime, reader); // 240
							break;
						case "whenHandedOver":
							result.WhenHandedOverElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.WhenHandedOverElement as Hl7.Fhir.Model.FhirDateTime, reader); // 250
							break;
						case "destination":
							result.Destination = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Destination as Hl7.Fhir.Model.ResourceReference, reader); // 260
							break;
						case "receiver":
							var newItem_receiver = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_receiver, reader); // 270
							result.Receiver.Add(newItem_receiver);
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 280
							result.Note.Add(newItem_note);
							break;
						case "dosageInstruction":
							var newItem_dosageInstruction = new Hl7.Fhir.Model.Dosage();
							Parse(newItem_dosageInstruction, reader); // 290
							result.DosageInstruction.Add(newItem_dosageInstruction);
							break;
						case "substitution":
							result.Substitution = new Hl7.Fhir.Model.MedicationDispense.SubstitutionComponent();
							Parse(result.Substitution as Hl7.Fhir.Model.MedicationDispense.SubstitutionComponent, reader); // 300
							break;
						case "detectedIssue":
							var newItem_detectedIssue = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_detectedIssue, reader); // 310
							result.DetectedIssue.Add(newItem_detectedIssue);
							break;
						case "eventHistory":
							var newItem_eventHistory = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_eventHistory, reader); // 320
							result.EventHistory.Add(newItem_eventHistory);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(MedicationKnowledge result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 90
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.MedicationKnowledge.MedicationKnowledgeStatusCodes>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.MedicationKnowledge.MedicationKnowledgeStatusCodes>, reader); // 100
							break;
						case "manufacturer":
							result.Manufacturer = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Manufacturer as Hl7.Fhir.Model.ResourceReference, reader); // 110
							break;
						case "doseForm":
							result.DoseForm = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.DoseForm as Hl7.Fhir.Model.CodeableConcept, reader); // 120
							break;
						case "amount":
							result.Amount = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Amount as Hl7.Fhir.Model.SimpleQuantity, reader); // 130
							break;
						case "synonym":
							var newItem_synonym = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_synonym, reader); // 140
							result.SynonymElement.Add(newItem_synonym);
							break;
						case "relatedMedicationKnowledge":
							var newItem_relatedMedicationKnowledge = new Hl7.Fhir.Model.MedicationKnowledge.RelatedMedicationKnowledgeComponent();
							Parse(newItem_relatedMedicationKnowledge, reader); // 150
							result.RelatedMedicationKnowledge.Add(newItem_relatedMedicationKnowledge);
							break;
						case "associatedMedication":
							var newItem_associatedMedication = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_associatedMedication, reader); // 160
							result.AssociatedMedication.Add(newItem_associatedMedication);
							break;
						case "productType":
							var newItem_productType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_productType, reader); // 170
							result.ProductType.Add(newItem_productType);
							break;
						case "monograph":
							var newItem_monograph = new Hl7.Fhir.Model.MedicationKnowledge.MonographComponent();
							Parse(newItem_monograph, reader); // 180
							result.Monograph.Add(newItem_monograph);
							break;
						case "ingredient":
							var newItem_ingredient = new Hl7.Fhir.Model.MedicationKnowledge.IngredientComponent();
							Parse(newItem_ingredient, reader); // 190
							result.Ingredient.Add(newItem_ingredient);
							break;
						case "preparationInstruction":
							result.PreparationInstruction = new Hl7.Fhir.Model.Markdown();
							Parse(result.PreparationInstruction as Hl7.Fhir.Model.Markdown, reader); // 200
							break;
						case "intendedRoute":
							var newItem_intendedRoute = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_intendedRoute, reader); // 210
							result.IntendedRoute.Add(newItem_intendedRoute);
							break;
						case "cost":
							var newItem_cost = new Hl7.Fhir.Model.MedicationKnowledge.CostComponent();
							Parse(newItem_cost, reader); // 220
							result.Cost.Add(newItem_cost);
							break;
						case "monitoringProgram":
							var newItem_monitoringProgram = new Hl7.Fhir.Model.MedicationKnowledge.MonitoringProgramComponent();
							Parse(newItem_monitoringProgram, reader); // 230
							result.MonitoringProgram.Add(newItem_monitoringProgram);
							break;
						case "administrationGuidelines":
							var newItem_administrationGuidelines = new Hl7.Fhir.Model.MedicationKnowledge.AdministrationGuidelinesComponent();
							Parse(newItem_administrationGuidelines, reader); // 240
							result.AdministrationGuidelines.Add(newItem_administrationGuidelines);
							break;
						case "medicineClassification":
							var newItem_medicineClassification = new Hl7.Fhir.Model.MedicationKnowledge.MedicineClassificationComponent();
							Parse(newItem_medicineClassification, reader); // 250
							result.MedicineClassification.Add(newItem_medicineClassification);
							break;
						case "packaging":
							result.Packaging = new Hl7.Fhir.Model.MedicationKnowledge.PackagingComponent();
							Parse(result.Packaging as Hl7.Fhir.Model.MedicationKnowledge.PackagingComponent, reader); // 260
							break;
						case "drugCharacteristic":
							var newItem_drugCharacteristic = new Hl7.Fhir.Model.MedicationKnowledge.DrugCharacteristicComponent();
							Parse(newItem_drugCharacteristic, reader); // 270
							result.DrugCharacteristic.Add(newItem_drugCharacteristic);
							break;
						case "contraindication":
							var newItem_contraindication = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_contraindication, reader); // 280
							result.Contraindication.Add(newItem_contraindication);
							break;
						case "regulatory":
							var newItem_regulatory = new Hl7.Fhir.Model.MedicationKnowledge.RegulatoryComponent();
							Parse(newItem_regulatory, reader); // 290
							result.Regulatory.Add(newItem_regulatory);
							break;
						case "kinetics":
							var newItem_kinetics = new Hl7.Fhir.Model.MedicationKnowledge.KineticsComponent();
							Parse(newItem_kinetics, reader); // 300
							result.Kinetics.Add(newItem_kinetics);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(MedicationRequest result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.MedicationRequest.medicationrequestStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.MedicationRequest.medicationrequestStatus>, reader); // 100
							break;
						case "statusReason":
							result.StatusReason = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.StatusReason as Hl7.Fhir.Model.CodeableConcept, reader); // 110
							break;
						case "intent":
							result.IntentElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.MedicationRequest.medicationRequestIntent>();
							Parse(result.IntentElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.MedicationRequest.medicationRequestIntent>, reader); // 120
							break;
						case "category":
							var newItem_category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_category, reader); // 130
							result.Category.Add(newItem_category);
							break;
						case "priority":
							result.PriorityElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestPriority>();
							Parse(result.PriorityElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestPriority>, reader); // 140
							break;
						case "doNotPerform":
							result.DoNotPerformElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.DoNotPerformElement as Hl7.Fhir.Model.FhirBoolean, reader); // 150
							break;
						case "reportedBoolean":
							result.Reported = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.Reported as Hl7.Fhir.Model.FhirBoolean, reader); // 160
							break;
						case "reportedReference":
							result.Reported = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Reported as Hl7.Fhir.Model.ResourceReference, reader); // 160
							break;
						case "medicationCodeableConcept":
							result.Medication = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Medication as Hl7.Fhir.Model.CodeableConcept, reader); // 170
							break;
						case "medicationReference":
							result.Medication = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Medication as Hl7.Fhir.Model.ResourceReference, reader); // 170
							break;
						case "subject":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 180
							break;
						case "encounter":
							result.Encounter = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Encounter as Hl7.Fhir.Model.ResourceReference, reader); // 190
							break;
						case "supportingInformation":
							var newItem_supportingInformation = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_supportingInformation, reader); // 200
							result.SupportingInformation.Add(newItem_supportingInformation);
							break;
						case "authoredOn":
							result.AuthoredOnElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.AuthoredOnElement as Hl7.Fhir.Model.FhirDateTime, reader); // 210
							break;
						case "requester":
							result.Requester = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Requester as Hl7.Fhir.Model.ResourceReference, reader); // 220
							break;
						case "performer":
							result.Performer = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Performer as Hl7.Fhir.Model.ResourceReference, reader); // 230
							break;
						case "performerType":
							result.PerformerType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.PerformerType as Hl7.Fhir.Model.CodeableConcept, reader); // 240
							break;
						case "recorder":
							result.Recorder = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Recorder as Hl7.Fhir.Model.ResourceReference, reader); // 250
							break;
						case "reasonCode":
							var newItem_reasonCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_reasonCode, reader); // 260
							result.ReasonCode.Add(newItem_reasonCode);
							break;
						case "reasonReference":
							var newItem_reasonReference = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_reasonReference, reader); // 270
							result.ReasonReference.Add(newItem_reasonReference);
							break;
						case "instantiatesCanonical":
							var newItem_instantiatesCanonical = new Hl7.Fhir.Model.Canonical();
							Parse(newItem_instantiatesCanonical, reader); // 280
							result.InstantiatesCanonicalElement.Add(newItem_instantiatesCanonical);
							break;
						case "instantiatesUri":
							var newItem_instantiatesUri = new Hl7.Fhir.Model.FhirUri();
							Parse(newItem_instantiatesUri, reader); // 290
							result.InstantiatesUriElement.Add(newItem_instantiatesUri);
							break;
						case "basedOn":
							var newItem_basedOn = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_basedOn, reader); // 300
							result.BasedOn.Add(newItem_basedOn);
							break;
						case "groupIdentifier":
							result.GroupIdentifier = new Hl7.Fhir.Model.Identifier();
							Parse(result.GroupIdentifier as Hl7.Fhir.Model.Identifier, reader); // 310
							break;
						case "courseOfTherapyType":
							result.CourseOfTherapyType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.CourseOfTherapyType as Hl7.Fhir.Model.CodeableConcept, reader); // 320
							break;
						case "insurance":
							var newItem_insurance = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_insurance, reader); // 330
							result.Insurance.Add(newItem_insurance);
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 340
							result.Note.Add(newItem_note);
							break;
						case "dosageInstruction":
							var newItem_dosageInstruction = new Hl7.Fhir.Model.Dosage();
							Parse(newItem_dosageInstruction, reader); // 350
							result.DosageInstruction.Add(newItem_dosageInstruction);
							break;
						case "dispenseRequest":
							result.DispenseRequest = new Hl7.Fhir.Model.MedicationRequest.DispenseRequestComponent();
							Parse(result.DispenseRequest as Hl7.Fhir.Model.MedicationRequest.DispenseRequestComponent, reader); // 360
							break;
						case "substitution":
							result.Substitution = new Hl7.Fhir.Model.MedicationRequest.SubstitutionComponent();
							Parse(result.Substitution as Hl7.Fhir.Model.MedicationRequest.SubstitutionComponent, reader); // 370
							break;
						case "priorPrescription":
							result.PriorPrescription = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.PriorPrescription as Hl7.Fhir.Model.ResourceReference, reader); // 380
							break;
						case "detectedIssue":
							var newItem_detectedIssue = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_detectedIssue, reader); // 390
							result.DetectedIssue.Add(newItem_detectedIssue);
							break;
						case "eventHistory":
							var newItem_eventHistory = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_eventHistory, reader); // 400
							result.EventHistory.Add(newItem_eventHistory);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(MedicationStatement result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "basedOn":
							var newItem_basedOn = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_basedOn, reader); // 100
							result.BasedOn.Add(newItem_basedOn);
							break;
						case "partOf":
							var newItem_partOf = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_partOf, reader); // 110
							result.PartOf.Add(newItem_partOf);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.MedicationStatement.MedicationStatusCodes>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.MedicationStatement.MedicationStatusCodes>, reader); // 120
							break;
						case "statusReason":
							var newItem_statusReason = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_statusReason, reader); // 130
							result.StatusReason.Add(newItem_statusReason);
							break;
						case "category":
							result.Category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Category as Hl7.Fhir.Model.CodeableConcept, reader); // 140
							break;
						case "medicationCodeableConcept":
							result.Medication = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Medication as Hl7.Fhir.Model.CodeableConcept, reader); // 150
							break;
						case "medicationReference":
							result.Medication = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Medication as Hl7.Fhir.Model.ResourceReference, reader); // 150
							break;
						case "subject":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 160
							break;
						case "context":
							result.Context = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Context as Hl7.Fhir.Model.ResourceReference, reader); // 170
							break;
						case "effectiveDateTime":
							result.Effective = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Effective as Hl7.Fhir.Model.FhirDateTime, reader); // 180
							break;
						case "effectivePeriod":
							result.Effective = new Hl7.Fhir.Model.Period();
							Parse(result.Effective as Hl7.Fhir.Model.Period, reader); // 180
							break;
						case "dateAsserted":
							result.DateAssertedElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateAssertedElement as Hl7.Fhir.Model.FhirDateTime, reader); // 190
							break;
						case "informationSource":
							result.InformationSource = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.InformationSource as Hl7.Fhir.Model.ResourceReference, reader); // 200
							break;
						case "derivedFrom":
							var newItem_derivedFrom = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_derivedFrom, reader); // 210
							result.DerivedFrom.Add(newItem_derivedFrom);
							break;
						case "reasonCode":
							var newItem_reasonCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_reasonCode, reader); // 220
							result.ReasonCode.Add(newItem_reasonCode);
							break;
						case "reasonReference":
							var newItem_reasonReference = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_reasonReference, reader); // 230
							result.ReasonReference.Add(newItem_reasonReference);
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 240
							result.Note.Add(newItem_note);
							break;
						case "dosage":
							var newItem_dosage = new Hl7.Fhir.Model.Dosage();
							Parse(newItem_dosage, reader); // 250
							result.Dosage.Add(newItem_dosage);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(MedicinalProduct result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 100
							break;
						case "domain":
							result.Domain = new Hl7.Fhir.Model.Coding();
							Parse(result.Domain as Hl7.Fhir.Model.Coding, reader); // 110
							break;
						case "combinedPharmaceuticalDoseForm":
							result.CombinedPharmaceuticalDoseForm = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.CombinedPharmaceuticalDoseForm as Hl7.Fhir.Model.CodeableConcept, reader); // 120
							break;
						case "legalStatusOfSupply":
							result.LegalStatusOfSupply = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.LegalStatusOfSupply as Hl7.Fhir.Model.CodeableConcept, reader); // 130
							break;
						case "additionalMonitoringIndicator":
							result.AdditionalMonitoringIndicator = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.AdditionalMonitoringIndicator as Hl7.Fhir.Model.CodeableConcept, reader); // 140
							break;
						case "specialMeasures":
							var newItem_specialMeasures = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_specialMeasures, reader); // 150
							result.SpecialMeasuresElement.Add(newItem_specialMeasures);
							break;
						case "paediatricUseIndicator":
							result.PaediatricUseIndicator = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.PaediatricUseIndicator as Hl7.Fhir.Model.CodeableConcept, reader); // 160
							break;
						case "productClassification":
							var newItem_productClassification = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_productClassification, reader); // 170
							result.ProductClassification.Add(newItem_productClassification);
							break;
						case "marketingStatus":
							var newItem_marketingStatus = new Hl7.Fhir.Model.MarketingStatus();
							Parse(newItem_marketingStatus, reader); // 180
							result.MarketingStatus.Add(newItem_marketingStatus);
							break;
						case "pharmaceuticalProduct":
							var newItem_pharmaceuticalProduct = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_pharmaceuticalProduct, reader); // 190
							result.PharmaceuticalProduct.Add(newItem_pharmaceuticalProduct);
							break;
						case "packagedMedicinalProduct":
							var newItem_packagedMedicinalProduct = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_packagedMedicinalProduct, reader); // 200
							result.PackagedMedicinalProduct.Add(newItem_packagedMedicinalProduct);
							break;
						case "attachedDocument":
							var newItem_attachedDocument = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_attachedDocument, reader); // 210
							result.AttachedDocument.Add(newItem_attachedDocument);
							break;
						case "masterFile":
							var newItem_masterFile = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_masterFile, reader); // 220
							result.MasterFile.Add(newItem_masterFile);
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_contact, reader); // 230
							result.Contact.Add(newItem_contact);
							break;
						case "clinicalTrial":
							var newItem_clinicalTrial = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_clinicalTrial, reader); // 240
							result.ClinicalTrial.Add(newItem_clinicalTrial);
							break;
						case "name":
							var newItem_name = new Hl7.Fhir.Model.MedicinalProduct.NameComponent();
							Parse(newItem_name, reader); // 250
							result.Name.Add(newItem_name);
							break;
						case "crossReference":
							var newItem_crossReference = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_crossReference, reader); // 260
							result.CrossReference.Add(newItem_crossReference);
							break;
						case "manufacturingBusinessOperation":
							var newItem_manufacturingBusinessOperation = new Hl7.Fhir.Model.MedicinalProduct.ManufacturingBusinessOperationComponent();
							Parse(newItem_manufacturingBusinessOperation, reader); // 270
							result.ManufacturingBusinessOperation.Add(newItem_manufacturingBusinessOperation);
							break;
						case "specialDesignation":
							var newItem_specialDesignation = new Hl7.Fhir.Model.MedicinalProduct.SpecialDesignationComponent();
							Parse(newItem_specialDesignation, reader); // 280
							result.SpecialDesignation.Add(newItem_specialDesignation);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(MedicinalProductAuthorization result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "subject":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 100
							break;
						case "country":
							var newItem_country = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_country, reader); // 110
							result.Country.Add(newItem_country);
							break;
						case "jurisdiction":
							var newItem_jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_jurisdiction, reader); // 120
							result.Jurisdiction.Add(newItem_jurisdiction);
							break;
						case "status":
							result.Status = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Status as Hl7.Fhir.Model.CodeableConcept, reader); // 130
							break;
						case "statusDate":
							result.StatusDateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.StatusDateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 140
							break;
						case "restoreDate":
							result.RestoreDateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.RestoreDateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 150
							break;
						case "validityPeriod":
							result.ValidityPeriod = new Hl7.Fhir.Model.Period();
							Parse(result.ValidityPeriod as Hl7.Fhir.Model.Period, reader); // 160
							break;
						case "dataExclusivityPeriod":
							result.DataExclusivityPeriod = new Hl7.Fhir.Model.Period();
							Parse(result.DataExclusivityPeriod as Hl7.Fhir.Model.Period, reader); // 170
							break;
						case "dateOfFirstAuthorization":
							result.DateOfFirstAuthorizationElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateOfFirstAuthorizationElement as Hl7.Fhir.Model.FhirDateTime, reader); // 180
							break;
						case "internationalBirthDate":
							result.InternationalBirthDateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.InternationalBirthDateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 190
							break;
						case "legalBasis":
							result.LegalBasis = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.LegalBasis as Hl7.Fhir.Model.CodeableConcept, reader); // 200
							break;
						case "jurisdictionalAuthorization":
							var newItem_jurisdictionalAuthorization = new Hl7.Fhir.Model.MedicinalProductAuthorization.JurisdictionalAuthorizationComponent();
							Parse(newItem_jurisdictionalAuthorization, reader); // 210
							result.JurisdictionalAuthorization.Add(newItem_jurisdictionalAuthorization);
							break;
						case "holder":
							result.Holder = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Holder as Hl7.Fhir.Model.ResourceReference, reader); // 220
							break;
						case "regulator":
							result.Regulator = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Regulator as Hl7.Fhir.Model.ResourceReference, reader); // 230
							break;
						case "procedure":
							result.Procedure = new Hl7.Fhir.Model.MedicinalProductAuthorization.ProcedureComponent();
							Parse(result.Procedure as Hl7.Fhir.Model.MedicinalProductAuthorization.ProcedureComponent, reader); // 240
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(MedicinalProductContraindication result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "subject":
							var newItem_subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_subject, reader); // 90
							result.Subject.Add(newItem_subject);
							break;
						case "disease":
							result.Disease = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Disease as Hl7.Fhir.Model.CodeableConcept, reader); // 100
							break;
						case "diseaseStatus":
							result.DiseaseStatus = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.DiseaseStatus as Hl7.Fhir.Model.CodeableConcept, reader); // 110
							break;
						case "comorbidity":
							var newItem_comorbidity = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_comorbidity, reader); // 120
							result.Comorbidity.Add(newItem_comorbidity);
							break;
						case "therapeuticIndication":
							var newItem_therapeuticIndication = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_therapeuticIndication, reader); // 130
							result.TherapeuticIndication.Add(newItem_therapeuticIndication);
							break;
						case "otherTherapy":
							var newItem_otherTherapy = new Hl7.Fhir.Model.MedicinalProductContraindication.OtherTherapyComponent();
							Parse(newItem_otherTherapy, reader); // 140
							result.OtherTherapy.Add(newItem_otherTherapy);
							break;
						case "population":
							var newItem_population = new Hl7.Fhir.Model.Population();
							Parse(newItem_population, reader); // 150
							result.Population.Add(newItem_population);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(MedicinalProductIndication result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "subject":
							var newItem_subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_subject, reader); // 90
							result.Subject.Add(newItem_subject);
							break;
						case "diseaseSymptomProcedure":
							result.DiseaseSymptomProcedure = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.DiseaseSymptomProcedure as Hl7.Fhir.Model.CodeableConcept, reader); // 100
							break;
						case "diseaseStatus":
							result.DiseaseStatus = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.DiseaseStatus as Hl7.Fhir.Model.CodeableConcept, reader); // 110
							break;
						case "comorbidity":
							var newItem_comorbidity = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_comorbidity, reader); // 120
							result.Comorbidity.Add(newItem_comorbidity);
							break;
						case "intendedEffect":
							result.IntendedEffect = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.IntendedEffect as Hl7.Fhir.Model.CodeableConcept, reader); // 130
							break;
						case "duration":
							result.Duration = new Hl7.Fhir.Model.Quantity();
							Parse(result.Duration as Hl7.Fhir.Model.Quantity, reader); // 140
							break;
						case "otherTherapy":
							var newItem_otherTherapy = new Hl7.Fhir.Model.MedicinalProductIndication.OtherTherapyComponent();
							Parse(newItem_otherTherapy, reader); // 150
							result.OtherTherapy.Add(newItem_otherTherapy);
							break;
						case "undesirableEffect":
							var newItem_undesirableEffect = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_undesirableEffect, reader); // 160
							result.UndesirableEffect.Add(newItem_undesirableEffect);
							break;
						case "population":
							var newItem_population = new Hl7.Fhir.Model.Population();
							Parse(newItem_population, reader); // 170
							result.Population.Add(newItem_population);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(MedicinalProductIngredient result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							result.Identifier = new Hl7.Fhir.Model.Identifier();
							Parse(result.Identifier as Hl7.Fhir.Model.Identifier, reader); // 90
							break;
						case "role":
							result.Role = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Role as Hl7.Fhir.Model.CodeableConcept, reader); // 100
							break;
						case "allergenicIndicator":
							result.AllergenicIndicatorElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.AllergenicIndicatorElement as Hl7.Fhir.Model.FhirBoolean, reader); // 110
							break;
						case "manufacturer":
							var newItem_manufacturer = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_manufacturer, reader); // 120
							result.Manufacturer.Add(newItem_manufacturer);
							break;
						case "specifiedSubstance":
							var newItem_specifiedSubstance = new Hl7.Fhir.Model.MedicinalProductIngredient.SpecifiedSubstanceComponent();
							Parse(newItem_specifiedSubstance, reader); // 130
							result.SpecifiedSubstance.Add(newItem_specifiedSubstance);
							break;
						case "substance":
							result.Substance = new Hl7.Fhir.Model.MedicinalProductIngredient.SubstanceComponent();
							Parse(result.Substance as Hl7.Fhir.Model.MedicinalProductIngredient.SubstanceComponent, reader); // 140
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(MedicinalProductInteraction result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "subject":
							var newItem_subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_subject, reader); // 90
							result.Subject.Add(newItem_subject);
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 100
							break;
						case "interactant":
							var newItem_interactant = new Hl7.Fhir.Model.MedicinalProductInteraction.InteractantComponent();
							Parse(newItem_interactant, reader); // 110
							result.Interactant.Add(newItem_interactant);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 120
							break;
						case "effect":
							result.Effect = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Effect as Hl7.Fhir.Model.CodeableConcept, reader); // 130
							break;
						case "incidence":
							result.Incidence = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Incidence as Hl7.Fhir.Model.CodeableConcept, reader); // 140
							break;
						case "management":
							result.Management = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Management as Hl7.Fhir.Model.CodeableConcept, reader); // 150
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(MedicinalProductManufactured result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "manufacturedDoseForm":
							result.ManufacturedDoseForm = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.ManufacturedDoseForm as Hl7.Fhir.Model.CodeableConcept, reader); // 90
							break;
						case "unitOfPresentation":
							result.UnitOfPresentation = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.UnitOfPresentation as Hl7.Fhir.Model.CodeableConcept, reader); // 100
							break;
						case "quantity":
							result.Quantity = new Hl7.Fhir.Model.Quantity();
							Parse(result.Quantity as Hl7.Fhir.Model.Quantity, reader); // 110
							break;
						case "manufacturer":
							var newItem_manufacturer = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_manufacturer, reader); // 120
							result.Manufacturer.Add(newItem_manufacturer);
							break;
						case "ingredient":
							var newItem_ingredient = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_ingredient, reader); // 130
							result.Ingredient.Add(newItem_ingredient);
							break;
						case "physicalCharacteristics":
							result.PhysicalCharacteristics = new Hl7.Fhir.Model.ProdCharacteristic();
							Parse(result.PhysicalCharacteristics as Hl7.Fhir.Model.ProdCharacteristic, reader); // 140
							break;
						case "otherCharacteristics":
							var newItem_otherCharacteristics = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_otherCharacteristics, reader); // 150
							result.OtherCharacteristics.Add(newItem_otherCharacteristics);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(MedicinalProductPackaged result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "subject":
							var newItem_subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_subject, reader); // 100
							result.Subject.Add(newItem_subject);
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "legalStatusOfSupply":
							result.LegalStatusOfSupply = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.LegalStatusOfSupply as Hl7.Fhir.Model.CodeableConcept, reader); // 120
							break;
						case "marketingStatus":
							var newItem_marketingStatus = new Hl7.Fhir.Model.MarketingStatus();
							Parse(newItem_marketingStatus, reader); // 130
							result.MarketingStatus.Add(newItem_marketingStatus);
							break;
						case "marketingAuthorization":
							result.MarketingAuthorization = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.MarketingAuthorization as Hl7.Fhir.Model.ResourceReference, reader); // 140
							break;
						case "manufacturer":
							var newItem_manufacturer = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_manufacturer, reader); // 150
							result.Manufacturer.Add(newItem_manufacturer);
							break;
						case "batchIdentifier":
							var newItem_batchIdentifier = new Hl7.Fhir.Model.MedicinalProductPackaged.BatchIdentifierComponent();
							Parse(newItem_batchIdentifier, reader); // 160
							result.BatchIdentifier.Add(newItem_batchIdentifier);
							break;
						case "packageItem":
							var newItem_packageItem = new Hl7.Fhir.Model.MedicinalProductPackaged.PackageItemComponent();
							Parse(newItem_packageItem, reader); // 170
							result.PackageItem.Add(newItem_packageItem);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(MedicinalProductPharmaceutical result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "administrableDoseForm":
							result.AdministrableDoseForm = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.AdministrableDoseForm as Hl7.Fhir.Model.CodeableConcept, reader); // 100
							break;
						case "unitOfPresentation":
							result.UnitOfPresentation = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.UnitOfPresentation as Hl7.Fhir.Model.CodeableConcept, reader); // 110
							break;
						case "ingredient":
							var newItem_ingredient = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_ingredient, reader); // 120
							result.Ingredient.Add(newItem_ingredient);
							break;
						case "device":
							var newItem_device = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_device, reader); // 130
							result.Device.Add(newItem_device);
							break;
						case "characteristics":
							var newItem_characteristics = new Hl7.Fhir.Model.MedicinalProductPharmaceutical.CharacteristicsComponent();
							Parse(newItem_characteristics, reader); // 140
							result.Characteristics.Add(newItem_characteristics);
							break;
						case "routeOfAdministration":
							var newItem_routeOfAdministration = new Hl7.Fhir.Model.MedicinalProductPharmaceutical.RouteOfAdministrationComponent();
							Parse(newItem_routeOfAdministration, reader); // 150
							result.RouteOfAdministration.Add(newItem_routeOfAdministration);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(MedicinalProductUndesirableEffect result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "subject":
							var newItem_subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_subject, reader); // 90
							result.Subject.Add(newItem_subject);
							break;
						case "symptomConditionEffect":
							result.SymptomConditionEffect = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.SymptomConditionEffect as Hl7.Fhir.Model.CodeableConcept, reader); // 100
							break;
						case "classification":
							result.Classification = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Classification as Hl7.Fhir.Model.CodeableConcept, reader); // 110
							break;
						case "frequencyOfOccurrence":
							result.FrequencyOfOccurrence = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.FrequencyOfOccurrence as Hl7.Fhir.Model.CodeableConcept, reader); // 120
							break;
						case "population":
							var newItem_population = new Hl7.Fhir.Model.Population();
							Parse(newItem_population, reader); // 130
							result.Population.Add(newItem_population);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(MessageDefinition result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUri, reader); // 90
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 100
							result.Identifier.Add(newItem_identifier);
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 130
							break;
						case "replaces":
							var newItem_replaces = new Hl7.Fhir.Model.Canonical();
							Parse(newItem_replaces, reader); // 140
							result.ReplacesElement.Add(newItem_replaces);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>, reader); // 150
							break;
						case "experimental":
							result.ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ExperimentalElement as Hl7.Fhir.Model.FhirBoolean, reader); // 160
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 170
							break;
						case "publisher":
							result.PublisherElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PublisherElement as Hl7.Fhir.Model.FhirString, reader); // 180
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_contact, reader); // 190
							result.Contact.Add(newItem_contact);
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.Markdown();
							Parse(result.Description as Hl7.Fhir.Model.Markdown, reader); // 200
							break;
						case "useContext":
							var newItem_useContext = new Hl7.Fhir.Model.UsageContext();
							Parse(newItem_useContext, reader); // 210
							result.UseContext.Add(newItem_useContext);
							break;
						case "jurisdiction":
							var newItem_jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_jurisdiction, reader); // 220
							result.Jurisdiction.Add(newItem_jurisdiction);
							break;
						case "purpose":
							result.Purpose = new Hl7.Fhir.Model.Markdown();
							Parse(result.Purpose as Hl7.Fhir.Model.Markdown, reader); // 230
							break;
						case "copyright":
							result.Copyright = new Hl7.Fhir.Model.Markdown();
							Parse(result.Copyright as Hl7.Fhir.Model.Markdown, reader); // 240
							break;
						case "base":
							result.BaseElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.BaseElement as Hl7.Fhir.Model.Canonical, reader); // 250
							break;
						case "parent":
							var newItem_parent = new Hl7.Fhir.Model.Canonical();
							Parse(newItem_parent, reader); // 260
							result.ParentElement.Add(newItem_parent);
							break;
						case "eventCoding":
							result.Event = new Hl7.Fhir.Model.Coding();
							Parse(result.Event as Hl7.Fhir.Model.Coding, reader); // 270
							break;
						case "eventUri":
							result.Event = new Hl7.Fhir.Model.FhirUri();
							Parse(result.Event as Hl7.Fhir.Model.FhirUri, reader); // 270
							break;
						case "category":
							result.CategoryElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.MessageDefinition.MessageSignificanceCategory>();
							Parse(result.CategoryElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.MessageDefinition.MessageSignificanceCategory>, reader); // 280
							break;
						case "focus":
							var newItem_focus = new Hl7.Fhir.Model.MessageDefinition.FocusComponent();
							Parse(newItem_focus, reader); // 290
							result.Focus.Add(newItem_focus);
							break;
						case "responseRequired":
							result.ResponseRequiredElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.MessageDefinition.messageheader_response_request>();
							Parse(result.ResponseRequiredElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.MessageDefinition.messageheader_response_request>, reader); // 300
							break;
						case "allowedResponse":
							var newItem_allowedResponse = new Hl7.Fhir.Model.MessageDefinition.AllowedResponseComponent();
							Parse(newItem_allowedResponse, reader); // 310
							result.AllowedResponse.Add(newItem_allowedResponse);
							break;
						case "graph":
							var newItem_graph = new Hl7.Fhir.Model.Canonical();
							Parse(newItem_graph, reader); // 320
							result.GraphElement.Add(newItem_graph);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(MessageHeader result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "eventCoding":
							result.Event = new Hl7.Fhir.Model.Coding();
							Parse(result.Event as Hl7.Fhir.Model.Coding, reader); // 90
							break;
						case "eventUri":
							result.Event = new Hl7.Fhir.Model.FhirUri();
							Parse(result.Event as Hl7.Fhir.Model.FhirUri, reader); // 90
							break;
						case "destination":
							var newItem_destination = new Hl7.Fhir.Model.MessageHeader.MessageDestinationComponent();
							Parse(newItem_destination, reader); // 100
							result.Destination.Add(newItem_destination);
							break;
						case "sender":
							result.Sender = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Sender as Hl7.Fhir.Model.ResourceReference, reader); // 110
							break;
						case "enterer":
							result.Enterer = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Enterer as Hl7.Fhir.Model.ResourceReference, reader); // 120
							break;
						case "author":
							result.Author = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Author as Hl7.Fhir.Model.ResourceReference, reader); // 130
							break;
						case "source":
							result.Source = new Hl7.Fhir.Model.MessageHeader.MessageSourceComponent();
							Parse(result.Source as Hl7.Fhir.Model.MessageHeader.MessageSourceComponent, reader); // 140
							break;
						case "responsible":
							result.Responsible = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Responsible as Hl7.Fhir.Model.ResourceReference, reader); // 150
							break;
						case "reason":
							result.Reason = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Reason as Hl7.Fhir.Model.CodeableConcept, reader); // 160
							break;
						case "response":
							result.Response = new Hl7.Fhir.Model.MessageHeader.ResponseComponent();
							Parse(result.Response as Hl7.Fhir.Model.MessageHeader.ResponseComponent, reader); // 170
							break;
						case "focus":
							var newItem_focus = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_focus, reader); // 180
							result.Focus.Add(newItem_focus);
							break;
						case "definition":
							result.DefinitionElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.DefinitionElement as Hl7.Fhir.Model.Canonical, reader); // 190
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(MolecularSequence result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.MolecularSequence.sequenceType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.MolecularSequence.sequenceType>, reader); // 100
							break;
						case "coordinateSystem":
							result.CoordinateSystemElement = new Hl7.Fhir.Model.Integer();
							Parse(result.CoordinateSystemElement as Hl7.Fhir.Model.Integer, reader); // 110
							break;
						case "patient":
							result.Patient = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Patient as Hl7.Fhir.Model.ResourceReference, reader); // 120
							break;
						case "specimen":
							result.Specimen = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Specimen as Hl7.Fhir.Model.ResourceReference, reader); // 130
							break;
						case "device":
							result.Device = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Device as Hl7.Fhir.Model.ResourceReference, reader); // 140
							break;
						case "performer":
							result.Performer = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Performer as Hl7.Fhir.Model.ResourceReference, reader); // 150
							break;
						case "quantity":
							result.Quantity = new Hl7.Fhir.Model.Quantity();
							Parse(result.Quantity as Hl7.Fhir.Model.Quantity, reader); // 160
							break;
						case "referenceSeq":
							result.ReferenceSeq = new Hl7.Fhir.Model.MolecularSequence.ReferenceSeqComponent();
							Parse(result.ReferenceSeq as Hl7.Fhir.Model.MolecularSequence.ReferenceSeqComponent, reader); // 170
							break;
						case "variant":
							var newItem_variant = new Hl7.Fhir.Model.MolecularSequence.VariantComponent();
							Parse(newItem_variant, reader); // 180
							result.Variant.Add(newItem_variant);
							break;
						case "observedSeq":
							result.ObservedSeqElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ObservedSeqElement as Hl7.Fhir.Model.FhirString, reader); // 190
							break;
						case "quality":
							var newItem_quality = new Hl7.Fhir.Model.MolecularSequence.QualityComponent();
							Parse(newItem_quality, reader); // 200
							result.Quality.Add(newItem_quality);
							break;
						case "readCoverage":
							result.ReadCoverageElement = new Hl7.Fhir.Model.Integer();
							Parse(result.ReadCoverageElement as Hl7.Fhir.Model.Integer, reader); // 210
							break;
						case "repository":
							var newItem_repository = new Hl7.Fhir.Model.MolecularSequence.RepositoryComponent();
							Parse(newItem_repository, reader); // 220
							result.Repository.Add(newItem_repository);
							break;
						case "pointer":
							var newItem_pointer = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_pointer, reader); // 230
							result.Pointer.Add(newItem_pointer);
							break;
						case "structureVariant":
							var newItem_structureVariant = new Hl7.Fhir.Model.MolecularSequence.StructureVariantComponent();
							Parse(newItem_structureVariant, reader); // 240
							result.StructureVariant.Add(newItem_structureVariant);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(NamingSystem result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 90
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>, reader); // 100
							break;
						case "kind":
							result.KindElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.NamingSystem.NamingSystemType>();
							Parse(result.KindElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.NamingSystem.NamingSystemType>, reader); // 110
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 120
							break;
						case "publisher":
							result.PublisherElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PublisherElement as Hl7.Fhir.Model.FhirString, reader); // 130
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_contact, reader); // 140
							result.Contact.Add(newItem_contact);
							break;
						case "responsible":
							result.ResponsibleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ResponsibleElement as Hl7.Fhir.Model.FhirString, reader); // 150
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 160
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.Markdown();
							Parse(result.Description as Hl7.Fhir.Model.Markdown, reader); // 170
							break;
						case "useContext":
							var newItem_useContext = new Hl7.Fhir.Model.UsageContext();
							Parse(newItem_useContext, reader); // 180
							result.UseContext.Add(newItem_useContext);
							break;
						case "jurisdiction":
							var newItem_jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_jurisdiction, reader); // 190
							result.Jurisdiction.Add(newItem_jurisdiction);
							break;
						case "usage":
							result.UsageElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.UsageElement as Hl7.Fhir.Model.FhirString, reader); // 200
							break;
						case "uniqueId":
							var newItem_uniqueId = new Hl7.Fhir.Model.NamingSystem.UniqueIdComponent();
							Parse(newItem_uniqueId, reader); // 210
							result.UniqueId.Add(newItem_uniqueId);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(NutritionOrder result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "instantiatesCanonical":
							var newItem_instantiatesCanonical = new Hl7.Fhir.Model.Canonical();
							Parse(newItem_instantiatesCanonical, reader); // 100
							result.InstantiatesCanonicalElement.Add(newItem_instantiatesCanonical);
							break;
						case "instantiatesUri":
							var newItem_instantiatesUri = new Hl7.Fhir.Model.FhirUri();
							Parse(newItem_instantiatesUri, reader); // 110
							result.InstantiatesUriElement.Add(newItem_instantiatesUri);
							break;
						case "instantiates":
							var newItem_instantiates = new Hl7.Fhir.Model.FhirUri();
							Parse(newItem_instantiates, reader); // 120
							result.InstantiatesElement.Add(newItem_instantiates);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestStatus>, reader); // 130
							break;
						case "intent":
							result.IntentElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestIntent>();
							Parse(result.IntentElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestIntent>, reader); // 140
							break;
						case "patient":
							result.Patient = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Patient as Hl7.Fhir.Model.ResourceReference, reader); // 150
							break;
						case "encounter":
							result.Encounter = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Encounter as Hl7.Fhir.Model.ResourceReference, reader); // 160
							break;
						case "dateTime":
							result.DateTimeElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateTimeElement as Hl7.Fhir.Model.FhirDateTime, reader); // 170
							break;
						case "orderer":
							result.Orderer = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Orderer as Hl7.Fhir.Model.ResourceReference, reader); // 180
							break;
						case "allergyIntolerance":
							var newItem_allergyIntolerance = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_allergyIntolerance, reader); // 190
							result.AllergyIntolerance.Add(newItem_allergyIntolerance);
							break;
						case "foodPreferenceModifier":
							var newItem_foodPreferenceModifier = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_foodPreferenceModifier, reader); // 200
							result.FoodPreferenceModifier.Add(newItem_foodPreferenceModifier);
							break;
						case "excludeFoodModifier":
							var newItem_excludeFoodModifier = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_excludeFoodModifier, reader); // 210
							result.ExcludeFoodModifier.Add(newItem_excludeFoodModifier);
							break;
						case "oralDiet":
							result.OralDiet = new Hl7.Fhir.Model.NutritionOrder.OralDietComponent();
							Parse(result.OralDiet as Hl7.Fhir.Model.NutritionOrder.OralDietComponent, reader); // 220
							break;
						case "supplement":
							var newItem_supplement = new Hl7.Fhir.Model.NutritionOrder.SupplementComponent();
							Parse(newItem_supplement, reader); // 230
							result.Supplement.Add(newItem_supplement);
							break;
						case "enteralFormula":
							result.EnteralFormula = new Hl7.Fhir.Model.NutritionOrder.EnteralFormulaComponent();
							Parse(result.EnteralFormula as Hl7.Fhir.Model.NutritionOrder.EnteralFormulaComponent, reader); // 240
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 250
							result.Note.Add(newItem_note);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Observation result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "basedOn":
							var newItem_basedOn = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_basedOn, reader); // 100
							result.BasedOn.Add(newItem_basedOn);
							break;
						case "partOf":
							var newItem_partOf = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_partOf, reader); // 110
							result.PartOf.Add(newItem_partOf);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ObservationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ObservationStatus>, reader); // 120
							break;
						case "category":
							var newItem_category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_category, reader); // 130
							result.Category.Add(newItem_category);
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 140
							break;
						case "subject":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 150
							break;
						case "focus":
							var newItem_focus = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_focus, reader); // 160
							result.Focus.Add(newItem_focus);
							break;
						case "encounter":
							result.Encounter = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Encounter as Hl7.Fhir.Model.ResourceReference, reader); // 170
							break;
						case "effectiveDateTime":
							result.Effective = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Effective as Hl7.Fhir.Model.FhirDateTime, reader); // 180
							break;
						case "effectivePeriod":
							result.Effective = new Hl7.Fhir.Model.Period();
							Parse(result.Effective as Hl7.Fhir.Model.Period, reader); // 180
							break;
						case "effectiveTiming":
							result.Effective = new Hl7.Fhir.Model.Timing();
							Parse(result.Effective as Hl7.Fhir.Model.Timing, reader); // 180
							break;
						case "effectiveInstant":
							result.Effective = new Hl7.Fhir.Model.Instant();
							Parse(result.Effective as Hl7.Fhir.Model.Instant, reader); // 180
							break;
						case "issued":
							result.IssuedElement = new Hl7.Fhir.Model.Instant();
							Parse(result.IssuedElement as Hl7.Fhir.Model.Instant, reader); // 190
							break;
						case "performer":
							var newItem_performer = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_performer, reader); // 200
							result.Performer.Add(newItem_performer);
							break;
						case "valueQuantity":
							result.Value = new Hl7.Fhir.Model.Quantity();
							Parse(result.Value as Hl7.Fhir.Model.Quantity, reader); // 210
							break;
						case "valueCodeableConcept":
							result.Value = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Value as Hl7.Fhir.Model.CodeableConcept, reader); // 210
							break;
						case "valueString":
							result.Value = new Hl7.Fhir.Model.FhirString();
							Parse(result.Value as Hl7.Fhir.Model.FhirString, reader); // 210
							break;
						case "valueBoolean":
							result.Value = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.Value as Hl7.Fhir.Model.FhirBoolean, reader); // 210
							break;
						case "valueInteger":
							result.Value = new Hl7.Fhir.Model.Integer();
							Parse(result.Value as Hl7.Fhir.Model.Integer, reader); // 210
							break;
						case "valueRange":
							result.Value = new Hl7.Fhir.Model.Range();
							Parse(result.Value as Hl7.Fhir.Model.Range, reader); // 210
							break;
						case "valueRatio":
							result.Value = new Hl7.Fhir.Model.Ratio();
							Parse(result.Value as Hl7.Fhir.Model.Ratio, reader); // 210
							break;
						case "valueSampledData":
							result.Value = new Hl7.Fhir.Model.SampledData();
							Parse(result.Value as Hl7.Fhir.Model.SampledData, reader); // 210
							break;
						case "valueTime":
							result.Value = new Hl7.Fhir.Model.Time();
							Parse(result.Value as Hl7.Fhir.Model.Time, reader); // 210
							break;
						case "valueDateTime":
							result.Value = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Value as Hl7.Fhir.Model.FhirDateTime, reader); // 210
							break;
						case "valuePeriod":
							result.Value = new Hl7.Fhir.Model.Period();
							Parse(result.Value as Hl7.Fhir.Model.Period, reader); // 210
							break;
						case "dataAbsentReason":
							result.DataAbsentReason = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.DataAbsentReason as Hl7.Fhir.Model.CodeableConcept, reader); // 220
							break;
						case "interpretation":
							var newItem_interpretation = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_interpretation, reader); // 230
							result.Interpretation.Add(newItem_interpretation);
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 240
							result.Note.Add(newItem_note);
							break;
						case "bodySite":
							result.BodySite = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.BodySite as Hl7.Fhir.Model.CodeableConcept, reader); // 250
							break;
						case "method":
							result.Method = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Method as Hl7.Fhir.Model.CodeableConcept, reader); // 260
							break;
						case "specimen":
							result.Specimen = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Specimen as Hl7.Fhir.Model.ResourceReference, reader); // 270
							break;
						case "device":
							result.Device = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Device as Hl7.Fhir.Model.ResourceReference, reader); // 280
							break;
						case "referenceRange":
							var newItem_referenceRange = new Hl7.Fhir.Model.Observation.ReferenceRangeComponent();
							Parse(newItem_referenceRange, reader); // 290
							result.ReferenceRange.Add(newItem_referenceRange);
							break;
						case "hasMember":
							var newItem_hasMember = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_hasMember, reader); // 300
							result.HasMember.Add(newItem_hasMember);
							break;
						case "derivedFrom":
							var newItem_derivedFrom = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_derivedFrom, reader); // 310
							result.DerivedFrom.Add(newItem_derivedFrom);
							break;
						case "component":
							var newItem_component = new Hl7.Fhir.Model.Observation.ComponentComponent();
							Parse(newItem_component, reader); // 320
							result.Component.Add(newItem_component);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(ObservationDefinition result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "category":
							var newItem_category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_category, reader); // 90
							result.Category.Add(newItem_category);
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 100
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 110
							result.Identifier.Add(newItem_identifier);
							break;
						case "permittedDataType":
							var newItem_permittedDataType = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ObservationDefinition.ObservationDataType>();
							Parse(newItem_permittedDataType, reader); // 120
							result.PermittedDataTypeElement.Add(newItem_permittedDataType);
							break;
						case "multipleResultsAllowed":
							result.MultipleResultsAllowedElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.MultipleResultsAllowedElement as Hl7.Fhir.Model.FhirBoolean, reader); // 130
							break;
						case "method":
							result.Method = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Method as Hl7.Fhir.Model.CodeableConcept, reader); // 140
							break;
						case "preferredReportName":
							result.PreferredReportNameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PreferredReportNameElement as Hl7.Fhir.Model.FhirString, reader); // 150
							break;
						case "quantitativeDetails":
							result.QuantitativeDetails = new Hl7.Fhir.Model.ObservationDefinition.QuantitativeDetailsComponent();
							Parse(result.QuantitativeDetails as Hl7.Fhir.Model.ObservationDefinition.QuantitativeDetailsComponent, reader); // 160
							break;
						case "qualifiedInterval":
							var newItem_qualifiedInterval = new Hl7.Fhir.Model.ObservationDefinition.QualifiedIntervalComponent();
							Parse(newItem_qualifiedInterval, reader); // 170
							result.QualifiedInterval.Add(newItem_qualifiedInterval);
							break;
						case "validCodedValueSet":
							result.ValidCodedValueSet = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.ValidCodedValueSet as Hl7.Fhir.Model.ResourceReference, reader); // 180
							break;
						case "normalCodedValueSet":
							result.NormalCodedValueSet = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.NormalCodedValueSet as Hl7.Fhir.Model.ResourceReference, reader); // 190
							break;
						case "abnormalCodedValueSet":
							result.AbnormalCodedValueSet = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.AbnormalCodedValueSet as Hl7.Fhir.Model.ResourceReference, reader); // 200
							break;
						case "criticalCodedValueSet":
							result.CriticalCodedValueSet = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.CriticalCodedValueSet as Hl7.Fhir.Model.ResourceReference, reader); // 210
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(OperationDefinition result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUri, reader); // 90
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 100
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>, reader); // 130
							break;
						case "kind":
							result.KindElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.OperationDefinition.OperationKind>();
							Parse(result.KindElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.OperationDefinition.OperationKind>, reader); // 140
							break;
						case "experimental":
							result.ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ExperimentalElement as Hl7.Fhir.Model.FhirBoolean, reader); // 150
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 160
							break;
						case "publisher":
							result.PublisherElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PublisherElement as Hl7.Fhir.Model.FhirString, reader); // 170
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_contact, reader); // 180
							result.Contact.Add(newItem_contact);
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.Markdown();
							Parse(result.Description as Hl7.Fhir.Model.Markdown, reader); // 190
							break;
						case "useContext":
							var newItem_useContext = new Hl7.Fhir.Model.UsageContext();
							Parse(newItem_useContext, reader); // 200
							result.UseContext.Add(newItem_useContext);
							break;
						case "jurisdiction":
							var newItem_jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_jurisdiction, reader); // 210
							result.Jurisdiction.Add(newItem_jurisdiction);
							break;
						case "purpose":
							result.Purpose = new Hl7.Fhir.Model.Markdown();
							Parse(result.Purpose as Hl7.Fhir.Model.Markdown, reader); // 220
							break;
						case "affectsState":
							result.AffectsStateElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.AffectsStateElement as Hl7.Fhir.Model.FhirBoolean, reader); // 230
							break;
						case "code":
							result.CodeElement = new Hl7.Fhir.Model.Code();
							Parse(result.CodeElement as Hl7.Fhir.Model.Code, reader); // 240
							break;
						case "comment":
							result.Comment = new Hl7.Fhir.Model.Markdown();
							Parse(result.Comment as Hl7.Fhir.Model.Markdown, reader); // 250
							break;
						case "base":
							result.BaseElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.BaseElement as Hl7.Fhir.Model.Canonical, reader); // 260
							break;
						case "resource":
							var newItem_resource = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ResourceType>();
							Parse(newItem_resource, reader); // 270
							result.ResourceElement.Add(newItem_resource);
							break;
						case "system":
							result.SystemElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.SystemElement as Hl7.Fhir.Model.FhirBoolean, reader); // 280
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.TypeElement as Hl7.Fhir.Model.FhirBoolean, reader); // 290
							break;
						case "instance":
							result.InstanceElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.InstanceElement as Hl7.Fhir.Model.FhirBoolean, reader); // 300
							break;
						case "inputProfile":
							result.InputProfileElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.InputProfileElement as Hl7.Fhir.Model.Canonical, reader); // 310
							break;
						case "outputProfile":
							result.OutputProfileElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.OutputProfileElement as Hl7.Fhir.Model.Canonical, reader); // 320
							break;
						case "parameter":
							var newItem_parameter = new Hl7.Fhir.Model.OperationDefinition.ParameterComponent();
							Parse(newItem_parameter, reader); // 330
							result.Parameter.Add(newItem_parameter);
							break;
						case "overload":
							var newItem_overload = new Hl7.Fhir.Model.OperationDefinition.OverloadComponent();
							Parse(newItem_overload, reader); // 340
							result.Overload.Add(newItem_overload);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(OperationOutcome result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "issue":
							var newItem_issue = new Hl7.Fhir.Model.OperationOutcome.IssueComponent();
							Parse(newItem_issue, reader); // 90
							result.Issue.Add(newItem_issue);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Organization result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "active":
							result.ActiveElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ActiveElement as Hl7.Fhir.Model.FhirBoolean, reader); // 100
							break;
						case "type":
							var newItem_type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_type, reader); // 110
							result.Type.Add(newItem_type);
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "alias":
							var newItem_alias = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_alias, reader); // 130
							result.AliasElement.Add(newItem_alias);
							break;
						case "telecom":
							var newItem_telecom = new Hl7.Fhir.Model.ContactPoint();
							Parse(newItem_telecom, reader); // 140
							result.Telecom.Add(newItem_telecom);
							break;
						case "address":
							var newItem_address = new Hl7.Fhir.Model.Address();
							Parse(newItem_address, reader); // 150
							result.Address.Add(newItem_address);
							break;
						case "partOf":
							result.PartOf = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.PartOf as Hl7.Fhir.Model.ResourceReference, reader); // 160
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.Organization.ContactComponent();
							Parse(newItem_contact, reader); // 170
							result.Contact.Add(newItem_contact);
							break;
						case "endpoint":
							var newItem_endpoint = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_endpoint, reader); // 180
							result.Endpoint.Add(newItem_endpoint);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(OrganizationAffiliation result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "active":
							result.ActiveElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ActiveElement as Hl7.Fhir.Model.FhirBoolean, reader); // 100
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 110
							break;
						case "organization":
							result.Organization = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Organization as Hl7.Fhir.Model.ResourceReference, reader); // 120
							break;
						case "participatingOrganization":
							result.ParticipatingOrganization = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.ParticipatingOrganization as Hl7.Fhir.Model.ResourceReference, reader); // 130
							break;
						case "network":
							var newItem_network = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_network, reader); // 140
							result.Network.Add(newItem_network);
							break;
						case "code":
							var newItem_code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_code, reader); // 150
							result.Code.Add(newItem_code);
							break;
						case "specialty":
							var newItem_specialty = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_specialty, reader); // 160
							result.Specialty.Add(newItem_specialty);
							break;
						case "location":
							var newItem_location = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_location, reader); // 170
							result.Location.Add(newItem_location);
							break;
						case "healthcareService":
							var newItem_healthcareService = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_healthcareService, reader); // 180
							result.HealthcareService.Add(newItem_healthcareService);
							break;
						case "telecom":
							var newItem_telecom = new Hl7.Fhir.Model.ContactPoint();
							Parse(newItem_telecom, reader); // 190
							result.Telecom.Add(newItem_telecom);
							break;
						case "endpoint":
							var newItem_endpoint = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_endpoint, reader); // 200
							result.Endpoint.Add(newItem_endpoint);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Parameters result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "parameter":
							var newItem_parameter = new Hl7.Fhir.Model.Parameters.ParameterComponent();
							Parse(newItem_parameter, reader); // 50
							result.Parameter.Add(newItem_parameter);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Patient result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "active":
							result.ActiveElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ActiveElement as Hl7.Fhir.Model.FhirBoolean, reader); // 100
							break;
						case "name":
							var newItem_name = new Hl7.Fhir.Model.HumanName();
							Parse(newItem_name, reader); // 110
							result.Name.Add(newItem_name);
							break;
						case "telecom":
							var newItem_telecom = new Hl7.Fhir.Model.ContactPoint();
							Parse(newItem_telecom, reader); // 120
							result.Telecom.Add(newItem_telecom);
							break;
						case "gender":
							result.GenderElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.AdministrativeGender>();
							Parse(result.GenderElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.AdministrativeGender>, reader); // 130
							break;
						case "birthDate":
							result.BirthDateElement = new Hl7.Fhir.Model.Date();
							Parse(result.BirthDateElement as Hl7.Fhir.Model.Date, reader); // 140
							break;
						case "deceasedBoolean":
							result.Deceased = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.Deceased as Hl7.Fhir.Model.FhirBoolean, reader); // 150
							break;
						case "deceasedDateTime":
							result.Deceased = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Deceased as Hl7.Fhir.Model.FhirDateTime, reader); // 150
							break;
						case "address":
							var newItem_address = new Hl7.Fhir.Model.Address();
							Parse(newItem_address, reader); // 160
							result.Address.Add(newItem_address);
							break;
						case "maritalStatus":
							result.MaritalStatus = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.MaritalStatus as Hl7.Fhir.Model.CodeableConcept, reader); // 170
							break;
						case "multipleBirthBoolean":
							result.MultipleBirth = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.MultipleBirth as Hl7.Fhir.Model.FhirBoolean, reader); // 180
							break;
						case "multipleBirthInteger":
							result.MultipleBirth = new Hl7.Fhir.Model.Integer();
							Parse(result.MultipleBirth as Hl7.Fhir.Model.Integer, reader); // 180
							break;
						case "photo":
							var newItem_photo = new Hl7.Fhir.Model.Attachment();
							Parse(newItem_photo, reader); // 190
							result.Photo.Add(newItem_photo);
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.Patient.ContactComponent();
							Parse(newItem_contact, reader); // 200
							result.Contact.Add(newItem_contact);
							break;
						case "communication":
							var newItem_communication = new Hl7.Fhir.Model.Patient.CommunicationComponent();
							Parse(newItem_communication, reader); // 210
							result.Communication.Add(newItem_communication);
							break;
						case "generalPractitioner":
							var newItem_generalPractitioner = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_generalPractitioner, reader); // 220
							result.GeneralPractitioner.Add(newItem_generalPractitioner);
							break;
						case "managingOrganization":
							result.ManagingOrganization = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.ManagingOrganization as Hl7.Fhir.Model.ResourceReference, reader); // 230
							break;
						case "link":
							var newItem_link = new Hl7.Fhir.Model.Patient.LinkComponent();
							Parse(newItem_link, reader); // 240
							result.Link.Add(newItem_link);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(PaymentNotice result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>, reader); // 100
							break;
						case "request":
							result.Request = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Request as Hl7.Fhir.Model.ResourceReference, reader); // 110
							break;
						case "response":
							result.Response = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Response as Hl7.Fhir.Model.ResourceReference, reader); // 120
							break;
						case "created":
							result.CreatedElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.CreatedElement as Hl7.Fhir.Model.FhirDateTime, reader); // 130
							break;
						case "provider":
							result.Provider = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Provider as Hl7.Fhir.Model.ResourceReference, reader); // 140
							break;
						case "payment":
							result.Payment = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Payment as Hl7.Fhir.Model.ResourceReference, reader); // 150
							break;
						case "paymentDate":
							result.PaymentDateElement = new Hl7.Fhir.Model.Date();
							Parse(result.PaymentDateElement as Hl7.Fhir.Model.Date, reader); // 160
							break;
						case "payee":
							result.Payee = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Payee as Hl7.Fhir.Model.ResourceReference, reader); // 170
							break;
						case "recipient":
							result.Recipient = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Recipient as Hl7.Fhir.Model.ResourceReference, reader); // 180
							break;
						case "amount":
							result.Amount = new Hl7.Fhir.Model.Money();
							Parse(result.Amount as Hl7.Fhir.Model.Money, reader); // 190
							break;
						case "paymentStatus":
							result.PaymentStatus = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.PaymentStatus as Hl7.Fhir.Model.CodeableConcept, reader); // 200
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(PaymentReconciliation result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>, reader); // 100
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 110
							break;
						case "created":
							result.CreatedElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.CreatedElement as Hl7.Fhir.Model.FhirDateTime, reader); // 120
							break;
						case "paymentIssuer":
							result.PaymentIssuer = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.PaymentIssuer as Hl7.Fhir.Model.ResourceReference, reader); // 130
							break;
						case "request":
							result.Request = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Request as Hl7.Fhir.Model.ResourceReference, reader); // 140
							break;
						case "requestor":
							result.Requestor = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Requestor as Hl7.Fhir.Model.ResourceReference, reader); // 150
							break;
						case "outcome":
							result.OutcomeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ClaimProcessingCodes>();
							Parse(result.OutcomeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ClaimProcessingCodes>, reader); // 160
							break;
						case "disposition":
							result.DispositionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DispositionElement as Hl7.Fhir.Model.FhirString, reader); // 170
							break;
						case "paymentDate":
							result.PaymentDateElement = new Hl7.Fhir.Model.Date();
							Parse(result.PaymentDateElement as Hl7.Fhir.Model.Date, reader); // 180
							break;
						case "paymentAmount":
							result.PaymentAmount = new Hl7.Fhir.Model.Money();
							Parse(result.PaymentAmount as Hl7.Fhir.Model.Money, reader); // 190
							break;
						case "paymentIdentifier":
							result.PaymentIdentifier = new Hl7.Fhir.Model.Identifier();
							Parse(result.PaymentIdentifier as Hl7.Fhir.Model.Identifier, reader); // 200
							break;
						case "detail":
							var newItem_detail = new Hl7.Fhir.Model.PaymentReconciliation.DetailsComponent();
							Parse(newItem_detail, reader); // 210
							result.Detail.Add(newItem_detail);
							break;
						case "formCode":
							result.FormCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.FormCode as Hl7.Fhir.Model.CodeableConcept, reader); // 220
							break;
						case "processNote":
							var newItem_processNote = new Hl7.Fhir.Model.PaymentReconciliation.NotesComponent();
							Parse(newItem_processNote, reader); // 230
							result.ProcessNote.Add(newItem_processNote);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Person result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "name":
							var newItem_name = new Hl7.Fhir.Model.HumanName();
							Parse(newItem_name, reader); // 100
							result.Name.Add(newItem_name);
							break;
						case "telecom":
							var newItem_telecom = new Hl7.Fhir.Model.ContactPoint();
							Parse(newItem_telecom, reader); // 110
							result.Telecom.Add(newItem_telecom);
							break;
						case "gender":
							result.GenderElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.AdministrativeGender>();
							Parse(result.GenderElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.AdministrativeGender>, reader); // 120
							break;
						case "birthDate":
							result.BirthDateElement = new Hl7.Fhir.Model.Date();
							Parse(result.BirthDateElement as Hl7.Fhir.Model.Date, reader); // 130
							break;
						case "address":
							var newItem_address = new Hl7.Fhir.Model.Address();
							Parse(newItem_address, reader); // 140
							result.Address.Add(newItem_address);
							break;
						case "photo":
							result.Photo = new Hl7.Fhir.Model.Attachment();
							Parse(result.Photo as Hl7.Fhir.Model.Attachment, reader); // 150
							break;
						case "managingOrganization":
							result.ManagingOrganization = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.ManagingOrganization as Hl7.Fhir.Model.ResourceReference, reader); // 160
							break;
						case "active":
							result.ActiveElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ActiveElement as Hl7.Fhir.Model.FhirBoolean, reader); // 170
							break;
						case "link":
							var newItem_link = new Hl7.Fhir.Model.Person.LinkComponent();
							Parse(newItem_link, reader); // 180
							result.Link.Add(newItem_link);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(PlanDefinition result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUri, reader); // 90
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 100
							result.Identifier.Add(newItem_identifier);
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 130
							break;
						case "subtitle":
							result.SubtitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.SubtitleElement as Hl7.Fhir.Model.FhirString, reader); // 140
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 150
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>, reader); // 160
							break;
						case "experimental":
							result.ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ExperimentalElement as Hl7.Fhir.Model.FhirBoolean, reader); // 170
							break;
						case "subjectCodeableConcept":
							result.Subject = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Subject as Hl7.Fhir.Model.CodeableConcept, reader); // 180
							break;
						case "subjectReference":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 180
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 190
							break;
						case "publisher":
							result.PublisherElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PublisherElement as Hl7.Fhir.Model.FhirString, reader); // 200
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_contact, reader); // 210
							result.Contact.Add(newItem_contact);
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.Markdown();
							Parse(result.Description as Hl7.Fhir.Model.Markdown, reader); // 220
							break;
						case "useContext":
							var newItem_useContext = new Hl7.Fhir.Model.UsageContext();
							Parse(newItem_useContext, reader); // 230
							result.UseContext.Add(newItem_useContext);
							break;
						case "jurisdiction":
							var newItem_jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_jurisdiction, reader); // 240
							result.Jurisdiction.Add(newItem_jurisdiction);
							break;
						case "purpose":
							result.Purpose = new Hl7.Fhir.Model.Markdown();
							Parse(result.Purpose as Hl7.Fhir.Model.Markdown, reader); // 250
							break;
						case "usage":
							result.UsageElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.UsageElement as Hl7.Fhir.Model.FhirString, reader); // 260
							break;
						case "copyright":
							result.Copyright = new Hl7.Fhir.Model.Markdown();
							Parse(result.Copyright as Hl7.Fhir.Model.Markdown, reader); // 270
							break;
						case "approvalDate":
							result.ApprovalDateElement = new Hl7.Fhir.Model.Date();
							Parse(result.ApprovalDateElement as Hl7.Fhir.Model.Date, reader); // 280
							break;
						case "lastReviewDate":
							result.LastReviewDateElement = new Hl7.Fhir.Model.Date();
							Parse(result.LastReviewDateElement as Hl7.Fhir.Model.Date, reader); // 290
							break;
						case "effectivePeriod":
							result.EffectivePeriod = new Hl7.Fhir.Model.Period();
							Parse(result.EffectivePeriod as Hl7.Fhir.Model.Period, reader); // 300
							break;
						case "topic":
							var newItem_topic = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_topic, reader); // 310
							result.Topic.Add(newItem_topic);
							break;
						case "author":
							var newItem_author = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_author, reader); // 320
							result.Author.Add(newItem_author);
							break;
						case "editor":
							var newItem_editor = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_editor, reader); // 330
							result.Editor.Add(newItem_editor);
							break;
						case "reviewer":
							var newItem_reviewer = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_reviewer, reader); // 340
							result.Reviewer.Add(newItem_reviewer);
							break;
						case "endorser":
							var newItem_endorser = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_endorser, reader); // 350
							result.Endorser.Add(newItem_endorser);
							break;
						case "relatedArtifact":
							var newItem_relatedArtifact = new Hl7.Fhir.Model.RelatedArtifact();
							Parse(newItem_relatedArtifact, reader); // 360
							result.RelatedArtifact.Add(newItem_relatedArtifact);
							break;
						case "library":
							var newItem_library = new Hl7.Fhir.Model.Canonical();
							Parse(newItem_library, reader); // 370
							result.LibraryElement.Add(newItem_library);
							break;
						case "goal":
							var newItem_goal = new Hl7.Fhir.Model.PlanDefinition.GoalComponent();
							Parse(newItem_goal, reader); // 380
							result.Goal.Add(newItem_goal);
							break;
						case "action":
							var newItem_action = new Hl7.Fhir.Model.PlanDefinition.ActionComponent();
							Parse(newItem_action, reader); // 390
							result.Action.Add(newItem_action);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Practitioner result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "active":
							result.ActiveElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ActiveElement as Hl7.Fhir.Model.FhirBoolean, reader); // 100
							break;
						case "name":
							var newItem_name = new Hl7.Fhir.Model.HumanName();
							Parse(newItem_name, reader); // 110
							result.Name.Add(newItem_name);
							break;
						case "telecom":
							var newItem_telecom = new Hl7.Fhir.Model.ContactPoint();
							Parse(newItem_telecom, reader); // 120
							result.Telecom.Add(newItem_telecom);
							break;
						case "address":
							var newItem_address = new Hl7.Fhir.Model.Address();
							Parse(newItem_address, reader); // 130
							result.Address.Add(newItem_address);
							break;
						case "gender":
							result.GenderElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.AdministrativeGender>();
							Parse(result.GenderElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.AdministrativeGender>, reader); // 140
							break;
						case "birthDate":
							result.BirthDateElement = new Hl7.Fhir.Model.Date();
							Parse(result.BirthDateElement as Hl7.Fhir.Model.Date, reader); // 150
							break;
						case "photo":
							var newItem_photo = new Hl7.Fhir.Model.Attachment();
							Parse(newItem_photo, reader); // 160
							result.Photo.Add(newItem_photo);
							break;
						case "qualification":
							var newItem_qualification = new Hl7.Fhir.Model.Practitioner.QualificationComponent();
							Parse(newItem_qualification, reader); // 170
							result.Qualification.Add(newItem_qualification);
							break;
						case "communication":
							var newItem_communication = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_communication, reader); // 180
							result.Communication.Add(newItem_communication);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(PractitionerRole result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "active":
							result.ActiveElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ActiveElement as Hl7.Fhir.Model.FhirBoolean, reader); // 100
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 110
							break;
						case "practitioner":
							result.Practitioner = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Practitioner as Hl7.Fhir.Model.ResourceReference, reader); // 120
							break;
						case "organization":
							result.Organization = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Organization as Hl7.Fhir.Model.ResourceReference, reader); // 130
							break;
						case "code":
							var newItem_code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_code, reader); // 140
							result.Code.Add(newItem_code);
							break;
						case "specialty":
							var newItem_specialty = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_specialty, reader); // 150
							result.Specialty.Add(newItem_specialty);
							break;
						case "location":
							var newItem_location = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_location, reader); // 160
							result.Location.Add(newItem_location);
							break;
						case "healthcareService":
							var newItem_healthcareService = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_healthcareService, reader); // 170
							result.HealthcareService.Add(newItem_healthcareService);
							break;
						case "telecom":
							var newItem_telecom = new Hl7.Fhir.Model.ContactPoint();
							Parse(newItem_telecom, reader); // 180
							result.Telecom.Add(newItem_telecom);
							break;
						case "availableTime":
							var newItem_availableTime = new Hl7.Fhir.Model.PractitionerRole.AvailableTimeComponent();
							Parse(newItem_availableTime, reader); // 190
							result.AvailableTime.Add(newItem_availableTime);
							break;
						case "notAvailable":
							var newItem_notAvailable = new Hl7.Fhir.Model.PractitionerRole.NotAvailableComponent();
							Parse(newItem_notAvailable, reader); // 200
							result.NotAvailable.Add(newItem_notAvailable);
							break;
						case "availabilityExceptions":
							result.AvailabilityExceptionsElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.AvailabilityExceptionsElement as Hl7.Fhir.Model.FhirString, reader); // 210
							break;
						case "endpoint":
							var newItem_endpoint = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_endpoint, reader); // 220
							result.Endpoint.Add(newItem_endpoint);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Procedure result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "instantiatesCanonical":
							var newItem_instantiatesCanonical = new Hl7.Fhir.Model.Canonical();
							Parse(newItem_instantiatesCanonical, reader); // 100
							result.InstantiatesCanonicalElement.Add(newItem_instantiatesCanonical);
							break;
						case "instantiatesUri":
							var newItem_instantiatesUri = new Hl7.Fhir.Model.FhirUri();
							Parse(newItem_instantiatesUri, reader); // 110
							result.InstantiatesUriElement.Add(newItem_instantiatesUri);
							break;
						case "basedOn":
							var newItem_basedOn = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_basedOn, reader); // 120
							result.BasedOn.Add(newItem_basedOn);
							break;
						case "partOf":
							var newItem_partOf = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_partOf, reader); // 130
							result.PartOf.Add(newItem_partOf);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.EventStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.EventStatus>, reader); // 140
							break;
						case "statusReason":
							result.StatusReason = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.StatusReason as Hl7.Fhir.Model.CodeableConcept, reader); // 150
							break;
						case "category":
							result.Category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Category as Hl7.Fhir.Model.CodeableConcept, reader); // 160
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 170
							break;
						case "subject":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 180
							break;
						case "encounter":
							result.Encounter = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Encounter as Hl7.Fhir.Model.ResourceReference, reader); // 190
							break;
						case "performedDateTime":
							result.Performed = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Performed as Hl7.Fhir.Model.FhirDateTime, reader); // 200
							break;
						case "performedPeriod":
							result.Performed = new Hl7.Fhir.Model.Period();
							Parse(result.Performed as Hl7.Fhir.Model.Period, reader); // 200
							break;
						case "performedString":
							result.Performed = new Hl7.Fhir.Model.FhirString();
							Parse(result.Performed as Hl7.Fhir.Model.FhirString, reader); // 200
							break;
						case "performedAge":
							result.Performed = new Hl7.Fhir.Model.Age();
							Parse(result.Performed as Hl7.Fhir.Model.Age, reader); // 200
							break;
						case "performedRange":
							result.Performed = new Hl7.Fhir.Model.Range();
							Parse(result.Performed as Hl7.Fhir.Model.Range, reader); // 200
							break;
						case "recorder":
							result.Recorder = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Recorder as Hl7.Fhir.Model.ResourceReference, reader); // 210
							break;
						case "asserter":
							result.Asserter = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Asserter as Hl7.Fhir.Model.ResourceReference, reader); // 220
							break;
						case "performer":
							var newItem_performer = new Hl7.Fhir.Model.Procedure.PerformerComponent();
							Parse(newItem_performer, reader); // 230
							result.Performer.Add(newItem_performer);
							break;
						case "location":
							result.Location = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Location as Hl7.Fhir.Model.ResourceReference, reader); // 240
							break;
						case "reasonCode":
							var newItem_reasonCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_reasonCode, reader); // 250
							result.ReasonCode.Add(newItem_reasonCode);
							break;
						case "reasonReference":
							var newItem_reasonReference = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_reasonReference, reader); // 260
							result.ReasonReference.Add(newItem_reasonReference);
							break;
						case "bodySite":
							var newItem_bodySite = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_bodySite, reader); // 270
							result.BodySite.Add(newItem_bodySite);
							break;
						case "outcome":
							result.Outcome = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Outcome as Hl7.Fhir.Model.CodeableConcept, reader); // 280
							break;
						case "report":
							var newItem_report = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_report, reader); // 290
							result.Report.Add(newItem_report);
							break;
						case "complication":
							var newItem_complication = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_complication, reader); // 300
							result.Complication.Add(newItem_complication);
							break;
						case "complicationDetail":
							var newItem_complicationDetail = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_complicationDetail, reader); // 310
							result.ComplicationDetail.Add(newItem_complicationDetail);
							break;
						case "followUp":
							var newItem_followUp = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_followUp, reader); // 320
							result.FollowUp.Add(newItem_followUp);
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 330
							result.Note.Add(newItem_note);
							break;
						case "focalDevice":
							var newItem_focalDevice = new Hl7.Fhir.Model.Procedure.FocalDeviceComponent();
							Parse(newItem_focalDevice, reader); // 340
							result.FocalDevice.Add(newItem_focalDevice);
							break;
						case "usedReference":
							var newItem_usedReference = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_usedReference, reader); // 350
							result.UsedReference.Add(newItem_usedReference);
							break;
						case "usedCode":
							var newItem_usedCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_usedCode, reader); // 360
							result.UsedCode.Add(newItem_usedCode);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Provenance result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "target":
							var newItem_target = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_target, reader); // 90
							result.Target.Add(newItem_target);
							break;
						case "occurredPeriod":
							result.Occurred = new Hl7.Fhir.Model.Period();
							Parse(result.Occurred as Hl7.Fhir.Model.Period, reader); // 100
							break;
						case "occurredDateTime":
							result.Occurred = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Occurred as Hl7.Fhir.Model.FhirDateTime, reader); // 100
							break;
						case "recorded":
							result.RecordedElement = new Hl7.Fhir.Model.Instant();
							Parse(result.RecordedElement as Hl7.Fhir.Model.Instant, reader); // 110
							break;
						case "policy":
							var newItem_policy = new Hl7.Fhir.Model.FhirUri();
							Parse(newItem_policy, reader); // 120
							result.PolicyElement.Add(newItem_policy);
							break;
						case "location":
							result.Location = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Location as Hl7.Fhir.Model.ResourceReference, reader); // 130
							break;
						case "reason":
							var newItem_reason = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_reason, reader); // 140
							result.Reason.Add(newItem_reason);
							break;
						case "activity":
							result.Activity = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Activity as Hl7.Fhir.Model.CodeableConcept, reader); // 150
							break;
						case "agent":
							var newItem_agent = new Hl7.Fhir.Model.Provenance.AgentComponent();
							Parse(newItem_agent, reader); // 160
							result.Agent.Add(newItem_agent);
							break;
						case "entity":
							var newItem_entity = new Hl7.Fhir.Model.Provenance.EntityComponent();
							Parse(newItem_entity, reader); // 170
							result.Entity.Add(newItem_entity);
							break;
						case "signature":
							var newItem_signature = new Hl7.Fhir.Model.Signature();
							Parse(newItem_signature, reader); // 180
							result.Signature.Add(newItem_signature);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Questionnaire result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUri, reader); // 90
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 100
							result.Identifier.Add(newItem_identifier);
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 130
							break;
						case "derivedFrom":
							var newItem_derivedFrom = new Hl7.Fhir.Model.Canonical();
							Parse(newItem_derivedFrom, reader); // 140
							result.DerivedFromElement.Add(newItem_derivedFrom);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>, reader); // 150
							break;
						case "experimental":
							result.ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ExperimentalElement as Hl7.Fhir.Model.FhirBoolean, reader); // 160
							break;
						case "subjectType":
							var newItem_subjectType = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ResourceType>();
							Parse(newItem_subjectType, reader); // 170
							result.SubjectTypeElement.Add(newItem_subjectType);
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 180
							break;
						case "publisher":
							result.PublisherElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PublisherElement as Hl7.Fhir.Model.FhirString, reader); // 190
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_contact, reader); // 200
							result.Contact.Add(newItem_contact);
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.Markdown();
							Parse(result.Description as Hl7.Fhir.Model.Markdown, reader); // 210
							break;
						case "useContext":
							var newItem_useContext = new Hl7.Fhir.Model.UsageContext();
							Parse(newItem_useContext, reader); // 220
							result.UseContext.Add(newItem_useContext);
							break;
						case "jurisdiction":
							var newItem_jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_jurisdiction, reader); // 230
							result.Jurisdiction.Add(newItem_jurisdiction);
							break;
						case "purpose":
							result.Purpose = new Hl7.Fhir.Model.Markdown();
							Parse(result.Purpose as Hl7.Fhir.Model.Markdown, reader); // 240
							break;
						case "copyright":
							result.Copyright = new Hl7.Fhir.Model.Markdown();
							Parse(result.Copyright as Hl7.Fhir.Model.Markdown, reader); // 250
							break;
						case "approvalDate":
							result.ApprovalDateElement = new Hl7.Fhir.Model.Date();
							Parse(result.ApprovalDateElement as Hl7.Fhir.Model.Date, reader); // 260
							break;
						case "lastReviewDate":
							result.LastReviewDateElement = new Hl7.Fhir.Model.Date();
							Parse(result.LastReviewDateElement as Hl7.Fhir.Model.Date, reader); // 270
							break;
						case "effectivePeriod":
							result.EffectivePeriod = new Hl7.Fhir.Model.Period();
							Parse(result.EffectivePeriod as Hl7.Fhir.Model.Period, reader); // 280
							break;
						case "code":
							var newItem_code = new Hl7.Fhir.Model.Coding();
							Parse(newItem_code, reader); // 290
							result.Code.Add(newItem_code);
							break;
						case "item":
							var newItem_item = new Hl7.Fhir.Model.Questionnaire.ItemComponent();
							Parse(newItem_item, reader); // 300
							result.Item.Add(newItem_item);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(QuestionnaireResponse result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							result.Identifier = new Hl7.Fhir.Model.Identifier();
							Parse(result.Identifier as Hl7.Fhir.Model.Identifier, reader); // 90
							break;
						case "basedOn":
							var newItem_basedOn = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_basedOn, reader); // 100
							result.BasedOn.Add(newItem_basedOn);
							break;
						case "partOf":
							var newItem_partOf = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_partOf, reader); // 110
							result.PartOf.Add(newItem_partOf);
							break;
						case "questionnaire":
							result.QuestionnaireElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.QuestionnaireElement as Hl7.Fhir.Model.Canonical, reader); // 120
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.QuestionnaireResponse.QuestionnaireResponseStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.QuestionnaireResponse.QuestionnaireResponseStatus>, reader); // 130
							break;
						case "subject":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 140
							break;
						case "encounter":
							result.Encounter = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Encounter as Hl7.Fhir.Model.ResourceReference, reader); // 150
							break;
						case "authored":
							result.AuthoredElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.AuthoredElement as Hl7.Fhir.Model.FhirDateTime, reader); // 160
							break;
						case "author":
							result.Author = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Author as Hl7.Fhir.Model.ResourceReference, reader); // 170
							break;
						case "source":
							result.Source = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Source as Hl7.Fhir.Model.ResourceReference, reader); // 180
							break;
						case "item":
							var newItem_item = new Hl7.Fhir.Model.QuestionnaireResponse.ItemComponent();
							Parse(newItem_item, reader); // 190
							result.Item.Add(newItem_item);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(RelatedPerson result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "active":
							result.ActiveElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ActiveElement as Hl7.Fhir.Model.FhirBoolean, reader); // 100
							break;
						case "patient":
							result.Patient = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Patient as Hl7.Fhir.Model.ResourceReference, reader); // 110
							break;
						case "relationship":
							var newItem_relationship = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_relationship, reader); // 120
							result.Relationship.Add(newItem_relationship);
							break;
						case "name":
							var newItem_name = new Hl7.Fhir.Model.HumanName();
							Parse(newItem_name, reader); // 130
							result.Name.Add(newItem_name);
							break;
						case "telecom":
							var newItem_telecom = new Hl7.Fhir.Model.ContactPoint();
							Parse(newItem_telecom, reader); // 140
							result.Telecom.Add(newItem_telecom);
							break;
						case "gender":
							result.GenderElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.AdministrativeGender>();
							Parse(result.GenderElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.AdministrativeGender>, reader); // 150
							break;
						case "birthDate":
							result.BirthDateElement = new Hl7.Fhir.Model.Date();
							Parse(result.BirthDateElement as Hl7.Fhir.Model.Date, reader); // 160
							break;
						case "address":
							var newItem_address = new Hl7.Fhir.Model.Address();
							Parse(newItem_address, reader); // 170
							result.Address.Add(newItem_address);
							break;
						case "photo":
							var newItem_photo = new Hl7.Fhir.Model.Attachment();
							Parse(newItem_photo, reader); // 180
							result.Photo.Add(newItem_photo);
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 190
							break;
						case "communication":
							var newItem_communication = new Hl7.Fhir.Model.RelatedPerson.CommunicationComponent();
							Parse(newItem_communication, reader); // 200
							result.Communication.Add(newItem_communication);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(RequestGroup result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "instantiatesCanonical":
							var newItem_instantiatesCanonical = new Hl7.Fhir.Model.Canonical();
							Parse(newItem_instantiatesCanonical, reader); // 100
							result.InstantiatesCanonicalElement.Add(newItem_instantiatesCanonical);
							break;
						case "instantiatesUri":
							var newItem_instantiatesUri = new Hl7.Fhir.Model.FhirUri();
							Parse(newItem_instantiatesUri, reader); // 110
							result.InstantiatesUriElement.Add(newItem_instantiatesUri);
							break;
						case "basedOn":
							var newItem_basedOn = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_basedOn, reader); // 120
							result.BasedOn.Add(newItem_basedOn);
							break;
						case "replaces":
							var newItem_replaces = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_replaces, reader); // 130
							result.Replaces.Add(newItem_replaces);
							break;
						case "groupIdentifier":
							result.GroupIdentifier = new Hl7.Fhir.Model.Identifier();
							Parse(result.GroupIdentifier as Hl7.Fhir.Model.Identifier, reader); // 140
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestStatus>, reader); // 150
							break;
						case "intent":
							result.IntentElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestIntent>();
							Parse(result.IntentElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestIntent>, reader); // 160
							break;
						case "priority":
							result.PriorityElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestPriority>();
							Parse(result.PriorityElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestPriority>, reader); // 170
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 180
							break;
						case "subject":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 190
							break;
						case "encounter":
							result.Encounter = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Encounter as Hl7.Fhir.Model.ResourceReference, reader); // 200
							break;
						case "authoredOn":
							result.AuthoredOnElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.AuthoredOnElement as Hl7.Fhir.Model.FhirDateTime, reader); // 210
							break;
						case "author":
							result.Author = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Author as Hl7.Fhir.Model.ResourceReference, reader); // 220
							break;
						case "reasonCode":
							var newItem_reasonCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_reasonCode, reader); // 230
							result.ReasonCode.Add(newItem_reasonCode);
							break;
						case "reasonReference":
							var newItem_reasonReference = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_reasonReference, reader); // 240
							result.ReasonReference.Add(newItem_reasonReference);
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 250
							result.Note.Add(newItem_note);
							break;
						case "action":
							var newItem_action = new Hl7.Fhir.Model.RequestGroup.ActionComponent();
							Parse(newItem_action, reader); // 260
							result.Action.Add(newItem_action);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(ResearchDefinition result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUri, reader); // 90
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 100
							result.Identifier.Add(newItem_identifier);
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 130
							break;
						case "shortTitle":
							result.ShortTitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ShortTitleElement as Hl7.Fhir.Model.FhirString, reader); // 140
							break;
						case "subtitle":
							result.SubtitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.SubtitleElement as Hl7.Fhir.Model.FhirString, reader); // 150
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>, reader); // 160
							break;
						case "experimental":
							result.ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ExperimentalElement as Hl7.Fhir.Model.FhirBoolean, reader); // 170
							break;
						case "subjectCodeableConcept":
							result.Subject = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Subject as Hl7.Fhir.Model.CodeableConcept, reader); // 180
							break;
						case "subjectReference":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 180
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 190
							break;
						case "publisher":
							result.PublisherElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PublisherElement as Hl7.Fhir.Model.FhirString, reader); // 200
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_contact, reader); // 210
							result.Contact.Add(newItem_contact);
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.Markdown();
							Parse(result.Description as Hl7.Fhir.Model.Markdown, reader); // 220
							break;
						case "comment":
							var newItem_comment = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_comment, reader); // 230
							result.CommentElement.Add(newItem_comment);
							break;
						case "useContext":
							var newItem_useContext = new Hl7.Fhir.Model.UsageContext();
							Parse(newItem_useContext, reader); // 240
							result.UseContext.Add(newItem_useContext);
							break;
						case "jurisdiction":
							var newItem_jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_jurisdiction, reader); // 250
							result.Jurisdiction.Add(newItem_jurisdiction);
							break;
						case "purpose":
							result.Purpose = new Hl7.Fhir.Model.Markdown();
							Parse(result.Purpose as Hl7.Fhir.Model.Markdown, reader); // 260
							break;
						case "usage":
							result.UsageElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.UsageElement as Hl7.Fhir.Model.FhirString, reader); // 270
							break;
						case "copyright":
							result.Copyright = new Hl7.Fhir.Model.Markdown();
							Parse(result.Copyright as Hl7.Fhir.Model.Markdown, reader); // 280
							break;
						case "approvalDate":
							result.ApprovalDateElement = new Hl7.Fhir.Model.Date();
							Parse(result.ApprovalDateElement as Hl7.Fhir.Model.Date, reader); // 290
							break;
						case "lastReviewDate":
							result.LastReviewDateElement = new Hl7.Fhir.Model.Date();
							Parse(result.LastReviewDateElement as Hl7.Fhir.Model.Date, reader); // 300
							break;
						case "effectivePeriod":
							result.EffectivePeriod = new Hl7.Fhir.Model.Period();
							Parse(result.EffectivePeriod as Hl7.Fhir.Model.Period, reader); // 310
							break;
						case "topic":
							var newItem_topic = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_topic, reader); // 320
							result.Topic.Add(newItem_topic);
							break;
						case "author":
							var newItem_author = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_author, reader); // 330
							result.Author.Add(newItem_author);
							break;
						case "editor":
							var newItem_editor = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_editor, reader); // 340
							result.Editor.Add(newItem_editor);
							break;
						case "reviewer":
							var newItem_reviewer = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_reviewer, reader); // 350
							result.Reviewer.Add(newItem_reviewer);
							break;
						case "endorser":
							var newItem_endorser = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_endorser, reader); // 360
							result.Endorser.Add(newItem_endorser);
							break;
						case "relatedArtifact":
							var newItem_relatedArtifact = new Hl7.Fhir.Model.RelatedArtifact();
							Parse(newItem_relatedArtifact, reader); // 370
							result.RelatedArtifact.Add(newItem_relatedArtifact);
							break;
						case "library":
							var newItem_library = new Hl7.Fhir.Model.Canonical();
							Parse(newItem_library, reader); // 380
							result.LibraryElement.Add(newItem_library);
							break;
						case "population":
							result.Population = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Population as Hl7.Fhir.Model.ResourceReference, reader); // 390
							break;
						case "exposure":
							result.Exposure = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Exposure as Hl7.Fhir.Model.ResourceReference, reader); // 400
							break;
						case "exposureAlternative":
							result.ExposureAlternative = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.ExposureAlternative as Hl7.Fhir.Model.ResourceReference, reader); // 410
							break;
						case "outcome":
							result.Outcome = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Outcome as Hl7.Fhir.Model.ResourceReference, reader); // 420
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(ResearchElementDefinition result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUri, reader); // 90
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 100
							result.Identifier.Add(newItem_identifier);
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 130
							break;
						case "shortTitle":
							result.ShortTitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ShortTitleElement as Hl7.Fhir.Model.FhirString, reader); // 140
							break;
						case "subtitle":
							result.SubtitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.SubtitleElement as Hl7.Fhir.Model.FhirString, reader); // 150
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>, reader); // 160
							break;
						case "experimental":
							result.ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ExperimentalElement as Hl7.Fhir.Model.FhirBoolean, reader); // 170
							break;
						case "subjectCodeableConcept":
							result.Subject = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Subject as Hl7.Fhir.Model.CodeableConcept, reader); // 180
							break;
						case "subjectReference":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 180
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 190
							break;
						case "publisher":
							result.PublisherElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PublisherElement as Hl7.Fhir.Model.FhirString, reader); // 200
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_contact, reader); // 210
							result.Contact.Add(newItem_contact);
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.Markdown();
							Parse(result.Description as Hl7.Fhir.Model.Markdown, reader); // 220
							break;
						case "comment":
							var newItem_comment = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_comment, reader); // 230
							result.CommentElement.Add(newItem_comment);
							break;
						case "useContext":
							var newItem_useContext = new Hl7.Fhir.Model.UsageContext();
							Parse(newItem_useContext, reader); // 240
							result.UseContext.Add(newItem_useContext);
							break;
						case "jurisdiction":
							var newItem_jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_jurisdiction, reader); // 250
							result.Jurisdiction.Add(newItem_jurisdiction);
							break;
						case "purpose":
							result.Purpose = new Hl7.Fhir.Model.Markdown();
							Parse(result.Purpose as Hl7.Fhir.Model.Markdown, reader); // 260
							break;
						case "usage":
							result.UsageElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.UsageElement as Hl7.Fhir.Model.FhirString, reader); // 270
							break;
						case "copyright":
							result.Copyright = new Hl7.Fhir.Model.Markdown();
							Parse(result.Copyright as Hl7.Fhir.Model.Markdown, reader); // 280
							break;
						case "approvalDate":
							result.ApprovalDateElement = new Hl7.Fhir.Model.Date();
							Parse(result.ApprovalDateElement as Hl7.Fhir.Model.Date, reader); // 290
							break;
						case "lastReviewDate":
							result.LastReviewDateElement = new Hl7.Fhir.Model.Date();
							Parse(result.LastReviewDateElement as Hl7.Fhir.Model.Date, reader); // 300
							break;
						case "effectivePeriod":
							result.EffectivePeriod = new Hl7.Fhir.Model.Period();
							Parse(result.EffectivePeriod as Hl7.Fhir.Model.Period, reader); // 310
							break;
						case "topic":
							var newItem_topic = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_topic, reader); // 320
							result.Topic.Add(newItem_topic);
							break;
						case "author":
							var newItem_author = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_author, reader); // 330
							result.Author.Add(newItem_author);
							break;
						case "editor":
							var newItem_editor = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_editor, reader); // 340
							result.Editor.Add(newItem_editor);
							break;
						case "reviewer":
							var newItem_reviewer = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_reviewer, reader); // 350
							result.Reviewer.Add(newItem_reviewer);
							break;
						case "endorser":
							var newItem_endorser = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_endorser, reader); // 360
							result.Endorser.Add(newItem_endorser);
							break;
						case "relatedArtifact":
							var newItem_relatedArtifact = new Hl7.Fhir.Model.RelatedArtifact();
							Parse(newItem_relatedArtifact, reader); // 370
							result.RelatedArtifact.Add(newItem_relatedArtifact);
							break;
						case "library":
							var newItem_library = new Hl7.Fhir.Model.Canonical();
							Parse(newItem_library, reader); // 380
							result.LibraryElement.Add(newItem_library);
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ResearchElementDefinition.ResearchElementType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ResearchElementDefinition.ResearchElementType>, reader); // 390
							break;
						case "variableType":
							result.VariableTypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.EvidenceVariableType>();
							Parse(result.VariableTypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.EvidenceVariableType>, reader); // 400
							break;
						case "characteristic":
							var newItem_characteristic = new Hl7.Fhir.Model.ResearchElementDefinition.CharacteristicComponent();
							Parse(newItem_characteristic, reader); // 410
							result.Characteristic.Add(newItem_characteristic);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(ResearchStudy result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 100
							break;
						case "protocol":
							var newItem_protocol = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_protocol, reader); // 110
							result.Protocol.Add(newItem_protocol);
							break;
						case "partOf":
							var newItem_partOf = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_partOf, reader); // 120
							result.PartOf.Add(newItem_partOf);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ResearchStudy.ResearchStudyStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ResearchStudy.ResearchStudyStatus>, reader); // 130
							break;
						case "primaryPurposeType":
							result.PrimaryPurposeType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.PrimaryPurposeType as Hl7.Fhir.Model.CodeableConcept, reader); // 140
							break;
						case "phase":
							result.Phase = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Phase as Hl7.Fhir.Model.CodeableConcept, reader); // 150
							break;
						case "category":
							var newItem_category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_category, reader); // 160
							result.Category.Add(newItem_category);
							break;
						case "focus":
							var newItem_focus = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_focus, reader); // 170
							result.Focus.Add(newItem_focus);
							break;
						case "condition":
							var newItem_condition = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_condition, reader); // 180
							result.Condition.Add(newItem_condition);
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_contact, reader); // 190
							result.Contact.Add(newItem_contact);
							break;
						case "relatedArtifact":
							var newItem_relatedArtifact = new Hl7.Fhir.Model.RelatedArtifact();
							Parse(newItem_relatedArtifact, reader); // 200
							result.RelatedArtifact.Add(newItem_relatedArtifact);
							break;
						case "keyword":
							var newItem_keyword = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_keyword, reader); // 210
							result.Keyword.Add(newItem_keyword);
							break;
						case "location":
							var newItem_location = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_location, reader); // 220
							result.Location.Add(newItem_location);
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.Markdown();
							Parse(result.Description as Hl7.Fhir.Model.Markdown, reader); // 230
							break;
						case "enrollment":
							var newItem_enrollment = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_enrollment, reader); // 240
							result.Enrollment.Add(newItem_enrollment);
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 250
							break;
						case "sponsor":
							result.Sponsor = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Sponsor as Hl7.Fhir.Model.ResourceReference, reader); // 260
							break;
						case "principalInvestigator":
							result.PrincipalInvestigator = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.PrincipalInvestigator as Hl7.Fhir.Model.ResourceReference, reader); // 270
							break;
						case "site":
							var newItem_site = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_site, reader); // 280
							result.Site.Add(newItem_site);
							break;
						case "reasonStopped":
							result.ReasonStopped = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.ReasonStopped as Hl7.Fhir.Model.CodeableConcept, reader); // 290
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 300
							result.Note.Add(newItem_note);
							break;
						case "arm":
							var newItem_arm = new Hl7.Fhir.Model.ResearchStudy.ArmComponent();
							Parse(newItem_arm, reader); // 310
							result.Arm.Add(newItem_arm);
							break;
						case "objective":
							var newItem_objective = new Hl7.Fhir.Model.ResearchStudy.ObjectiveComponent();
							Parse(newItem_objective, reader); // 320
							result.Objective.Add(newItem_objective);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(ResearchSubject result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ResearchSubject.ResearchSubjectStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ResearchSubject.ResearchSubjectStatus>, reader); // 100
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 110
							break;
						case "study":
							result.Study = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Study as Hl7.Fhir.Model.ResourceReference, reader); // 120
							break;
						case "individual":
							result.Individual = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Individual as Hl7.Fhir.Model.ResourceReference, reader); // 130
							break;
						case "assignedArm":
							result.AssignedArmElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.AssignedArmElement as Hl7.Fhir.Model.FhirString, reader); // 140
							break;
						case "actualArm":
							result.ActualArmElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ActualArmElement as Hl7.Fhir.Model.FhirString, reader); // 150
							break;
						case "consent":
							result.Consent = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Consent as Hl7.Fhir.Model.ResourceReference, reader); // 160
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(RiskAssessment result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "basedOn":
							result.BasedOn = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.BasedOn as Hl7.Fhir.Model.ResourceReference, reader); // 100
							break;
						case "parent":
							result.Parent = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Parent as Hl7.Fhir.Model.ResourceReference, reader); // 110
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ObservationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ObservationStatus>, reader); // 120
							break;
						case "method":
							result.Method = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Method as Hl7.Fhir.Model.CodeableConcept, reader); // 130
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 140
							break;
						case "subject":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 150
							break;
						case "encounter":
							result.Encounter = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Encounter as Hl7.Fhir.Model.ResourceReference, reader); // 160
							break;
						case "occurrenceDateTime":
							result.Occurrence = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Occurrence as Hl7.Fhir.Model.FhirDateTime, reader); // 170
							break;
						case "occurrencePeriod":
							result.Occurrence = new Hl7.Fhir.Model.Period();
							Parse(result.Occurrence as Hl7.Fhir.Model.Period, reader); // 170
							break;
						case "condition":
							result.Condition = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Condition as Hl7.Fhir.Model.ResourceReference, reader); // 180
							break;
						case "performer":
							result.Performer = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Performer as Hl7.Fhir.Model.ResourceReference, reader); // 190
							break;
						case "reasonCode":
							var newItem_reasonCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_reasonCode, reader); // 200
							result.ReasonCode.Add(newItem_reasonCode);
							break;
						case "reasonReference":
							var newItem_reasonReference = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_reasonReference, reader); // 210
							result.ReasonReference.Add(newItem_reasonReference);
							break;
						case "basis":
							var newItem_basis = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_basis, reader); // 220
							result.Basis.Add(newItem_basis);
							break;
						case "prediction":
							var newItem_prediction = new Hl7.Fhir.Model.RiskAssessment.PredictionComponent();
							Parse(newItem_prediction, reader); // 230
							result.Prediction.Add(newItem_prediction);
							break;
						case "mitigation":
							result.MitigationElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.MitigationElement as Hl7.Fhir.Model.FhirString, reader); // 240
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 250
							result.Note.Add(newItem_note);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(RiskEvidenceSynthesis result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUri, reader); // 90
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 100
							result.Identifier.Add(newItem_identifier);
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 130
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>, reader); // 140
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 150
							break;
						case "publisher":
							result.PublisherElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PublisherElement as Hl7.Fhir.Model.FhirString, reader); // 160
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_contact, reader); // 170
							result.Contact.Add(newItem_contact);
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.Markdown();
							Parse(result.Description as Hl7.Fhir.Model.Markdown, reader); // 180
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 190
							result.Note.Add(newItem_note);
							break;
						case "useContext":
							var newItem_useContext = new Hl7.Fhir.Model.UsageContext();
							Parse(newItem_useContext, reader); // 200
							result.UseContext.Add(newItem_useContext);
							break;
						case "jurisdiction":
							var newItem_jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_jurisdiction, reader); // 210
							result.Jurisdiction.Add(newItem_jurisdiction);
							break;
						case "copyright":
							result.Copyright = new Hl7.Fhir.Model.Markdown();
							Parse(result.Copyright as Hl7.Fhir.Model.Markdown, reader); // 220
							break;
						case "approvalDate":
							result.ApprovalDateElement = new Hl7.Fhir.Model.Date();
							Parse(result.ApprovalDateElement as Hl7.Fhir.Model.Date, reader); // 230
							break;
						case "lastReviewDate":
							result.LastReviewDateElement = new Hl7.Fhir.Model.Date();
							Parse(result.LastReviewDateElement as Hl7.Fhir.Model.Date, reader); // 240
							break;
						case "effectivePeriod":
							result.EffectivePeriod = new Hl7.Fhir.Model.Period();
							Parse(result.EffectivePeriod as Hl7.Fhir.Model.Period, reader); // 250
							break;
						case "topic":
							var newItem_topic = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_topic, reader); // 260
							result.Topic.Add(newItem_topic);
							break;
						case "author":
							var newItem_author = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_author, reader); // 270
							result.Author.Add(newItem_author);
							break;
						case "editor":
							var newItem_editor = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_editor, reader); // 280
							result.Editor.Add(newItem_editor);
							break;
						case "reviewer":
							var newItem_reviewer = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_reviewer, reader); // 290
							result.Reviewer.Add(newItem_reviewer);
							break;
						case "endorser":
							var newItem_endorser = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_endorser, reader); // 300
							result.Endorser.Add(newItem_endorser);
							break;
						case "relatedArtifact":
							var newItem_relatedArtifact = new Hl7.Fhir.Model.RelatedArtifact();
							Parse(newItem_relatedArtifact, reader); // 310
							result.RelatedArtifact.Add(newItem_relatedArtifact);
							break;
						case "synthesisType":
							result.SynthesisType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.SynthesisType as Hl7.Fhir.Model.CodeableConcept, reader); // 320
							break;
						case "studyType":
							result.StudyType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.StudyType as Hl7.Fhir.Model.CodeableConcept, reader); // 330
							break;
						case "population":
							result.Population = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Population as Hl7.Fhir.Model.ResourceReference, reader); // 340
							break;
						case "exposure":
							result.Exposure = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Exposure as Hl7.Fhir.Model.ResourceReference, reader); // 350
							break;
						case "outcome":
							result.Outcome = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Outcome as Hl7.Fhir.Model.ResourceReference, reader); // 360
							break;
						case "sampleSize":
							result.SampleSize = new Hl7.Fhir.Model.RiskEvidenceSynthesis.SampleSizeComponent();
							Parse(result.SampleSize as Hl7.Fhir.Model.RiskEvidenceSynthesis.SampleSizeComponent, reader); // 370
							break;
						case "riskEstimate":
							result.RiskEstimate = new Hl7.Fhir.Model.RiskEvidenceSynthesis.RiskEstimateComponent();
							Parse(result.RiskEstimate as Hl7.Fhir.Model.RiskEvidenceSynthesis.RiskEstimateComponent, reader); // 380
							break;
						case "certainty":
							var newItem_certainty = new Hl7.Fhir.Model.RiskEvidenceSynthesis.CertaintyComponent();
							Parse(newItem_certainty, reader); // 390
							result.Certainty.Add(newItem_certainty);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Schedule result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "active":
							result.ActiveElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ActiveElement as Hl7.Fhir.Model.FhirBoolean, reader); // 100
							break;
						case "serviceCategory":
							var newItem_serviceCategory = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_serviceCategory, reader); // 110
							result.ServiceCategory.Add(newItem_serviceCategory);
							break;
						case "serviceType":
							var newItem_serviceType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_serviceType, reader); // 120
							result.ServiceType.Add(newItem_serviceType);
							break;
						case "specialty":
							var newItem_specialty = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_specialty, reader); // 130
							result.Specialty.Add(newItem_specialty);
							break;
						case "actor":
							var newItem_actor = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_actor, reader); // 140
							result.Actor.Add(newItem_actor);
							break;
						case "planningHorizon":
							result.PlanningHorizon = new Hl7.Fhir.Model.Period();
							Parse(result.PlanningHorizon as Hl7.Fhir.Model.Period, reader); // 150
							break;
						case "comment":
							result.CommentElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.CommentElement as Hl7.Fhir.Model.FhirString, reader); // 160
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(SearchParameter result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUri, reader); // 90
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 100
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "derivedFrom":
							result.DerivedFromElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.DerivedFromElement as Hl7.Fhir.Model.Canonical, reader); // 120
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>, reader); // 130
							break;
						case "experimental":
							result.ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ExperimentalElement as Hl7.Fhir.Model.FhirBoolean, reader); // 140
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 150
							break;
						case "publisher":
							result.PublisherElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PublisherElement as Hl7.Fhir.Model.FhirString, reader); // 160
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_contact, reader); // 170
							result.Contact.Add(newItem_contact);
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.Markdown();
							Parse(result.Description as Hl7.Fhir.Model.Markdown, reader); // 180
							break;
						case "useContext":
							var newItem_useContext = new Hl7.Fhir.Model.UsageContext();
							Parse(newItem_useContext, reader); // 190
							result.UseContext.Add(newItem_useContext);
							break;
						case "jurisdiction":
							var newItem_jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_jurisdiction, reader); // 200
							result.Jurisdiction.Add(newItem_jurisdiction);
							break;
						case "purpose":
							result.Purpose = new Hl7.Fhir.Model.Markdown();
							Parse(result.Purpose as Hl7.Fhir.Model.Markdown, reader); // 210
							break;
						case "code":
							result.CodeElement = new Hl7.Fhir.Model.Code();
							Parse(result.CodeElement as Hl7.Fhir.Model.Code, reader); // 220
							break;
						case "base":
							var newItem_base = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ResourceType>();
							Parse(newItem_base, reader); // 230
							result.BaseElement.Add(newItem_base);
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.SearchParamType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.SearchParamType>, reader); // 240
							break;
						case "expression":
							result.ExpressionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ExpressionElement as Hl7.Fhir.Model.FhirString, reader); // 250
							break;
						case "xpath":
							result.XpathElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.XpathElement as Hl7.Fhir.Model.FhirString, reader); // 260
							break;
						case "xpathUsage":
							result.XpathUsageElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.SearchParameter.XPathUsageType>();
							Parse(result.XpathUsageElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.SearchParameter.XPathUsageType>, reader); // 270
							break;
						case "target":
							var newItem_target = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ResourceType>();
							Parse(newItem_target, reader); // 280
							result.TargetElement.Add(newItem_target);
							break;
						case "multipleOr":
							result.MultipleOrElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.MultipleOrElement as Hl7.Fhir.Model.FhirBoolean, reader); // 290
							break;
						case "multipleAnd":
							result.MultipleAndElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.MultipleAndElement as Hl7.Fhir.Model.FhirBoolean, reader); // 300
							break;
						case "comparator":
							var newItem_comparator = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.SearchParameter.SearchComparator>();
							Parse(newItem_comparator, reader); // 310
							result.ComparatorElement.Add(newItem_comparator);
							break;
						case "modifier":
							var newItem_modifier = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.SearchParameter.SearchModifierCode>();
							Parse(newItem_modifier, reader); // 320
							result.ModifierElement.Add(newItem_modifier);
							break;
						case "chain":
							var newItem_chain = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_chain, reader); // 330
							result.ChainElement.Add(newItem_chain);
							break;
						case "component":
							var newItem_component = new Hl7.Fhir.Model.SearchParameter.ComponentComponent();
							Parse(newItem_component, reader); // 340
							result.Component.Add(newItem_component);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(ServiceRequest result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "instantiatesCanonical":
							var newItem_instantiatesCanonical = new Hl7.Fhir.Model.Canonical();
							Parse(newItem_instantiatesCanonical, reader); // 100
							result.InstantiatesCanonicalElement.Add(newItem_instantiatesCanonical);
							break;
						case "instantiatesUri":
							var newItem_instantiatesUri = new Hl7.Fhir.Model.FhirUri();
							Parse(newItem_instantiatesUri, reader); // 110
							result.InstantiatesUriElement.Add(newItem_instantiatesUri);
							break;
						case "basedOn":
							var newItem_basedOn = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_basedOn, reader); // 120
							result.BasedOn.Add(newItem_basedOn);
							break;
						case "replaces":
							var newItem_replaces = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_replaces, reader); // 130
							result.Replaces.Add(newItem_replaces);
							break;
						case "requisition":
							result.Requisition = new Hl7.Fhir.Model.Identifier();
							Parse(result.Requisition as Hl7.Fhir.Model.Identifier, reader); // 140
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestStatus>, reader); // 150
							break;
						case "intent":
							result.IntentElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestIntent>();
							Parse(result.IntentElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestIntent>, reader); // 160
							break;
						case "category":
							var newItem_category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_category, reader); // 170
							result.Category.Add(newItem_category);
							break;
						case "priority":
							result.PriorityElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestPriority>();
							Parse(result.PriorityElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestPriority>, reader); // 180
							break;
						case "doNotPerform":
							result.DoNotPerformElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.DoNotPerformElement as Hl7.Fhir.Model.FhirBoolean, reader); // 190
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 200
							break;
						case "orderDetail":
							var newItem_orderDetail = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_orderDetail, reader); // 210
							result.OrderDetail.Add(newItem_orderDetail);
							break;
						case "quantityQuantity":
							result.Quantity = new Hl7.Fhir.Model.Quantity();
							Parse(result.Quantity as Hl7.Fhir.Model.Quantity, reader); // 220
							break;
						case "quantityRatio":
							result.Quantity = new Hl7.Fhir.Model.Ratio();
							Parse(result.Quantity as Hl7.Fhir.Model.Ratio, reader); // 220
							break;
						case "quantityRange":
							result.Quantity = new Hl7.Fhir.Model.Range();
							Parse(result.Quantity as Hl7.Fhir.Model.Range, reader); // 220
							break;
						case "subject":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 230
							break;
						case "encounter":
							result.Encounter = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Encounter as Hl7.Fhir.Model.ResourceReference, reader); // 240
							break;
						case "occurrenceDateTime":
							result.Occurrence = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Occurrence as Hl7.Fhir.Model.FhirDateTime, reader); // 250
							break;
						case "occurrencePeriod":
							result.Occurrence = new Hl7.Fhir.Model.Period();
							Parse(result.Occurrence as Hl7.Fhir.Model.Period, reader); // 250
							break;
						case "occurrenceTiming":
							result.Occurrence = new Hl7.Fhir.Model.Timing();
							Parse(result.Occurrence as Hl7.Fhir.Model.Timing, reader); // 250
							break;
						case "asNeededBoolean":
							result.AsNeeded = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.AsNeeded as Hl7.Fhir.Model.FhirBoolean, reader); // 260
							break;
						case "asNeededCodeableConcept":
							result.AsNeeded = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.AsNeeded as Hl7.Fhir.Model.CodeableConcept, reader); // 260
							break;
						case "authoredOn":
							result.AuthoredOnElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.AuthoredOnElement as Hl7.Fhir.Model.FhirDateTime, reader); // 270
							break;
						case "requester":
							result.Requester = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Requester as Hl7.Fhir.Model.ResourceReference, reader); // 280
							break;
						case "performerType":
							result.PerformerType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.PerformerType as Hl7.Fhir.Model.CodeableConcept, reader); // 290
							break;
						case "performer":
							var newItem_performer = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_performer, reader); // 300
							result.Performer.Add(newItem_performer);
							break;
						case "locationCode":
							var newItem_locationCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_locationCode, reader); // 310
							result.LocationCode.Add(newItem_locationCode);
							break;
						case "locationReference":
							var newItem_locationReference = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_locationReference, reader); // 320
							result.LocationReference.Add(newItem_locationReference);
							break;
						case "reasonCode":
							var newItem_reasonCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_reasonCode, reader); // 330
							result.ReasonCode.Add(newItem_reasonCode);
							break;
						case "reasonReference":
							var newItem_reasonReference = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_reasonReference, reader); // 340
							result.ReasonReference.Add(newItem_reasonReference);
							break;
						case "insurance":
							var newItem_insurance = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_insurance, reader); // 350
							result.Insurance.Add(newItem_insurance);
							break;
						case "supportingInfo":
							var newItem_supportingInfo = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_supportingInfo, reader); // 360
							result.SupportingInfo.Add(newItem_supportingInfo);
							break;
						case "specimen":
							var newItem_specimen = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_specimen, reader); // 370
							result.Specimen.Add(newItem_specimen);
							break;
						case "bodySite":
							var newItem_bodySite = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_bodySite, reader); // 380
							result.BodySite.Add(newItem_bodySite);
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 390
							result.Note.Add(newItem_note);
							break;
						case "patientInstruction":
							result.PatientInstructionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PatientInstructionElement as Hl7.Fhir.Model.FhirString, reader); // 400
							break;
						case "relevantHistory":
							var newItem_relevantHistory = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_relevantHistory, reader); // 410
							result.RelevantHistory.Add(newItem_relevantHistory);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Slot result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "serviceCategory":
							var newItem_serviceCategory = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_serviceCategory, reader); // 100
							result.ServiceCategory.Add(newItem_serviceCategory);
							break;
						case "serviceType":
							var newItem_serviceType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_serviceType, reader); // 110
							result.ServiceType.Add(newItem_serviceType);
							break;
						case "specialty":
							var newItem_specialty = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_specialty, reader); // 120
							result.Specialty.Add(newItem_specialty);
							break;
						case "appointmentType":
							result.AppointmentType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.AppointmentType as Hl7.Fhir.Model.CodeableConcept, reader); // 130
							break;
						case "schedule":
							result.Schedule = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Schedule as Hl7.Fhir.Model.ResourceReference, reader); // 140
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Slot.SlotStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Slot.SlotStatus>, reader); // 150
							break;
						case "start":
							result.StartElement = new Hl7.Fhir.Model.Instant();
							Parse(result.StartElement as Hl7.Fhir.Model.Instant, reader); // 160
							break;
						case "end":
							result.EndElement = new Hl7.Fhir.Model.Instant();
							Parse(result.EndElement as Hl7.Fhir.Model.Instant, reader); // 170
							break;
						case "overbooked":
							result.OverbookedElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.OverbookedElement as Hl7.Fhir.Model.FhirBoolean, reader); // 180
							break;
						case "comment":
							result.CommentElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.CommentElement as Hl7.Fhir.Model.FhirString, reader); // 190
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Specimen result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "accessionIdentifier":
							result.AccessionIdentifier = new Hl7.Fhir.Model.Identifier();
							Parse(result.AccessionIdentifier as Hl7.Fhir.Model.Identifier, reader); // 100
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Specimen.SpecimenStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Specimen.SpecimenStatus>, reader); // 110
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 120
							break;
						case "subject":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 130
							break;
						case "receivedTime":
							result.ReceivedTimeElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.ReceivedTimeElement as Hl7.Fhir.Model.FhirDateTime, reader); // 140
							break;
						case "parent":
							var newItem_parent = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_parent, reader); // 150
							result.Parent.Add(newItem_parent);
							break;
						case "request":
							var newItem_request = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_request, reader); // 160
							result.Request.Add(newItem_request);
							break;
						case "collection":
							result.Collection = new Hl7.Fhir.Model.Specimen.CollectionComponent();
							Parse(result.Collection as Hl7.Fhir.Model.Specimen.CollectionComponent, reader); // 170
							break;
						case "processing":
							var newItem_processing = new Hl7.Fhir.Model.Specimen.ProcessingComponent();
							Parse(newItem_processing, reader); // 180
							result.Processing.Add(newItem_processing);
							break;
						case "container":
							var newItem_container = new Hl7.Fhir.Model.Specimen.ContainerComponent();
							Parse(newItem_container, reader); // 190
							result.Container.Add(newItem_container);
							break;
						case "condition":
							var newItem_condition = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_condition, reader); // 200
							result.Condition.Add(newItem_condition);
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 210
							result.Note.Add(newItem_note);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(SpecimenDefinition result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							result.Identifier = new Hl7.Fhir.Model.Identifier();
							Parse(result.Identifier as Hl7.Fhir.Model.Identifier, reader); // 90
							break;
						case "typeCollected":
							result.TypeCollected = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.TypeCollected as Hl7.Fhir.Model.CodeableConcept, reader); // 100
							break;
						case "patientPreparation":
							var newItem_patientPreparation = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_patientPreparation, reader); // 110
							result.PatientPreparation.Add(newItem_patientPreparation);
							break;
						case "timeAspect":
							result.TimeAspectElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TimeAspectElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "collection":
							var newItem_collection = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_collection, reader); // 130
							result.Collection.Add(newItem_collection);
							break;
						case "typeTested":
							var newItem_typeTested = new Hl7.Fhir.Model.SpecimenDefinition.TypeTestedComponent();
							Parse(newItem_typeTested, reader); // 140
							result.TypeTested.Add(newItem_typeTested);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(StructureDefinition result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUri, reader); // 90
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 100
							result.Identifier.Add(newItem_identifier);
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 130
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>, reader); // 140
							break;
						case "experimental":
							result.ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ExperimentalElement as Hl7.Fhir.Model.FhirBoolean, reader); // 150
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 160
							break;
						case "publisher":
							result.PublisherElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PublisherElement as Hl7.Fhir.Model.FhirString, reader); // 170
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_contact, reader); // 180
							result.Contact.Add(newItem_contact);
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.Markdown();
							Parse(result.Description as Hl7.Fhir.Model.Markdown, reader); // 190
							break;
						case "useContext":
							var newItem_useContext = new Hl7.Fhir.Model.UsageContext();
							Parse(newItem_useContext, reader); // 200
							result.UseContext.Add(newItem_useContext);
							break;
						case "jurisdiction":
							var newItem_jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_jurisdiction, reader); // 210
							result.Jurisdiction.Add(newItem_jurisdiction);
							break;
						case "purpose":
							result.Purpose = new Hl7.Fhir.Model.Markdown();
							Parse(result.Purpose as Hl7.Fhir.Model.Markdown, reader); // 220
							break;
						case "copyright":
							result.Copyright = new Hl7.Fhir.Model.Markdown();
							Parse(result.Copyright as Hl7.Fhir.Model.Markdown, reader); // 230
							break;
						case "keyword":
							var newItem_keyword = new Hl7.Fhir.Model.Coding();
							Parse(newItem_keyword, reader); // 240
							result.Keyword.Add(newItem_keyword);
							break;
						case "fhirVersion":
							result.FhirVersionElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FHIRVersion>();
							Parse(result.FhirVersionElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FHIRVersion>, reader); // 250
							break;
						case "mapping":
							var newItem_mapping = new Hl7.Fhir.Model.StructureDefinition.MappingComponent();
							Parse(newItem_mapping, reader); // 260
							result.Mapping.Add(newItem_mapping);
							break;
						case "kind":
							result.KindElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.StructureDefinition.StructureDefinitionKind>();
							Parse(result.KindElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.StructureDefinition.StructureDefinitionKind>, reader); // 270
							break;
						case "abstract":
							result.AbstractElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.AbstractElement as Hl7.Fhir.Model.FhirBoolean, reader); // 280
							break;
						case "context":
							var newItem_context = new Hl7.Fhir.Model.StructureDefinition.ContextComponent();
							Parse(newItem_context, reader); // 290
							result.Context.Add(newItem_context);
							break;
						case "contextInvariant":
							var newItem_contextInvariant = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_contextInvariant, reader); // 300
							result.ContextInvariantElement.Add(newItem_contextInvariant);
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.TypeElement as Hl7.Fhir.Model.FhirUri, reader); // 310
							break;
						case "baseDefinition":
							result.BaseDefinitionElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.BaseDefinitionElement as Hl7.Fhir.Model.Canonical, reader); // 320
							break;
						case "derivation":
							result.DerivationElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.StructureDefinition.TypeDerivationRule>();
							Parse(result.DerivationElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.StructureDefinition.TypeDerivationRule>, reader); // 330
							break;
						case "snapshot":
							result.Snapshot = new Hl7.Fhir.Model.StructureDefinition.SnapshotComponent();
							Parse(result.Snapshot as Hl7.Fhir.Model.StructureDefinition.SnapshotComponent, reader); // 340
							break;
						case "differential":
							result.Differential = new Hl7.Fhir.Model.StructureDefinition.DifferentialComponent();
							Parse(result.Differential as Hl7.Fhir.Model.StructureDefinition.DifferentialComponent, reader); // 350
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(StructureMap result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUri, reader); // 90
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 100
							result.Identifier.Add(newItem_identifier);
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 130
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>, reader); // 140
							break;
						case "experimental":
							result.ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ExperimentalElement as Hl7.Fhir.Model.FhirBoolean, reader); // 150
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 160
							break;
						case "publisher":
							result.PublisherElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PublisherElement as Hl7.Fhir.Model.FhirString, reader); // 170
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_contact, reader); // 180
							result.Contact.Add(newItem_contact);
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.Markdown();
							Parse(result.Description as Hl7.Fhir.Model.Markdown, reader); // 190
							break;
						case "useContext":
							var newItem_useContext = new Hl7.Fhir.Model.UsageContext();
							Parse(newItem_useContext, reader); // 200
							result.UseContext.Add(newItem_useContext);
							break;
						case "jurisdiction":
							var newItem_jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_jurisdiction, reader); // 210
							result.Jurisdiction.Add(newItem_jurisdiction);
							break;
						case "purpose":
							result.Purpose = new Hl7.Fhir.Model.Markdown();
							Parse(result.Purpose as Hl7.Fhir.Model.Markdown, reader); // 220
							break;
						case "copyright":
							result.Copyright = new Hl7.Fhir.Model.Markdown();
							Parse(result.Copyright as Hl7.Fhir.Model.Markdown, reader); // 230
							break;
						case "structure":
							var newItem_structure = new Hl7.Fhir.Model.StructureMap.StructureComponent();
							Parse(newItem_structure, reader); // 240
							result.Structure.Add(newItem_structure);
							break;
						case "import":
							var newItem_import = new Hl7.Fhir.Model.Canonical();
							Parse(newItem_import, reader); // 250
							result.ImportElement.Add(newItem_import);
							break;
						case "group":
							var newItem_group = new Hl7.Fhir.Model.StructureMap.GroupComponent();
							Parse(newItem_group, reader); // 260
							result.Group.Add(newItem_group);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Subscription result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Subscription.SubscriptionStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Subscription.SubscriptionStatus>, reader); // 90
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.ContactPoint();
							Parse(newItem_contact, reader); // 100
							result.Contact.Add(newItem_contact);
							break;
						case "end":
							result.EndElement = new Hl7.Fhir.Model.Instant();
							Parse(result.EndElement as Hl7.Fhir.Model.Instant, reader); // 110
							break;
						case "reason":
							result.ReasonElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ReasonElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "criteria":
							result.CriteriaElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.CriteriaElement as Hl7.Fhir.Model.FhirString, reader); // 130
							break;
						case "error":
							result.ErrorElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ErrorElement as Hl7.Fhir.Model.FhirString, reader); // 140
							break;
						case "channel":
							result.Channel = new Hl7.Fhir.Model.Subscription.ChannelComponent();
							Parse(result.Channel as Hl7.Fhir.Model.Subscription.ChannelComponent, reader); // 150
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Substance result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Substance.FHIRSubstanceStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Substance.FHIRSubstanceStatus>, reader); // 100
							break;
						case "category":
							var newItem_category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_category, reader); // 110
							result.Category.Add(newItem_category);
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 120
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 130
							break;
						case "instance":
							var newItem_instance = new Hl7.Fhir.Model.Substance.InstanceComponent();
							Parse(newItem_instance, reader); // 140
							result.Instance.Add(newItem_instance);
							break;
						case "ingredient":
							var newItem_ingredient = new Hl7.Fhir.Model.Substance.IngredientComponent();
							Parse(newItem_ingredient, reader); // 150
							result.Ingredient.Add(newItem_ingredient);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(SubstanceNucleicAcid result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "sequenceType":
							result.SequenceType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.SequenceType as Hl7.Fhir.Model.CodeableConcept, reader); // 90
							break;
						case "numberOfSubunits":
							result.NumberOfSubunitsElement = new Hl7.Fhir.Model.Integer();
							Parse(result.NumberOfSubunitsElement as Hl7.Fhir.Model.Integer, reader); // 100
							break;
						case "areaOfHybridisation":
							result.AreaOfHybridisationElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.AreaOfHybridisationElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "oligoNucleotideType":
							result.OligoNucleotideType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.OligoNucleotideType as Hl7.Fhir.Model.CodeableConcept, reader); // 120
							break;
						case "subunit":
							var newItem_subunit = new Hl7.Fhir.Model.SubstanceNucleicAcid.SubunitComponent();
							Parse(newItem_subunit, reader); // 130
							result.Subunit.Add(newItem_subunit);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(SubstancePolymer result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "class":
							result.Class = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Class as Hl7.Fhir.Model.CodeableConcept, reader); // 90
							break;
						case "geometry":
							result.Geometry = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Geometry as Hl7.Fhir.Model.CodeableConcept, reader); // 100
							break;
						case "copolymerConnectivity":
							var newItem_copolymerConnectivity = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_copolymerConnectivity, reader); // 110
							result.CopolymerConnectivity.Add(newItem_copolymerConnectivity);
							break;
						case "modification":
							var newItem_modification = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_modification, reader); // 120
							result.ModificationElement.Add(newItem_modification);
							break;
						case "monomerSet":
							var newItem_monomerSet = new Hl7.Fhir.Model.SubstancePolymer.MonomerSetComponent();
							Parse(newItem_monomerSet, reader); // 130
							result.MonomerSet.Add(newItem_monomerSet);
							break;
						case "repeat":
							var newItem_repeat = new Hl7.Fhir.Model.SubstancePolymer.RepeatComponent();
							Parse(newItem_repeat, reader); // 140
							result.Repeat.Add(newItem_repeat);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(SubstanceProtein result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "sequenceType":
							result.SequenceType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.SequenceType as Hl7.Fhir.Model.CodeableConcept, reader); // 90
							break;
						case "numberOfSubunits":
							result.NumberOfSubunitsElement = new Hl7.Fhir.Model.Integer();
							Parse(result.NumberOfSubunitsElement as Hl7.Fhir.Model.Integer, reader); // 100
							break;
						case "disulfideLinkage":
							var newItem_disulfideLinkage = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_disulfideLinkage, reader); // 110
							result.DisulfideLinkageElement.Add(newItem_disulfideLinkage);
							break;
						case "subunit":
							var newItem_subunit = new Hl7.Fhir.Model.SubstanceProtein.SubunitComponent();
							Parse(newItem_subunit, reader); // 120
							result.Subunit.Add(newItem_subunit);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(SubstanceReferenceInformation result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "comment":
							result.CommentElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.CommentElement as Hl7.Fhir.Model.FhirString, reader); // 90
							break;
						case "gene":
							var newItem_gene = new Hl7.Fhir.Model.SubstanceReferenceInformation.GeneComponent();
							Parse(newItem_gene, reader); // 100
							result.Gene.Add(newItem_gene);
							break;
						case "geneElement":
							var newItem_geneElement = new Hl7.Fhir.Model.SubstanceReferenceInformation.GeneElementComponent();
							Parse(newItem_geneElement, reader); // 110
							result.GeneElement.Add(newItem_geneElement);
							break;
						case "classification":
							var newItem_classification = new Hl7.Fhir.Model.SubstanceReferenceInformation.ClassificationComponent();
							Parse(newItem_classification, reader); // 120
							result.Classification.Add(newItem_classification);
							break;
						case "target":
							var newItem_target = new Hl7.Fhir.Model.SubstanceReferenceInformation.TargetComponent();
							Parse(newItem_target, reader); // 130
							result.Target.Add(newItem_target);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(SubstanceSourceMaterial result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "sourceMaterialClass":
							result.SourceMaterialClass = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.SourceMaterialClass as Hl7.Fhir.Model.CodeableConcept, reader); // 90
							break;
						case "sourceMaterialType":
							result.SourceMaterialType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.SourceMaterialType as Hl7.Fhir.Model.CodeableConcept, reader); // 100
							break;
						case "sourceMaterialState":
							result.SourceMaterialState = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.SourceMaterialState as Hl7.Fhir.Model.CodeableConcept, reader); // 110
							break;
						case "organismId":
							result.OrganismId = new Hl7.Fhir.Model.Identifier();
							Parse(result.OrganismId as Hl7.Fhir.Model.Identifier, reader); // 120
							break;
						case "organismName":
							result.OrganismNameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.OrganismNameElement as Hl7.Fhir.Model.FhirString, reader); // 130
							break;
						case "parentSubstanceId":
							var newItem_parentSubstanceId = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_parentSubstanceId, reader); // 140
							result.ParentSubstanceId.Add(newItem_parentSubstanceId);
							break;
						case "parentSubstanceName":
							var newItem_parentSubstanceName = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_parentSubstanceName, reader); // 150
							result.ParentSubstanceNameElement.Add(newItem_parentSubstanceName);
							break;
						case "countryOfOrigin":
							var newItem_countryOfOrigin = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_countryOfOrigin, reader); // 160
							result.CountryOfOrigin.Add(newItem_countryOfOrigin);
							break;
						case "geographicalLocation":
							var newItem_geographicalLocation = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_geographicalLocation, reader); // 170
							result.GeographicalLocationElement.Add(newItem_geographicalLocation);
							break;
						case "developmentStage":
							result.DevelopmentStage = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.DevelopmentStage as Hl7.Fhir.Model.CodeableConcept, reader); // 180
							break;
						case "fractionDescription":
							var newItem_fractionDescription = new Hl7.Fhir.Model.SubstanceSourceMaterial.FractionDescriptionComponent();
							Parse(newItem_fractionDescription, reader); // 190
							result.FractionDescription.Add(newItem_fractionDescription);
							break;
						case "organism":
							result.Organism = new Hl7.Fhir.Model.SubstanceSourceMaterial.OrganismComponent();
							Parse(result.Organism as Hl7.Fhir.Model.SubstanceSourceMaterial.OrganismComponent, reader); // 200
							break;
						case "partDescription":
							var newItem_partDescription = new Hl7.Fhir.Model.SubstanceSourceMaterial.PartDescriptionComponent();
							Parse(newItem_partDescription, reader); // 210
							result.PartDescription.Add(newItem_partDescription);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(SubstanceSpecification result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							result.Identifier = new Hl7.Fhir.Model.Identifier();
							Parse(result.Identifier as Hl7.Fhir.Model.Identifier, reader); // 90
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 100
							break;
						case "status":
							result.Status = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Status as Hl7.Fhir.Model.CodeableConcept, reader); // 110
							break;
						case "domain":
							result.Domain = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Domain as Hl7.Fhir.Model.CodeableConcept, reader); // 120
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 130
							break;
						case "source":
							var newItem_source = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_source, reader); // 140
							result.Source.Add(newItem_source);
							break;
						case "comment":
							result.CommentElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.CommentElement as Hl7.Fhir.Model.FhirString, reader); // 150
							break;
						case "moiety":
							var newItem_moiety = new Hl7.Fhir.Model.SubstanceSpecification.MoietyComponent();
							Parse(newItem_moiety, reader); // 160
							result.Moiety.Add(newItem_moiety);
							break;
						case "property":
							var newItem_property = new Hl7.Fhir.Model.SubstanceSpecification.PropertyComponent();
							Parse(newItem_property, reader); // 170
							result.Property.Add(newItem_property);
							break;
						case "referenceInformation":
							result.ReferenceInformation = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.ReferenceInformation as Hl7.Fhir.Model.ResourceReference, reader); // 180
							break;
						case "structure":
							result.Structure = new Hl7.Fhir.Model.SubstanceSpecification.StructureComponent();
							Parse(result.Structure as Hl7.Fhir.Model.SubstanceSpecification.StructureComponent, reader); // 190
							break;
						case "code":
							var newItem_code = new Hl7.Fhir.Model.SubstanceSpecification.CodeComponent();
							Parse(newItem_code, reader); // 200
							result.Code.Add(newItem_code);
							break;
						case "name":
							var newItem_name = new Hl7.Fhir.Model.SubstanceSpecification.NameComponent();
							Parse(newItem_name, reader); // 210
							result.Name.Add(newItem_name);
							break;
						case "molecularWeight":
							var newItem_molecularWeight = new Hl7.Fhir.Model.SubstanceSpecification.MolecularWeightComponent();
							Parse(newItem_molecularWeight, reader); // 220
							result.MolecularWeight.Add(newItem_molecularWeight);
							break;
						case "relationship":
							var newItem_relationship = new Hl7.Fhir.Model.SubstanceSpecification.RelationshipComponent();
							Parse(newItem_relationship, reader); // 230
							result.Relationship.Add(newItem_relationship);
							break;
						case "nucleicAcid":
							result.NucleicAcid = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.NucleicAcid as Hl7.Fhir.Model.ResourceReference, reader); // 240
							break;
						case "polymer":
							result.Polymer = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Polymer as Hl7.Fhir.Model.ResourceReference, reader); // 250
							break;
						case "protein":
							result.Protein = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Protein as Hl7.Fhir.Model.ResourceReference, reader); // 260
							break;
						case "sourceMaterial":
							result.SourceMaterial = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.SourceMaterial as Hl7.Fhir.Model.ResourceReference, reader); // 270
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(SupplyDelivery result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "basedOn":
							var newItem_basedOn = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_basedOn, reader); // 100
							result.BasedOn.Add(newItem_basedOn);
							break;
						case "partOf":
							var newItem_partOf = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_partOf, reader); // 110
							result.PartOf.Add(newItem_partOf);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.SupplyDelivery.SupplyDeliveryStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.SupplyDelivery.SupplyDeliveryStatus>, reader); // 120
							break;
						case "patient":
							result.Patient = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Patient as Hl7.Fhir.Model.ResourceReference, reader); // 130
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 140
							break;
						case "suppliedItem":
							result.SuppliedItem = new Hl7.Fhir.Model.SupplyDelivery.SuppliedItemComponent();
							Parse(result.SuppliedItem as Hl7.Fhir.Model.SupplyDelivery.SuppliedItemComponent, reader); // 150
							break;
						case "occurrenceDateTime":
							result.Occurrence = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Occurrence as Hl7.Fhir.Model.FhirDateTime, reader); // 160
							break;
						case "occurrencePeriod":
							result.Occurrence = new Hl7.Fhir.Model.Period();
							Parse(result.Occurrence as Hl7.Fhir.Model.Period, reader); // 160
							break;
						case "occurrenceTiming":
							result.Occurrence = new Hl7.Fhir.Model.Timing();
							Parse(result.Occurrence as Hl7.Fhir.Model.Timing, reader); // 160
							break;
						case "supplier":
							result.Supplier = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Supplier as Hl7.Fhir.Model.ResourceReference, reader); // 170
							break;
						case "destination":
							result.Destination = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Destination as Hl7.Fhir.Model.ResourceReference, reader); // 180
							break;
						case "receiver":
							var newItem_receiver = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_receiver, reader); // 190
							result.Receiver.Add(newItem_receiver);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(SupplyRequest result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.SupplyRequest.SupplyRequestStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.SupplyRequest.SupplyRequestStatus>, reader); // 100
							break;
						case "category":
							result.Category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Category as Hl7.Fhir.Model.CodeableConcept, reader); // 110
							break;
						case "priority":
							result.PriorityElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestPriority>();
							Parse(result.PriorityElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestPriority>, reader); // 120
							break;
						case "itemCodeableConcept":
							result.Item = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Item as Hl7.Fhir.Model.CodeableConcept, reader); // 130
							break;
						case "itemReference":
							result.Item = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Item as Hl7.Fhir.Model.ResourceReference, reader); // 130
							break;
						case "quantity":
							result.Quantity = new Hl7.Fhir.Model.Quantity();
							Parse(result.Quantity as Hl7.Fhir.Model.Quantity, reader); // 140
							break;
						case "parameter":
							var newItem_parameter = new Hl7.Fhir.Model.SupplyRequest.ParameterComponent();
							Parse(newItem_parameter, reader); // 150
							result.Parameter.Add(newItem_parameter);
							break;
						case "occurrenceDateTime":
							result.Occurrence = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Occurrence as Hl7.Fhir.Model.FhirDateTime, reader); // 160
							break;
						case "occurrencePeriod":
							result.Occurrence = new Hl7.Fhir.Model.Period();
							Parse(result.Occurrence as Hl7.Fhir.Model.Period, reader); // 160
							break;
						case "occurrenceTiming":
							result.Occurrence = new Hl7.Fhir.Model.Timing();
							Parse(result.Occurrence as Hl7.Fhir.Model.Timing, reader); // 160
							break;
						case "authoredOn":
							result.AuthoredOnElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.AuthoredOnElement as Hl7.Fhir.Model.FhirDateTime, reader); // 170
							break;
						case "requester":
							result.Requester = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Requester as Hl7.Fhir.Model.ResourceReference, reader); // 180
							break;
						case "supplier":
							var newItem_supplier = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_supplier, reader); // 190
							result.Supplier.Add(newItem_supplier);
							break;
						case "reasonCode":
							var newItem_reasonCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_reasonCode, reader); // 200
							result.ReasonCode.Add(newItem_reasonCode);
							break;
						case "reasonReference":
							var newItem_reasonReference = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_reasonReference, reader); // 210
							result.ReasonReference.Add(newItem_reasonReference);
							break;
						case "deliverFrom":
							result.DeliverFrom = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.DeliverFrom as Hl7.Fhir.Model.ResourceReference, reader); // 220
							break;
						case "deliverTo":
							result.DeliverTo = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.DeliverTo as Hl7.Fhir.Model.ResourceReference, reader); // 230
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(Task result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "instantiatesCanonical":
							result.InstantiatesCanonicalElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.InstantiatesCanonicalElement as Hl7.Fhir.Model.Canonical, reader); // 100
							break;
						case "instantiatesUri":
							result.InstantiatesUriElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.InstantiatesUriElement as Hl7.Fhir.Model.FhirUri, reader); // 110
							break;
						case "basedOn":
							var newItem_basedOn = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_basedOn, reader); // 120
							result.BasedOn.Add(newItem_basedOn);
							break;
						case "groupIdentifier":
							result.GroupIdentifier = new Hl7.Fhir.Model.Identifier();
							Parse(result.GroupIdentifier as Hl7.Fhir.Model.Identifier, reader); // 130
							break;
						case "partOf":
							var newItem_partOf = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_partOf, reader); // 140
							result.PartOf.Add(newItem_partOf);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Task.TaskStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Task.TaskStatus>, reader); // 150
							break;
						case "statusReason":
							result.StatusReason = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.StatusReason as Hl7.Fhir.Model.CodeableConcept, reader); // 160
							break;
						case "businessStatus":
							result.BusinessStatus = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.BusinessStatus as Hl7.Fhir.Model.CodeableConcept, reader); // 170
							break;
						case "intent":
							result.IntentElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Task.TaskIntent>();
							Parse(result.IntentElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Task.TaskIntent>, reader); // 180
							break;
						case "priority":
							result.PriorityElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestPriority>();
							Parse(result.PriorityElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestPriority>, reader); // 190
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 200
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 210
							break;
						case "focus":
							result.Focus = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Focus as Hl7.Fhir.Model.ResourceReference, reader); // 220
							break;
						case "for":
							result.For = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.For as Hl7.Fhir.Model.ResourceReference, reader); // 230
							break;
						case "encounter":
							result.Encounter = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Encounter as Hl7.Fhir.Model.ResourceReference, reader); // 240
							break;
						case "executionPeriod":
							result.ExecutionPeriod = new Hl7.Fhir.Model.Period();
							Parse(result.ExecutionPeriod as Hl7.Fhir.Model.Period, reader); // 250
							break;
						case "authoredOn":
							result.AuthoredOnElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.AuthoredOnElement as Hl7.Fhir.Model.FhirDateTime, reader); // 260
							break;
						case "lastModified":
							result.LastModifiedElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.LastModifiedElement as Hl7.Fhir.Model.FhirDateTime, reader); // 270
							break;
						case "requester":
							result.Requester = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Requester as Hl7.Fhir.Model.ResourceReference, reader); // 280
							break;
						case "performerType":
							var newItem_performerType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_performerType, reader); // 290
							result.PerformerType.Add(newItem_performerType);
							break;
						case "owner":
							result.Owner = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Owner as Hl7.Fhir.Model.ResourceReference, reader); // 300
							break;
						case "location":
							result.Location = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Location as Hl7.Fhir.Model.ResourceReference, reader); // 310
							break;
						case "reasonCode":
							result.ReasonCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.ReasonCode as Hl7.Fhir.Model.CodeableConcept, reader); // 320
							break;
						case "reasonReference":
							result.ReasonReference = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.ReasonReference as Hl7.Fhir.Model.ResourceReference, reader); // 330
							break;
						case "insurance":
							var newItem_insurance = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_insurance, reader); // 340
							result.Insurance.Add(newItem_insurance);
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 350
							result.Note.Add(newItem_note);
							break;
						case "relevantHistory":
							var newItem_relevantHistory = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_relevantHistory, reader); // 360
							result.RelevantHistory.Add(newItem_relevantHistory);
							break;
						case "restriction":
							result.Restriction = new Hl7.Fhir.Model.Task.RestrictionComponent();
							Parse(result.Restriction as Hl7.Fhir.Model.Task.RestrictionComponent, reader); // 370
							break;
						case "input":
							var newItem_input = new Hl7.Fhir.Model.Task.ParameterComponent();
							Parse(newItem_input, reader); // 380
							result.Input.Add(newItem_input);
							break;
						case "output":
							var newItem_output = new Hl7.Fhir.Model.Task.OutputComponent();
							Parse(newItem_output, reader); // 390
							result.Output.Add(newItem_output);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(TerminologyCapabilities result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUri, reader); // 90
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 100
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>, reader); // 130
							break;
						case "experimental":
							result.ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ExperimentalElement as Hl7.Fhir.Model.FhirBoolean, reader); // 140
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 150
							break;
						case "publisher":
							result.PublisherElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PublisherElement as Hl7.Fhir.Model.FhirString, reader); // 160
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_contact, reader); // 170
							result.Contact.Add(newItem_contact);
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.Markdown();
							Parse(result.Description as Hl7.Fhir.Model.Markdown, reader); // 180
							break;
						case "useContext":
							var newItem_useContext = new Hl7.Fhir.Model.UsageContext();
							Parse(newItem_useContext, reader); // 190
							result.UseContext.Add(newItem_useContext);
							break;
						case "jurisdiction":
							var newItem_jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_jurisdiction, reader); // 200
							result.Jurisdiction.Add(newItem_jurisdiction);
							break;
						case "purpose":
							result.Purpose = new Hl7.Fhir.Model.Markdown();
							Parse(result.Purpose as Hl7.Fhir.Model.Markdown, reader); // 210
							break;
						case "copyright":
							result.Copyright = new Hl7.Fhir.Model.Markdown();
							Parse(result.Copyright as Hl7.Fhir.Model.Markdown, reader); // 220
							break;
						case "kind":
							result.KindElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CapabilityStatementKind>();
							Parse(result.KindElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CapabilityStatementKind>, reader); // 230
							break;
						case "software":
							result.Software = new Hl7.Fhir.Model.TerminologyCapabilities.SoftwareComponent();
							Parse(result.Software as Hl7.Fhir.Model.TerminologyCapabilities.SoftwareComponent, reader); // 240
							break;
						case "implementation":
							result.Implementation = new Hl7.Fhir.Model.TerminologyCapabilities.ImplementationComponent();
							Parse(result.Implementation as Hl7.Fhir.Model.TerminologyCapabilities.ImplementationComponent, reader); // 250
							break;
						case "lockedDate":
							result.LockedDateElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.LockedDateElement as Hl7.Fhir.Model.FhirBoolean, reader); // 260
							break;
						case "codeSystem":
							var newItem_codeSystem = new Hl7.Fhir.Model.TerminologyCapabilities.CodeSystemComponent();
							Parse(newItem_codeSystem, reader); // 270
							result.CodeSystem.Add(newItem_codeSystem);
							break;
						case "expansion":
							result.Expansion = new Hl7.Fhir.Model.TerminologyCapabilities.ExpansionComponent();
							Parse(result.Expansion as Hl7.Fhir.Model.TerminologyCapabilities.ExpansionComponent, reader); // 280
							break;
						case "codeSearch":
							result.CodeSearchElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.TerminologyCapabilities.CodeSearchSupport>();
							Parse(result.CodeSearchElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.TerminologyCapabilities.CodeSearchSupport>, reader); // 290
							break;
						case "validateCode":
							result.ValidateCode = new Hl7.Fhir.Model.TerminologyCapabilities.ValidateCodeComponent();
							Parse(result.ValidateCode as Hl7.Fhir.Model.TerminologyCapabilities.ValidateCodeComponent, reader); // 300
							break;
						case "translation":
							result.Translation = new Hl7.Fhir.Model.TerminologyCapabilities.TranslationComponent();
							Parse(result.Translation as Hl7.Fhir.Model.TerminologyCapabilities.TranslationComponent, reader); // 310
							break;
						case "closure":
							result.Closure = new Hl7.Fhir.Model.TerminologyCapabilities.ClosureComponent();
							Parse(result.Closure as Hl7.Fhir.Model.TerminologyCapabilities.ClosureComponent, reader); // 320
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(TestReport result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							result.Identifier = new Hl7.Fhir.Model.Identifier();
							Parse(result.Identifier as Hl7.Fhir.Model.Identifier, reader); // 90
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 100
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.TestReport.TestReportStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.TestReport.TestReportStatus>, reader); // 110
							break;
						case "testScript":
							result.TestScript = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.TestScript as Hl7.Fhir.Model.ResourceReference, reader); // 120
							break;
						case "result":
							result.ResultElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.TestReport.TestReportResult>();
							Parse(result.ResultElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.TestReport.TestReportResult>, reader); // 130
							break;
						case "score":
							result.ScoreElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.ScoreElement as Hl7.Fhir.Model.FhirDecimal, reader); // 140
							break;
						case "tester":
							result.TesterElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TesterElement as Hl7.Fhir.Model.FhirString, reader); // 150
							break;
						case "issued":
							result.IssuedElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.IssuedElement as Hl7.Fhir.Model.FhirDateTime, reader); // 160
							break;
						case "participant":
							var newItem_participant = new Hl7.Fhir.Model.TestReport.ParticipantComponent();
							Parse(newItem_participant, reader); // 170
							result.Participant.Add(newItem_participant);
							break;
						case "setup":
							result.Setup = new Hl7.Fhir.Model.TestReport.SetupComponent();
							Parse(result.Setup as Hl7.Fhir.Model.TestReport.SetupComponent, reader); // 180
							break;
						case "test":
							var newItem_test = new Hl7.Fhir.Model.TestReport.TestComponent();
							Parse(newItem_test, reader); // 190
							result.Test.Add(newItem_test);
							break;
						case "teardown":
							result.Teardown = new Hl7.Fhir.Model.TestReport.TeardownComponent();
							Parse(result.Teardown as Hl7.Fhir.Model.TestReport.TeardownComponent, reader); // 200
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(TestScript result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUri, reader); // 90
							break;
						case "identifier":
							result.Identifier = new Hl7.Fhir.Model.Identifier();
							Parse(result.Identifier as Hl7.Fhir.Model.Identifier, reader); // 100
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 130
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>, reader); // 140
							break;
						case "experimental":
							result.ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ExperimentalElement as Hl7.Fhir.Model.FhirBoolean, reader); // 150
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 160
							break;
						case "publisher":
							result.PublisherElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PublisherElement as Hl7.Fhir.Model.FhirString, reader); // 170
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_contact, reader); // 180
							result.Contact.Add(newItem_contact);
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.Markdown();
							Parse(result.Description as Hl7.Fhir.Model.Markdown, reader); // 190
							break;
						case "useContext":
							var newItem_useContext = new Hl7.Fhir.Model.UsageContext();
							Parse(newItem_useContext, reader); // 200
							result.UseContext.Add(newItem_useContext);
							break;
						case "jurisdiction":
							var newItem_jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_jurisdiction, reader); // 210
							result.Jurisdiction.Add(newItem_jurisdiction);
							break;
						case "purpose":
							result.Purpose = new Hl7.Fhir.Model.Markdown();
							Parse(result.Purpose as Hl7.Fhir.Model.Markdown, reader); // 220
							break;
						case "copyright":
							result.Copyright = new Hl7.Fhir.Model.Markdown();
							Parse(result.Copyright as Hl7.Fhir.Model.Markdown, reader); // 230
							break;
						case "origin":
							var newItem_origin = new Hl7.Fhir.Model.TestScript.OriginComponent();
							Parse(newItem_origin, reader); // 240
							result.Origin.Add(newItem_origin);
							break;
						case "destination":
							var newItem_destination = new Hl7.Fhir.Model.TestScript.DestinationComponent();
							Parse(newItem_destination, reader); // 250
							result.Destination.Add(newItem_destination);
							break;
						case "metadata":
							result.Metadata = new Hl7.Fhir.Model.TestScript.MetadataComponent();
							Parse(result.Metadata as Hl7.Fhir.Model.TestScript.MetadataComponent, reader); // 260
							break;
						case "fixture":
							var newItem_fixture = new Hl7.Fhir.Model.TestScript.FixtureComponent();
							Parse(newItem_fixture, reader); // 270
							result.Fixture.Add(newItem_fixture);
							break;
						case "profile":
							var newItem_profile = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_profile, reader); // 280
							result.Profile.Add(newItem_profile);
							break;
						case "variable":
							var newItem_variable = new Hl7.Fhir.Model.TestScript.VariableComponent();
							Parse(newItem_variable, reader); // 290
							result.Variable.Add(newItem_variable);
							break;
						case "setup":
							result.Setup = new Hl7.Fhir.Model.TestScript.SetupComponent();
							Parse(result.Setup as Hl7.Fhir.Model.TestScript.SetupComponent, reader); // 300
							break;
						case "test":
							var newItem_test = new Hl7.Fhir.Model.TestScript.TestComponent();
							Parse(newItem_test, reader); // 310
							result.Test.Add(newItem_test);
							break;
						case "teardown":
							result.Teardown = new Hl7.Fhir.Model.TestScript.TeardownComponent();
							Parse(result.Teardown as Hl7.Fhir.Model.TestScript.TeardownComponent, reader); // 320
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(ValueSet result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUri, reader); // 90
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 100
							result.Identifier.Add(newItem_identifier);
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 130
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.PublicationStatus>, reader); // 140
							break;
						case "experimental":
							result.ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ExperimentalElement as Hl7.Fhir.Model.FhirBoolean, reader); // 150
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 160
							break;
						case "publisher":
							result.PublisherElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PublisherElement as Hl7.Fhir.Model.FhirString, reader); // 170
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_contact, reader); // 180
							result.Contact.Add(newItem_contact);
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.Markdown();
							Parse(result.Description as Hl7.Fhir.Model.Markdown, reader); // 190
							break;
						case "useContext":
							var newItem_useContext = new Hl7.Fhir.Model.UsageContext();
							Parse(newItem_useContext, reader); // 200
							result.UseContext.Add(newItem_useContext);
							break;
						case "jurisdiction":
							var newItem_jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_jurisdiction, reader); // 210
							result.Jurisdiction.Add(newItem_jurisdiction);
							break;
						case "immutable":
							result.ImmutableElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ImmutableElement as Hl7.Fhir.Model.FhirBoolean, reader); // 220
							break;
						case "purpose":
							result.Purpose = new Hl7.Fhir.Model.Markdown();
							Parse(result.Purpose as Hl7.Fhir.Model.Markdown, reader); // 230
							break;
						case "copyright":
							result.Copyright = new Hl7.Fhir.Model.Markdown();
							Parse(result.Copyright as Hl7.Fhir.Model.Markdown, reader); // 240
							break;
						case "compose":
							result.Compose = new Hl7.Fhir.Model.ValueSet.ComposeComponent();
							Parse(result.Compose as Hl7.Fhir.Model.ValueSet.ComposeComponent, reader); // 250
							break;
						case "expansion":
							result.Expansion = new Hl7.Fhir.Model.ValueSet.ExpansionComponent();
							Parse(result.Expansion as Hl7.Fhir.Model.ValueSet.ExpansionComponent, reader); // 260
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(VerificationResult result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "target":
							var newItem_target = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_target, reader); // 90
							result.Target.Add(newItem_target);
							break;
						case "targetLocation":
							var newItem_targetLocation = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_targetLocation, reader); // 100
							result.TargetLocationElement.Add(newItem_targetLocation);
							break;
						case "need":
							result.Need = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Need as Hl7.Fhir.Model.CodeableConcept, reader); // 110
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.VerificationResult.status>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.VerificationResult.status>, reader); // 120
							break;
						case "statusDate":
							result.StatusDateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.StatusDateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 130
							break;
						case "validationType":
							result.ValidationType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.ValidationType as Hl7.Fhir.Model.CodeableConcept, reader); // 140
							break;
						case "validationProcess":
							var newItem_validationProcess = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_validationProcess, reader); // 150
							result.ValidationProcess.Add(newItem_validationProcess);
							break;
						case "frequency":
							result.Frequency = new Hl7.Fhir.Model.Timing();
							Parse(result.Frequency as Hl7.Fhir.Model.Timing, reader); // 160
							break;
						case "lastPerformed":
							result.LastPerformedElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.LastPerformedElement as Hl7.Fhir.Model.FhirDateTime, reader); // 170
							break;
						case "nextScheduled":
							result.NextScheduledElement = new Hl7.Fhir.Model.Date();
							Parse(result.NextScheduledElement as Hl7.Fhir.Model.Date, reader); // 180
							break;
						case "failureAction":
							result.FailureAction = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.FailureAction as Hl7.Fhir.Model.CodeableConcept, reader); // 190
							break;
						case "primarySource":
							var newItem_primarySource = new Hl7.Fhir.Model.VerificationResult.PrimarySourceComponent();
							Parse(newItem_primarySource, reader); // 200
							result.PrimarySource.Add(newItem_primarySource);
							break;
						case "attestation":
							result.Attestation = new Hl7.Fhir.Model.VerificationResult.AttestationComponent();
							Parse(result.Attestation as Hl7.Fhir.Model.VerificationResult.AttestationComponent, reader); // 210
							break;
						case "validator":
							var newItem_validator = new Hl7.Fhir.Model.VerificationResult.ValidatorComponent();
							Parse(newItem_validator, reader); // 220
							result.Validator.Add(newItem_validator);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

		private void Parse(VisionPrescription result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
				reader.Read();
			
			if (reader.EOF)
				return;
			
			// if (reader.IsStartElement())
			// {
			//     if (contextLocation.Count > 0)
			//         contextLocation.Push(contextLocation.Peek() + "." + reader.Name);
			//     else
			//         contextLocation.Push(reader.Name);
			// }
			// System.Diagnostics.Trace.WriteLine(contextLocation.Peek());
			
			if (reader.IsEmptyElement)
			{
				// contextLocation.Pop();
				return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
			    if (reader.IsStartElement())
			    {
					switch (reader.Name)
					{
						case "id":
							result.IdElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdElement as Hl7.Fhir.Model.Id, reader); // 10
							break;
						case "meta":
							result.Meta = new Hl7.Fhir.Model.Meta();
							Parse(result.Meta as Hl7.Fhir.Model.Meta, reader); // 20
							break;
						case "implicitRules":
							result.ImplicitRulesElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ImplicitRulesElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 50
							break;
						case "contained":
							// FirstChildOf(reader); // 60
							var ContainedResource = Parse(reader);
							if (ContainedResource != null)
								result.Contained.Add(ContainedResource);
							reader.Read();
							break;
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 70
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 80
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 90
							result.Identifier.Add(newItem_identifier);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>, reader); // 100
							break;
						case "created":
							result.CreatedElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.CreatedElement as Hl7.Fhir.Model.FhirDateTime, reader); // 110
							break;
						case "patient":
							result.Patient = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Patient as Hl7.Fhir.Model.ResourceReference, reader); // 120
							break;
						case "encounter":
							result.Encounter = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Encounter as Hl7.Fhir.Model.ResourceReference, reader); // 130
							break;
						case "dateWritten":
							result.DateWrittenElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateWrittenElement as Hl7.Fhir.Model.FhirDateTime, reader); // 140
							break;
						case "prescriber":
							result.Prescriber = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Prescriber as Hl7.Fhir.Model.ResourceReference, reader); // 150
							break;
						case "lensSpecification":
							var newItem_lensSpecification = new Hl7.Fhir.Model.VisionPrescription.LensSpecificationComponent();
							Parse(newItem_lensSpecification, reader); // 160
							result.LensSpecification.Add(newItem_lensSpecification);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {reader.Name}\");
							reader.ReadOuterXml();
							break;
					}
			    }
			    else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
			    {
			        break;
			    }
		}
	}

#endregion
// ---------------------------
		// Hl7.Fhir.Model.Address
		public void Parse(Hl7.Fhir.Model.Address result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "use":
							result.UseElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Address.AddressUse>();
							Parse(result.UseElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Address.AddressUse>, reader); // 30
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Address.AddressType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Address.AddressType>, reader); // 40
							break;
						case "text":
							result.TextElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TextElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "line":
							var newItem_line = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_line, reader); // 60
							result.LineElement.Add(newItem_line);
							break;
						case "city":
							result.CityElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.CityElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						case "district":
							result.DistrictElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DistrictElement as Hl7.Fhir.Model.FhirString, reader); // 80
							break;
						case "state":
							result.StateElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.StateElement as Hl7.Fhir.Model.FhirString, reader); // 90
							break;
						case "postalCode":
							result.PostalCodeElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PostalCodeElement as Hl7.Fhir.Model.FhirString, reader); // 100
							break;
						case "country":
							result.CountryElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.CountryElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 120
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Age
		public void Parse(Hl7.Fhir.Model.Age result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "value":
							result.ValueElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.ValueElement as Hl7.Fhir.Model.FhirDecimal, reader); // 30
							break;
						case "comparator":
							result.ComparatorElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Quantity.QuantityComparator>();
							Parse(result.ComparatorElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Quantity.QuantityComparator>, reader); // 40
							break;
						case "unit":
							result.UnitElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.UnitElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "system":
							result.SystemElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.SystemElement as Hl7.Fhir.Model.FhirUri, reader); // 60
							break;
						case "code":
							result.CodeElement = new Hl7.Fhir.Model.Code();
							Parse(result.CodeElement as Hl7.Fhir.Model.Code, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Annotation
		public void Parse(Hl7.Fhir.Model.Annotation result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "authorReference":
							result.Author = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Author as Hl7.Fhir.Model.ResourceReference, reader); // 30
							break;
						case "authorString":
							result.Author = new Hl7.Fhir.Model.FhirString();
							Parse(result.Author as Hl7.Fhir.Model.FhirString, reader); // 30
							break;
						case "time":
							result.TimeElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.TimeElement as Hl7.Fhir.Model.FhirDateTime, reader); // 40
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Markdown();
							Parse(result.Text as Hl7.Fhir.Model.Markdown, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Attachment
		public void Parse(Hl7.Fhir.Model.Attachment result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "contentType":
							result.ContentTypeElement = new Hl7.Fhir.Model.Code();
							Parse(result.ContentTypeElement as Hl7.Fhir.Model.Code, reader); // 30
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "data":
							result.DataElement = new Hl7.Fhir.Model.Base64Binary();
							Parse(result.DataElement as Hl7.Fhir.Model.Base64Binary, reader); // 50
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUrl();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUrl, reader); // 60
							break;
						case "size":
							result.SizeElement = new Hl7.Fhir.Model.UnsignedInt();
							Parse(result.SizeElement as Hl7.Fhir.Model.UnsignedInt, reader); // 70
							break;
						case "hash":
							result.HashElement = new Hl7.Fhir.Model.Base64Binary();
							Parse(result.HashElement as Hl7.Fhir.Model.Base64Binary, reader); // 80
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 90
							break;
						case "creation":
							result.CreationElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.CreationElement as Hl7.Fhir.Model.FhirDateTime, reader); // 100
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.BackboneElement
		[Obsolete("This should not be used",false)]
		public void Parse(Hl7.Fhir.Model.BackboneElement result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Base64Binary
		public void Parse(Hl7.Fhir.Model.Base64Binary result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "value":
							result.Value = Hl7.Fhir.Serialization.PrimitiveTypeConverter.ConvertTo<System.Byte[]>(reader.Value);
							break;
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.FhirBoolean
		public void Parse(Hl7.Fhir.Model.FhirBoolean result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "value":
							result.Value = Hl7.Fhir.Serialization.PrimitiveTypeConverter.ConvertTo<System.Boolean>(reader.Value);
							break;
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Canonical
		public void Parse(Hl7.Fhir.Model.Canonical result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "value":
							result.Value = reader.Value;
							break;
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Code
		public void Parse(Hl7.Fhir.Model.Code result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "value":
							result.Value = reader.Value;
							break;
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CodeableConcept
		public void Parse(Hl7.Fhir.Model.CodeableConcept result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "coding":
							var newItem_coding = new Hl7.Fhir.Model.Coding();
							Parse(newItem_coding, reader); // 30
							result.Coding.Add(newItem_coding);
							break;
						case "text":
							result.TextElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TextElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Coding
		public void Parse(Hl7.Fhir.Model.Coding result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "system":
							result.SystemElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.SystemElement as Hl7.Fhir.Model.FhirUri, reader); // 30
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "code":
							result.CodeElement = new Hl7.Fhir.Model.Code();
							Parse(result.CodeElement as Hl7.Fhir.Model.Code, reader); // 50
							break;
						case "display":
							result.DisplayElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DisplayElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "userSelected":
							result.UserSelectedElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.UserSelectedElement as Hl7.Fhir.Model.FhirBoolean, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ContactDetail
		public void Parse(Hl7.Fhir.Model.ContactDetail result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 30
							break;
						case "telecom":
							var newItem_telecom = new Hl7.Fhir.Model.ContactPoint();
							Parse(newItem_telecom, reader); // 40
							result.Telecom.Add(newItem_telecom);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ContactPoint
		public void Parse(Hl7.Fhir.Model.ContactPoint result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "system":
							result.SystemElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ContactPoint.ContactPointSystem>();
							Parse(result.SystemElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ContactPoint.ContactPointSystem>, reader); // 30
							break;
						case "value":
							result.ValueElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ValueElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "use":
							result.UseElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ContactPoint.ContactPointUse>();
							Parse(result.UseElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ContactPoint.ContactPointUse>, reader); // 50
							break;
						case "rank":
							result.RankElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.RankElement as Hl7.Fhir.Model.PositiveInt, reader); // 60
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Contributor
		public void Parse(Hl7.Fhir.Model.Contributor result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Contributor.ContributorType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Contributor.ContributorType>, reader); // 30
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "contact":
							var newItem_contact = new Hl7.Fhir.Model.ContactDetail();
							Parse(newItem_contact, reader); // 50
							result.Contact.Add(newItem_contact);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Count
		public void Parse(Hl7.Fhir.Model.Count result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "value":
							result.ValueElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.ValueElement as Hl7.Fhir.Model.FhirDecimal, reader); // 30
							break;
						case "comparator":
							result.ComparatorElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Quantity.QuantityComparator>();
							Parse(result.ComparatorElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Quantity.QuantityComparator>, reader); // 40
							break;
						case "unit":
							result.UnitElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.UnitElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "system":
							result.SystemElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.SystemElement as Hl7.Fhir.Model.FhirUri, reader); // 60
							break;
						case "code":
							result.CodeElement = new Hl7.Fhir.Model.Code();
							Parse(result.CodeElement as Hl7.Fhir.Model.Code, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.DataRequirement
		public void Parse(Hl7.Fhir.Model.DataRequirement result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FHIRAllTypes>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FHIRAllTypes>, reader); // 30
							break;
						case "profile":
							var newItem_profile = new Hl7.Fhir.Model.Canonical();
							Parse(newItem_profile, reader); // 40
							result.ProfileElement.Add(newItem_profile);
							break;
						case "subjectCodeableConcept":
							result.Subject = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Subject as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "subjectReference":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						case "mustSupport":
							var newItem_mustSupport = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_mustSupport, reader); // 60
							result.MustSupportElement.Add(newItem_mustSupport);
							break;
						case "codeFilter":
							var newItem_codeFilter = new Hl7.Fhir.Model.DataRequirement.CodeFilterComponent();
							Parse(newItem_codeFilter, reader); // 70
							result.CodeFilter.Add(newItem_codeFilter);
							break;
						case "dateFilter":
							var newItem_dateFilter = new Hl7.Fhir.Model.DataRequirement.DateFilterComponent();
							Parse(newItem_dateFilter, reader); // 80
							result.DateFilter.Add(newItem_dateFilter);
							break;
						case "limit":
							result.LimitElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.LimitElement as Hl7.Fhir.Model.PositiveInt, reader); // 90
							break;
						case "sort":
							var newItem_sort = new Hl7.Fhir.Model.DataRequirement.SortComponent();
							Parse(newItem_sort, reader); // 100
							result.Sort.Add(newItem_sort);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.DataRequirement.CodeFilterComponent
		public void Parse(Hl7.Fhir.Model.DataRequirement.CodeFilterComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "path":
							result.PathElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PathElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "searchParam":
							result.SearchParamElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.SearchParamElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "valueSet":
							result.ValueSetElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.ValueSetElement as Hl7.Fhir.Model.Canonical, reader); // 60
							break;
						case "code":
							var newItem_code = new Hl7.Fhir.Model.Coding();
							Parse(newItem_code, reader); // 70
							result.Code.Add(newItem_code);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.DataRequirement.DateFilterComponent
		public void Parse(Hl7.Fhir.Model.DataRequirement.DateFilterComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "path":
							result.PathElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PathElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "searchParam":
							result.SearchParamElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.SearchParamElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "valueDateTime":
							result.Value = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Value as Hl7.Fhir.Model.FhirDateTime, reader); // 60
							break;
						case "valuePeriod":
							result.Value = new Hl7.Fhir.Model.Period();
							Parse(result.Value as Hl7.Fhir.Model.Period, reader); // 60
							break;
						case "valueDuration":
							result.Value = new Hl7.Fhir.Model.Duration();
							Parse(result.Value as Hl7.Fhir.Model.Duration, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.DataRequirement.SortComponent
		public void Parse(Hl7.Fhir.Model.DataRequirement.SortComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "path":
							result.PathElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PathElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "direction":
							result.DirectionElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DataRequirement.SortDirection>();
							Parse(result.DirectionElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DataRequirement.SortDirection>, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Date
		public void Parse(Hl7.Fhir.Model.Date result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "value":
							result.Value = reader.Value;
							break;
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.FhirDateTime
		public void Parse(Hl7.Fhir.Model.FhirDateTime result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "value":
							result.Value = reader.Value;
							break;
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.FhirDecimal
		public void Parse(Hl7.Fhir.Model.FhirDecimal result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "value":
							result.Value = Hl7.Fhir.Serialization.PrimitiveTypeConverter.ConvertTo<System.Decimal>(reader.Value);
							break;
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Distance
		public void Parse(Hl7.Fhir.Model.Distance result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "value":
							result.ValueElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.ValueElement as Hl7.Fhir.Model.FhirDecimal, reader); // 30
							break;
						case "comparator":
							result.ComparatorElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Quantity.QuantityComparator>();
							Parse(result.ComparatorElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Quantity.QuantityComparator>, reader); // 40
							break;
						case "unit":
							result.UnitElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.UnitElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "system":
							result.SystemElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.SystemElement as Hl7.Fhir.Model.FhirUri, reader); // 60
							break;
						case "code":
							result.CodeElement = new Hl7.Fhir.Model.Code();
							Parse(result.CodeElement as Hl7.Fhir.Model.Code, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Dosage
		public void Parse(Hl7.Fhir.Model.Dosage result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "sequence":
							result.SequenceElement = new Hl7.Fhir.Model.Integer();
							Parse(result.SequenceElement as Hl7.Fhir.Model.Integer, reader); // 90
							break;
						case "text":
							result.TextElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TextElement as Hl7.Fhir.Model.FhirString, reader); // 100
							break;
						case "additionalInstruction":
							var newItem_additionalInstruction = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_additionalInstruction, reader); // 110
							result.AdditionalInstruction.Add(newItem_additionalInstruction);
							break;
						case "patientInstruction":
							result.PatientInstructionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PatientInstructionElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "timing":
							result.Timing = new Hl7.Fhir.Model.Timing();
							Parse(result.Timing as Hl7.Fhir.Model.Timing, reader); // 130
							break;
						case "asNeededBoolean":
							result.AsNeeded = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.AsNeeded as Hl7.Fhir.Model.FhirBoolean, reader); // 140
							break;
						case "asNeededCodeableConcept":
							result.AsNeeded = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.AsNeeded as Hl7.Fhir.Model.CodeableConcept, reader); // 140
							break;
						case "site":
							result.Site = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Site as Hl7.Fhir.Model.CodeableConcept, reader); // 150
							break;
						case "route":
							result.Route = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Route as Hl7.Fhir.Model.CodeableConcept, reader); // 160
							break;
						case "method":
							result.Method = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Method as Hl7.Fhir.Model.CodeableConcept, reader); // 170
							break;
						case "doseAndRate":
							var newItem_doseAndRate = new Hl7.Fhir.Model.Dosage.DoseAndRateComponent();
							Parse(newItem_doseAndRate, reader); // 180
							result.DoseAndRate.Add(newItem_doseAndRate);
							break;
						case "maxDosePerPeriod":
							result.MaxDosePerPeriod = new Hl7.Fhir.Model.Ratio();
							Parse(result.MaxDosePerPeriod as Hl7.Fhir.Model.Ratio, reader); // 190
							break;
						case "maxDosePerAdministration":
							result.MaxDosePerAdministration = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.MaxDosePerAdministration as Hl7.Fhir.Model.SimpleQuantity, reader); // 200
							break;
						case "maxDosePerLifetime":
							result.MaxDosePerLifetime = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.MaxDosePerLifetime as Hl7.Fhir.Model.SimpleQuantity, reader); // 210
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Dosage.DoseAndRateComponent
		public void Parse(Hl7.Fhir.Model.Dosage.DoseAndRateComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "doseRange":
							result.Dose = new Hl7.Fhir.Model.Range();
							Parse(result.Dose as Hl7.Fhir.Model.Range, reader); // 50
							break;
						case "doseQuantity":
							result.Dose = new Hl7.Fhir.Model.Quantity();
							Parse(result.Dose as Hl7.Fhir.Model.Quantity, reader); // 50
							break;
						case "rateRatio":
							result.Rate = new Hl7.Fhir.Model.Ratio();
							Parse(result.Rate as Hl7.Fhir.Model.Ratio, reader); // 60
							break;
						case "rateRange":
							result.Rate = new Hl7.Fhir.Model.Range();
							Parse(result.Rate as Hl7.Fhir.Model.Range, reader); // 60
							break;
						case "rateQuantity":
							result.Rate = new Hl7.Fhir.Model.Quantity();
							Parse(result.Rate as Hl7.Fhir.Model.Quantity, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ElementDefinition
		public void Parse(Hl7.Fhir.Model.ElementDefinition result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "path":
							result.PathElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PathElement as Hl7.Fhir.Model.FhirString, reader); // 90
							break;
						case "representation":
							var newItem_representation = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ElementDefinition.PropertyRepresentation>();
							Parse(newItem_representation, reader); // 100
							result.RepresentationElement.Add(newItem_representation);
							break;
						case "sliceName":
							result.SliceNameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.SliceNameElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "sliceIsConstraining":
							result.SliceIsConstrainingElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.SliceIsConstrainingElement as Hl7.Fhir.Model.FhirBoolean, reader); // 120
							break;
						case "label":
							result.LabelElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.LabelElement as Hl7.Fhir.Model.FhirString, reader); // 130
							break;
						case "code":
							var newItem_code = new Hl7.Fhir.Model.Coding();
							Parse(newItem_code, reader); // 140
							result.Code.Add(newItem_code);
							break;
						case "slicing":
							result.Slicing = new Hl7.Fhir.Model.ElementDefinition.SlicingComponent();
							Parse(result.Slicing as Hl7.Fhir.Model.ElementDefinition.SlicingComponent, reader); // 150
							break;
						case "short":
							result.ShortElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ShortElement as Hl7.Fhir.Model.FhirString, reader); // 160
							break;
						case "definition":
							result.Definition = new Hl7.Fhir.Model.Markdown();
							Parse(result.Definition as Hl7.Fhir.Model.Markdown, reader); // 170
							break;
						case "comment":
							result.Comment = new Hl7.Fhir.Model.Markdown();
							Parse(result.Comment as Hl7.Fhir.Model.Markdown, reader); // 180
							break;
						case "requirements":
							result.Requirements = new Hl7.Fhir.Model.Markdown();
							Parse(result.Requirements as Hl7.Fhir.Model.Markdown, reader); // 190
							break;
						case "alias":
							var newItem_alias = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_alias, reader); // 200
							result.AliasElement.Add(newItem_alias);
							break;
						case "min":
							result.MinElement = new Hl7.Fhir.Model.UnsignedInt();
							Parse(result.MinElement as Hl7.Fhir.Model.UnsignedInt, reader); // 210
							break;
						case "max":
							result.MaxElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.MaxElement as Hl7.Fhir.Model.FhirString, reader); // 220
							break;
						case "base":
							result.Base = new Hl7.Fhir.Model.ElementDefinition.BaseComponent();
							Parse(result.Base as Hl7.Fhir.Model.ElementDefinition.BaseComponent, reader); // 230
							break;
						case "contentReference":
							result.ContentReferenceElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ContentReferenceElement as Hl7.Fhir.Model.FhirUri, reader); // 240
							break;
						case "type":
							var newItem_type = new Hl7.Fhir.Model.ElementDefinition.TypeRefComponent();
							Parse(newItem_type, reader); // 250
							result.Type.Add(newItem_type);
							break;
						case "defaultValueBase64Binary":
							result.DefaultValue = new Hl7.Fhir.Model.Base64Binary();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Base64Binary, reader); // 260
							break;
						case "defaultValueBoolean":
							result.DefaultValue = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.DefaultValue as Hl7.Fhir.Model.FhirBoolean, reader); // 260
							break;
						case "defaultValueCanonical":
							result.DefaultValue = new Hl7.Fhir.Model.Canonical();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Canonical, reader); // 260
							break;
						case "defaultValueCode":
							result.DefaultValue = new Hl7.Fhir.Model.Code();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Code, reader); // 260
							break;
						case "defaultValueDate":
							result.DefaultValue = new Hl7.Fhir.Model.Date();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Date, reader); // 260
							break;
						case "defaultValueDateTime":
							result.DefaultValue = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DefaultValue as Hl7.Fhir.Model.FhirDateTime, reader); // 260
							break;
						case "defaultValueDecimal":
							result.DefaultValue = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.DefaultValue as Hl7.Fhir.Model.FhirDecimal, reader); // 260
							break;
						case "defaultValueId":
							result.DefaultValue = new Hl7.Fhir.Model.Id();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Id, reader); // 260
							break;
						case "defaultValueInstant":
							result.DefaultValue = new Hl7.Fhir.Model.Instant();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Instant, reader); // 260
							break;
						case "defaultValueInteger":
							result.DefaultValue = new Hl7.Fhir.Model.Integer();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Integer, reader); // 260
							break;
						case "defaultValueMarkdown":
							result.DefaultValue = new Hl7.Fhir.Model.Markdown();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Markdown, reader); // 260
							break;
						case "defaultValueOid":
							result.DefaultValue = new Hl7.Fhir.Model.Oid();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Oid, reader); // 260
							break;
						case "defaultValuePositiveInt":
							result.DefaultValue = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.DefaultValue as Hl7.Fhir.Model.PositiveInt, reader); // 260
							break;
						case "defaultValueString":
							result.DefaultValue = new Hl7.Fhir.Model.FhirString();
							Parse(result.DefaultValue as Hl7.Fhir.Model.FhirString, reader); // 260
							break;
						case "defaultValueTime":
							result.DefaultValue = new Hl7.Fhir.Model.Time();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Time, reader); // 260
							break;
						case "defaultValueUnsignedInt":
							result.DefaultValue = new Hl7.Fhir.Model.UnsignedInt();
							Parse(result.DefaultValue as Hl7.Fhir.Model.UnsignedInt, reader); // 260
							break;
						case "defaultValueUri":
							result.DefaultValue = new Hl7.Fhir.Model.FhirUri();
							Parse(result.DefaultValue as Hl7.Fhir.Model.FhirUri, reader); // 260
							break;
						case "defaultValueUrl":
							result.DefaultValue = new Hl7.Fhir.Model.FhirUrl();
							Parse(result.DefaultValue as Hl7.Fhir.Model.FhirUrl, reader); // 260
							break;
						case "defaultValueUuid":
							result.DefaultValue = new Hl7.Fhir.Model.Uuid();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Uuid, reader); // 260
							break;
						case "defaultValueAddress":
							result.DefaultValue = new Hl7.Fhir.Model.Address();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Address, reader); // 260
							break;
						case "defaultValueAge":
							result.DefaultValue = new Hl7.Fhir.Model.Age();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Age, reader); // 260
							break;
						case "defaultValueAnnotation":
							result.DefaultValue = new Hl7.Fhir.Model.Annotation();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Annotation, reader); // 260
							break;
						case "defaultValueAttachment":
							result.DefaultValue = new Hl7.Fhir.Model.Attachment();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Attachment, reader); // 260
							break;
						case "defaultValueCodeableConcept":
							result.DefaultValue = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.DefaultValue as Hl7.Fhir.Model.CodeableConcept, reader); // 260
							break;
						case "defaultValueCoding":
							result.DefaultValue = new Hl7.Fhir.Model.Coding();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Coding, reader); // 260
							break;
						case "defaultValueContactPoint":
							result.DefaultValue = new Hl7.Fhir.Model.ContactPoint();
							Parse(result.DefaultValue as Hl7.Fhir.Model.ContactPoint, reader); // 260
							break;
						case "defaultValueCount":
							result.DefaultValue = new Hl7.Fhir.Model.Count();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Count, reader); // 260
							break;
						case "defaultValueDistance":
							result.DefaultValue = new Hl7.Fhir.Model.Distance();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Distance, reader); // 260
							break;
						case "defaultValueDuration":
							result.DefaultValue = new Hl7.Fhir.Model.Duration();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Duration, reader); // 260
							break;
						case "defaultValueHumanName":
							result.DefaultValue = new Hl7.Fhir.Model.HumanName();
							Parse(result.DefaultValue as Hl7.Fhir.Model.HumanName, reader); // 260
							break;
						case "defaultValueIdentifier":
							result.DefaultValue = new Hl7.Fhir.Model.Identifier();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Identifier, reader); // 260
							break;
						case "defaultValueMoney":
							result.DefaultValue = new Hl7.Fhir.Model.Money();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Money, reader); // 260
							break;
						case "defaultValuePeriod":
							result.DefaultValue = new Hl7.Fhir.Model.Period();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Period, reader); // 260
							break;
						case "defaultValueQuantity":
							result.DefaultValue = new Hl7.Fhir.Model.Quantity();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Quantity, reader); // 260
							break;
						case "defaultValueRange":
							result.DefaultValue = new Hl7.Fhir.Model.Range();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Range, reader); // 260
							break;
						case "defaultValueRatio":
							result.DefaultValue = new Hl7.Fhir.Model.Ratio();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Ratio, reader); // 260
							break;
						case "defaultValueReference":
							result.DefaultValue = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.DefaultValue as Hl7.Fhir.Model.ResourceReference, reader); // 260
							break;
						case "defaultValueSampledData":
							result.DefaultValue = new Hl7.Fhir.Model.SampledData();
							Parse(result.DefaultValue as Hl7.Fhir.Model.SampledData, reader); // 260
							break;
						case "defaultValueSignature":
							result.DefaultValue = new Hl7.Fhir.Model.Signature();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Signature, reader); // 260
							break;
						case "defaultValueTiming":
							result.DefaultValue = new Hl7.Fhir.Model.Timing();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Timing, reader); // 260
							break;
						case "defaultValueContactDetail":
							result.DefaultValue = new Hl7.Fhir.Model.ContactDetail();
							Parse(result.DefaultValue as Hl7.Fhir.Model.ContactDetail, reader); // 260
							break;
						case "defaultValueContributor":
							result.DefaultValue = new Hl7.Fhir.Model.Contributor();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Contributor, reader); // 260
							break;
						case "defaultValueDataRequirement":
							result.DefaultValue = new Hl7.Fhir.Model.DataRequirement();
							Parse(result.DefaultValue as Hl7.Fhir.Model.DataRequirement, reader); // 260
							break;
						case "defaultValueExpression":
							result.DefaultValue = new Hl7.Fhir.Model.Expression();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Expression, reader); // 260
							break;
						case "defaultValueParameterDefinition":
							result.DefaultValue = new Hl7.Fhir.Model.ParameterDefinition();
							Parse(result.DefaultValue as Hl7.Fhir.Model.ParameterDefinition, reader); // 260
							break;
						case "defaultValueRelatedArtifact":
							result.DefaultValue = new Hl7.Fhir.Model.RelatedArtifact();
							Parse(result.DefaultValue as Hl7.Fhir.Model.RelatedArtifact, reader); // 260
							break;
						case "defaultValueTriggerDefinition":
							result.DefaultValue = new Hl7.Fhir.Model.TriggerDefinition();
							Parse(result.DefaultValue as Hl7.Fhir.Model.TriggerDefinition, reader); // 260
							break;
						case "defaultValueUsageContext":
							result.DefaultValue = new Hl7.Fhir.Model.UsageContext();
							Parse(result.DefaultValue as Hl7.Fhir.Model.UsageContext, reader); // 260
							break;
						case "defaultValueDosage":
							result.DefaultValue = new Hl7.Fhir.Model.Dosage();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Dosage, reader); // 260
							break;
						case "defaultValueMeta":
							result.DefaultValue = new Hl7.Fhir.Model.Meta();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Meta, reader); // 260
							break;
						case "meaningWhenMissing":
							result.MeaningWhenMissing = new Hl7.Fhir.Model.Markdown();
							Parse(result.MeaningWhenMissing as Hl7.Fhir.Model.Markdown, reader); // 270
							break;
						case "orderMeaning":
							result.OrderMeaningElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.OrderMeaningElement as Hl7.Fhir.Model.FhirString, reader); // 280
							break;
						case "fixedBase64Binary":
							result.Fixed = new Hl7.Fhir.Model.Base64Binary();
							Parse(result.Fixed as Hl7.Fhir.Model.Base64Binary, reader); // 290
							break;
						case "fixedBoolean":
							result.Fixed = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.Fixed as Hl7.Fhir.Model.FhirBoolean, reader); // 290
							break;
						case "fixedCanonical":
							result.Fixed = new Hl7.Fhir.Model.Canonical();
							Parse(result.Fixed as Hl7.Fhir.Model.Canonical, reader); // 290
							break;
						case "fixedCode":
							result.Fixed = new Hl7.Fhir.Model.Code();
							Parse(result.Fixed as Hl7.Fhir.Model.Code, reader); // 290
							break;
						case "fixedDate":
							result.Fixed = new Hl7.Fhir.Model.Date();
							Parse(result.Fixed as Hl7.Fhir.Model.Date, reader); // 290
							break;
						case "fixedDateTime":
							result.Fixed = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Fixed as Hl7.Fhir.Model.FhirDateTime, reader); // 290
							break;
						case "fixedDecimal":
							result.Fixed = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.Fixed as Hl7.Fhir.Model.FhirDecimal, reader); // 290
							break;
						case "fixedId":
							result.Fixed = new Hl7.Fhir.Model.Id();
							Parse(result.Fixed as Hl7.Fhir.Model.Id, reader); // 290
							break;
						case "fixedInstant":
							result.Fixed = new Hl7.Fhir.Model.Instant();
							Parse(result.Fixed as Hl7.Fhir.Model.Instant, reader); // 290
							break;
						case "fixedInteger":
							result.Fixed = new Hl7.Fhir.Model.Integer();
							Parse(result.Fixed as Hl7.Fhir.Model.Integer, reader); // 290
							break;
						case "fixedMarkdown":
							result.Fixed = new Hl7.Fhir.Model.Markdown();
							Parse(result.Fixed as Hl7.Fhir.Model.Markdown, reader); // 290
							break;
						case "fixedOid":
							result.Fixed = new Hl7.Fhir.Model.Oid();
							Parse(result.Fixed as Hl7.Fhir.Model.Oid, reader); // 290
							break;
						case "fixedPositiveInt":
							result.Fixed = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.Fixed as Hl7.Fhir.Model.PositiveInt, reader); // 290
							break;
						case "fixedString":
							result.Fixed = new Hl7.Fhir.Model.FhirString();
							Parse(result.Fixed as Hl7.Fhir.Model.FhirString, reader); // 290
							break;
						case "fixedTime":
							result.Fixed = new Hl7.Fhir.Model.Time();
							Parse(result.Fixed as Hl7.Fhir.Model.Time, reader); // 290
							break;
						case "fixedUnsignedInt":
							result.Fixed = new Hl7.Fhir.Model.UnsignedInt();
							Parse(result.Fixed as Hl7.Fhir.Model.UnsignedInt, reader); // 290
							break;
						case "fixedUri":
							result.Fixed = new Hl7.Fhir.Model.FhirUri();
							Parse(result.Fixed as Hl7.Fhir.Model.FhirUri, reader); // 290
							break;
						case "fixedUrl":
							result.Fixed = new Hl7.Fhir.Model.FhirUrl();
							Parse(result.Fixed as Hl7.Fhir.Model.FhirUrl, reader); // 290
							break;
						case "fixedUuid":
							result.Fixed = new Hl7.Fhir.Model.Uuid();
							Parse(result.Fixed as Hl7.Fhir.Model.Uuid, reader); // 290
							break;
						case "fixedAddress":
							result.Fixed = new Hl7.Fhir.Model.Address();
							Parse(result.Fixed as Hl7.Fhir.Model.Address, reader); // 290
							break;
						case "fixedAge":
							result.Fixed = new Hl7.Fhir.Model.Age();
							Parse(result.Fixed as Hl7.Fhir.Model.Age, reader); // 290
							break;
						case "fixedAnnotation":
							result.Fixed = new Hl7.Fhir.Model.Annotation();
							Parse(result.Fixed as Hl7.Fhir.Model.Annotation, reader); // 290
							break;
						case "fixedAttachment":
							result.Fixed = new Hl7.Fhir.Model.Attachment();
							Parse(result.Fixed as Hl7.Fhir.Model.Attachment, reader); // 290
							break;
						case "fixedCodeableConcept":
							result.Fixed = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Fixed as Hl7.Fhir.Model.CodeableConcept, reader); // 290
							break;
						case "fixedCoding":
							result.Fixed = new Hl7.Fhir.Model.Coding();
							Parse(result.Fixed as Hl7.Fhir.Model.Coding, reader); // 290
							break;
						case "fixedContactPoint":
							result.Fixed = new Hl7.Fhir.Model.ContactPoint();
							Parse(result.Fixed as Hl7.Fhir.Model.ContactPoint, reader); // 290
							break;
						case "fixedCount":
							result.Fixed = new Hl7.Fhir.Model.Count();
							Parse(result.Fixed as Hl7.Fhir.Model.Count, reader); // 290
							break;
						case "fixedDistance":
							result.Fixed = new Hl7.Fhir.Model.Distance();
							Parse(result.Fixed as Hl7.Fhir.Model.Distance, reader); // 290
							break;
						case "fixedDuration":
							result.Fixed = new Hl7.Fhir.Model.Duration();
							Parse(result.Fixed as Hl7.Fhir.Model.Duration, reader); // 290
							break;
						case "fixedHumanName":
							result.Fixed = new Hl7.Fhir.Model.HumanName();
							Parse(result.Fixed as Hl7.Fhir.Model.HumanName, reader); // 290
							break;
						case "fixedIdentifier":
							result.Fixed = new Hl7.Fhir.Model.Identifier();
							Parse(result.Fixed as Hl7.Fhir.Model.Identifier, reader); // 290
							break;
						case "fixedMoney":
							result.Fixed = new Hl7.Fhir.Model.Money();
							Parse(result.Fixed as Hl7.Fhir.Model.Money, reader); // 290
							break;
						case "fixedPeriod":
							result.Fixed = new Hl7.Fhir.Model.Period();
							Parse(result.Fixed as Hl7.Fhir.Model.Period, reader); // 290
							break;
						case "fixedQuantity":
							result.Fixed = new Hl7.Fhir.Model.Quantity();
							Parse(result.Fixed as Hl7.Fhir.Model.Quantity, reader); // 290
							break;
						case "fixedRange":
							result.Fixed = new Hl7.Fhir.Model.Range();
							Parse(result.Fixed as Hl7.Fhir.Model.Range, reader); // 290
							break;
						case "fixedRatio":
							result.Fixed = new Hl7.Fhir.Model.Ratio();
							Parse(result.Fixed as Hl7.Fhir.Model.Ratio, reader); // 290
							break;
						case "fixedReference":
							result.Fixed = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Fixed as Hl7.Fhir.Model.ResourceReference, reader); // 290
							break;
						case "fixedSampledData":
							result.Fixed = new Hl7.Fhir.Model.SampledData();
							Parse(result.Fixed as Hl7.Fhir.Model.SampledData, reader); // 290
							break;
						case "fixedSignature":
							result.Fixed = new Hl7.Fhir.Model.Signature();
							Parse(result.Fixed as Hl7.Fhir.Model.Signature, reader); // 290
							break;
						case "fixedTiming":
							result.Fixed = new Hl7.Fhir.Model.Timing();
							Parse(result.Fixed as Hl7.Fhir.Model.Timing, reader); // 290
							break;
						case "fixedContactDetail":
							result.Fixed = new Hl7.Fhir.Model.ContactDetail();
							Parse(result.Fixed as Hl7.Fhir.Model.ContactDetail, reader); // 290
							break;
						case "fixedContributor":
							result.Fixed = new Hl7.Fhir.Model.Contributor();
							Parse(result.Fixed as Hl7.Fhir.Model.Contributor, reader); // 290
							break;
						case "fixedDataRequirement":
							result.Fixed = new Hl7.Fhir.Model.DataRequirement();
							Parse(result.Fixed as Hl7.Fhir.Model.DataRequirement, reader); // 290
							break;
						case "fixedExpression":
							result.Fixed = new Hl7.Fhir.Model.Expression();
							Parse(result.Fixed as Hl7.Fhir.Model.Expression, reader); // 290
							break;
						case "fixedParameterDefinition":
							result.Fixed = new Hl7.Fhir.Model.ParameterDefinition();
							Parse(result.Fixed as Hl7.Fhir.Model.ParameterDefinition, reader); // 290
							break;
						case "fixedRelatedArtifact":
							result.Fixed = new Hl7.Fhir.Model.RelatedArtifact();
							Parse(result.Fixed as Hl7.Fhir.Model.RelatedArtifact, reader); // 290
							break;
						case "fixedTriggerDefinition":
							result.Fixed = new Hl7.Fhir.Model.TriggerDefinition();
							Parse(result.Fixed as Hl7.Fhir.Model.TriggerDefinition, reader); // 290
							break;
						case "fixedUsageContext":
							result.Fixed = new Hl7.Fhir.Model.UsageContext();
							Parse(result.Fixed as Hl7.Fhir.Model.UsageContext, reader); // 290
							break;
						case "fixedDosage":
							result.Fixed = new Hl7.Fhir.Model.Dosage();
							Parse(result.Fixed as Hl7.Fhir.Model.Dosage, reader); // 290
							break;
						case "fixedMeta":
							result.Fixed = new Hl7.Fhir.Model.Meta();
							Parse(result.Fixed as Hl7.Fhir.Model.Meta, reader); // 290
							break;
						case "patternBase64Binary":
							result.Pattern = new Hl7.Fhir.Model.Base64Binary();
							Parse(result.Pattern as Hl7.Fhir.Model.Base64Binary, reader); // 300
							break;
						case "patternBoolean":
							result.Pattern = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.Pattern as Hl7.Fhir.Model.FhirBoolean, reader); // 300
							break;
						case "patternCanonical":
							result.Pattern = new Hl7.Fhir.Model.Canonical();
							Parse(result.Pattern as Hl7.Fhir.Model.Canonical, reader); // 300
							break;
						case "patternCode":
							result.Pattern = new Hl7.Fhir.Model.Code();
							Parse(result.Pattern as Hl7.Fhir.Model.Code, reader); // 300
							break;
						case "patternDate":
							result.Pattern = new Hl7.Fhir.Model.Date();
							Parse(result.Pattern as Hl7.Fhir.Model.Date, reader); // 300
							break;
						case "patternDateTime":
							result.Pattern = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Pattern as Hl7.Fhir.Model.FhirDateTime, reader); // 300
							break;
						case "patternDecimal":
							result.Pattern = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.Pattern as Hl7.Fhir.Model.FhirDecimal, reader); // 300
							break;
						case "patternId":
							result.Pattern = new Hl7.Fhir.Model.Id();
							Parse(result.Pattern as Hl7.Fhir.Model.Id, reader); // 300
							break;
						case "patternInstant":
							result.Pattern = new Hl7.Fhir.Model.Instant();
							Parse(result.Pattern as Hl7.Fhir.Model.Instant, reader); // 300
							break;
						case "patternInteger":
							result.Pattern = new Hl7.Fhir.Model.Integer();
							Parse(result.Pattern as Hl7.Fhir.Model.Integer, reader); // 300
							break;
						case "patternMarkdown":
							result.Pattern = new Hl7.Fhir.Model.Markdown();
							Parse(result.Pattern as Hl7.Fhir.Model.Markdown, reader); // 300
							break;
						case "patternOid":
							result.Pattern = new Hl7.Fhir.Model.Oid();
							Parse(result.Pattern as Hl7.Fhir.Model.Oid, reader); // 300
							break;
						case "patternPositiveInt":
							result.Pattern = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.Pattern as Hl7.Fhir.Model.PositiveInt, reader); // 300
							break;
						case "patternString":
							result.Pattern = new Hl7.Fhir.Model.FhirString();
							Parse(result.Pattern as Hl7.Fhir.Model.FhirString, reader); // 300
							break;
						case "patternTime":
							result.Pattern = new Hl7.Fhir.Model.Time();
							Parse(result.Pattern as Hl7.Fhir.Model.Time, reader); // 300
							break;
						case "patternUnsignedInt":
							result.Pattern = new Hl7.Fhir.Model.UnsignedInt();
							Parse(result.Pattern as Hl7.Fhir.Model.UnsignedInt, reader); // 300
							break;
						case "patternUri":
							result.Pattern = new Hl7.Fhir.Model.FhirUri();
							Parse(result.Pattern as Hl7.Fhir.Model.FhirUri, reader); // 300
							break;
						case "patternUrl":
							result.Pattern = new Hl7.Fhir.Model.FhirUrl();
							Parse(result.Pattern as Hl7.Fhir.Model.FhirUrl, reader); // 300
							break;
						case "patternUuid":
							result.Pattern = new Hl7.Fhir.Model.Uuid();
							Parse(result.Pattern as Hl7.Fhir.Model.Uuid, reader); // 300
							break;
						case "patternAddress":
							result.Pattern = new Hl7.Fhir.Model.Address();
							Parse(result.Pattern as Hl7.Fhir.Model.Address, reader); // 300
							break;
						case "patternAge":
							result.Pattern = new Hl7.Fhir.Model.Age();
							Parse(result.Pattern as Hl7.Fhir.Model.Age, reader); // 300
							break;
						case "patternAnnotation":
							result.Pattern = new Hl7.Fhir.Model.Annotation();
							Parse(result.Pattern as Hl7.Fhir.Model.Annotation, reader); // 300
							break;
						case "patternAttachment":
							result.Pattern = new Hl7.Fhir.Model.Attachment();
							Parse(result.Pattern as Hl7.Fhir.Model.Attachment, reader); // 300
							break;
						case "patternCodeableConcept":
							result.Pattern = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Pattern as Hl7.Fhir.Model.CodeableConcept, reader); // 300
							break;
						case "patternCoding":
							result.Pattern = new Hl7.Fhir.Model.Coding();
							Parse(result.Pattern as Hl7.Fhir.Model.Coding, reader); // 300
							break;
						case "patternContactPoint":
							result.Pattern = new Hl7.Fhir.Model.ContactPoint();
							Parse(result.Pattern as Hl7.Fhir.Model.ContactPoint, reader); // 300
							break;
						case "patternCount":
							result.Pattern = new Hl7.Fhir.Model.Count();
							Parse(result.Pattern as Hl7.Fhir.Model.Count, reader); // 300
							break;
						case "patternDistance":
							result.Pattern = new Hl7.Fhir.Model.Distance();
							Parse(result.Pattern as Hl7.Fhir.Model.Distance, reader); // 300
							break;
						case "patternDuration":
							result.Pattern = new Hl7.Fhir.Model.Duration();
							Parse(result.Pattern as Hl7.Fhir.Model.Duration, reader); // 300
							break;
						case "patternHumanName":
							result.Pattern = new Hl7.Fhir.Model.HumanName();
							Parse(result.Pattern as Hl7.Fhir.Model.HumanName, reader); // 300
							break;
						case "patternIdentifier":
							result.Pattern = new Hl7.Fhir.Model.Identifier();
							Parse(result.Pattern as Hl7.Fhir.Model.Identifier, reader); // 300
							break;
						case "patternMoney":
							result.Pattern = new Hl7.Fhir.Model.Money();
							Parse(result.Pattern as Hl7.Fhir.Model.Money, reader); // 300
							break;
						case "patternPeriod":
							result.Pattern = new Hl7.Fhir.Model.Period();
							Parse(result.Pattern as Hl7.Fhir.Model.Period, reader); // 300
							break;
						case "patternQuantity":
							result.Pattern = new Hl7.Fhir.Model.Quantity();
							Parse(result.Pattern as Hl7.Fhir.Model.Quantity, reader); // 300
							break;
						case "patternRange":
							result.Pattern = new Hl7.Fhir.Model.Range();
							Parse(result.Pattern as Hl7.Fhir.Model.Range, reader); // 300
							break;
						case "patternRatio":
							result.Pattern = new Hl7.Fhir.Model.Ratio();
							Parse(result.Pattern as Hl7.Fhir.Model.Ratio, reader); // 300
							break;
						case "patternReference":
							result.Pattern = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Pattern as Hl7.Fhir.Model.ResourceReference, reader); // 300
							break;
						case "patternSampledData":
							result.Pattern = new Hl7.Fhir.Model.SampledData();
							Parse(result.Pattern as Hl7.Fhir.Model.SampledData, reader); // 300
							break;
						case "patternSignature":
							result.Pattern = new Hl7.Fhir.Model.Signature();
							Parse(result.Pattern as Hl7.Fhir.Model.Signature, reader); // 300
							break;
						case "patternTiming":
							result.Pattern = new Hl7.Fhir.Model.Timing();
							Parse(result.Pattern as Hl7.Fhir.Model.Timing, reader); // 300
							break;
						case "patternContactDetail":
							result.Pattern = new Hl7.Fhir.Model.ContactDetail();
							Parse(result.Pattern as Hl7.Fhir.Model.ContactDetail, reader); // 300
							break;
						case "patternContributor":
							result.Pattern = new Hl7.Fhir.Model.Contributor();
							Parse(result.Pattern as Hl7.Fhir.Model.Contributor, reader); // 300
							break;
						case "patternDataRequirement":
							result.Pattern = new Hl7.Fhir.Model.DataRequirement();
							Parse(result.Pattern as Hl7.Fhir.Model.DataRequirement, reader); // 300
							break;
						case "patternExpression":
							result.Pattern = new Hl7.Fhir.Model.Expression();
							Parse(result.Pattern as Hl7.Fhir.Model.Expression, reader); // 300
							break;
						case "patternParameterDefinition":
							result.Pattern = new Hl7.Fhir.Model.ParameterDefinition();
							Parse(result.Pattern as Hl7.Fhir.Model.ParameterDefinition, reader); // 300
							break;
						case "patternRelatedArtifact":
							result.Pattern = new Hl7.Fhir.Model.RelatedArtifact();
							Parse(result.Pattern as Hl7.Fhir.Model.RelatedArtifact, reader); // 300
							break;
						case "patternTriggerDefinition":
							result.Pattern = new Hl7.Fhir.Model.TriggerDefinition();
							Parse(result.Pattern as Hl7.Fhir.Model.TriggerDefinition, reader); // 300
							break;
						case "patternUsageContext":
							result.Pattern = new Hl7.Fhir.Model.UsageContext();
							Parse(result.Pattern as Hl7.Fhir.Model.UsageContext, reader); // 300
							break;
						case "patternDosage":
							result.Pattern = new Hl7.Fhir.Model.Dosage();
							Parse(result.Pattern as Hl7.Fhir.Model.Dosage, reader); // 300
							break;
						case "patternMeta":
							result.Pattern = new Hl7.Fhir.Model.Meta();
							Parse(result.Pattern as Hl7.Fhir.Model.Meta, reader); // 300
							break;
						case "example":
							var newItem_example = new Hl7.Fhir.Model.ElementDefinition.ExampleComponent();
							Parse(newItem_example, reader); // 310
							result.Example.Add(newItem_example);
							break;
						case "minValueDate":
							result.MinValue = new Hl7.Fhir.Model.Date();
							Parse(result.MinValue as Hl7.Fhir.Model.Date, reader); // 320
							break;
						case "minValueDateTime":
							result.MinValue = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.MinValue as Hl7.Fhir.Model.FhirDateTime, reader); // 320
							break;
						case "minValueInstant":
							result.MinValue = new Hl7.Fhir.Model.Instant();
							Parse(result.MinValue as Hl7.Fhir.Model.Instant, reader); // 320
							break;
						case "minValueTime":
							result.MinValue = new Hl7.Fhir.Model.Time();
							Parse(result.MinValue as Hl7.Fhir.Model.Time, reader); // 320
							break;
						case "minValueDecimal":
							result.MinValue = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.MinValue as Hl7.Fhir.Model.FhirDecimal, reader); // 320
							break;
						case "minValueInteger":
							result.MinValue = new Hl7.Fhir.Model.Integer();
							Parse(result.MinValue as Hl7.Fhir.Model.Integer, reader); // 320
							break;
						case "minValuePositiveInt":
							result.MinValue = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.MinValue as Hl7.Fhir.Model.PositiveInt, reader); // 320
							break;
						case "minValueUnsignedInt":
							result.MinValue = new Hl7.Fhir.Model.UnsignedInt();
							Parse(result.MinValue as Hl7.Fhir.Model.UnsignedInt, reader); // 320
							break;
						case "minValueQuantity":
							result.MinValue = new Hl7.Fhir.Model.Quantity();
							Parse(result.MinValue as Hl7.Fhir.Model.Quantity, reader); // 320
							break;
						case "maxValueDate":
							result.MaxValue = new Hl7.Fhir.Model.Date();
							Parse(result.MaxValue as Hl7.Fhir.Model.Date, reader); // 330
							break;
						case "maxValueDateTime":
							result.MaxValue = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.MaxValue as Hl7.Fhir.Model.FhirDateTime, reader); // 330
							break;
						case "maxValueInstant":
							result.MaxValue = new Hl7.Fhir.Model.Instant();
							Parse(result.MaxValue as Hl7.Fhir.Model.Instant, reader); // 330
							break;
						case "maxValueTime":
							result.MaxValue = new Hl7.Fhir.Model.Time();
							Parse(result.MaxValue as Hl7.Fhir.Model.Time, reader); // 330
							break;
						case "maxValueDecimal":
							result.MaxValue = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.MaxValue as Hl7.Fhir.Model.FhirDecimal, reader); // 330
							break;
						case "maxValueInteger":
							result.MaxValue = new Hl7.Fhir.Model.Integer();
							Parse(result.MaxValue as Hl7.Fhir.Model.Integer, reader); // 330
							break;
						case "maxValuePositiveInt":
							result.MaxValue = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.MaxValue as Hl7.Fhir.Model.PositiveInt, reader); // 330
							break;
						case "maxValueUnsignedInt":
							result.MaxValue = new Hl7.Fhir.Model.UnsignedInt();
							Parse(result.MaxValue as Hl7.Fhir.Model.UnsignedInt, reader); // 330
							break;
						case "maxValueQuantity":
							result.MaxValue = new Hl7.Fhir.Model.Quantity();
							Parse(result.MaxValue as Hl7.Fhir.Model.Quantity, reader); // 330
							break;
						case "maxLength":
							result.MaxLengthElement = new Hl7.Fhir.Model.Integer();
							Parse(result.MaxLengthElement as Hl7.Fhir.Model.Integer, reader); // 340
							break;
						case "condition":
							var newItem_condition = new Hl7.Fhir.Model.Id();
							Parse(newItem_condition, reader); // 350
							result.ConditionElement.Add(newItem_condition);
							break;
						case "constraint":
							var newItem_constraint = new Hl7.Fhir.Model.ElementDefinition.ConstraintComponent();
							Parse(newItem_constraint, reader); // 360
							result.Constraint.Add(newItem_constraint);
							break;
						case "mustSupport":
							result.MustSupportElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.MustSupportElement as Hl7.Fhir.Model.FhirBoolean, reader); // 370
							break;
						case "isModifier":
							result.IsModifierElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.IsModifierElement as Hl7.Fhir.Model.FhirBoolean, reader); // 380
							break;
						case "isModifierReason":
							result.IsModifierReasonElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.IsModifierReasonElement as Hl7.Fhir.Model.FhirString, reader); // 390
							break;
						case "isSummary":
							result.IsSummaryElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.IsSummaryElement as Hl7.Fhir.Model.FhirBoolean, reader); // 400
							break;
						case "binding":
							result.Binding = new Hl7.Fhir.Model.ElementDefinition.ElementDefinitionBindingComponent();
							Parse(result.Binding as Hl7.Fhir.Model.ElementDefinition.ElementDefinitionBindingComponent, reader); // 410
							break;
						case "mapping":
							var newItem_mapping = new Hl7.Fhir.Model.ElementDefinition.MappingComponent();
							Parse(newItem_mapping, reader); // 420
							result.Mapping.Add(newItem_mapping);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ElementDefinition.DiscriminatorComponent
		public void Parse(Hl7.Fhir.Model.ElementDefinition.DiscriminatorComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ElementDefinition.DiscriminatorType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ElementDefinition.DiscriminatorType>, reader); // 40
							break;
						case "path":
							result.PathElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PathElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ElementDefinition.TypeRefComponent
		public void Parse(Hl7.Fhir.Model.ElementDefinition.TypeRefComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "code":
							result.CodeElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.CodeElement as Hl7.Fhir.Model.FhirUri, reader); // 40
							break;
						case "profile":
							var newItem_profile = new Hl7.Fhir.Model.Canonical();
							Parse(newItem_profile, reader); // 50
							result.ProfileElement.Add(newItem_profile);
							break;
						case "targetProfile":
							var newItem_targetProfile = new Hl7.Fhir.Model.Canonical();
							Parse(newItem_targetProfile, reader); // 60
							result.TargetProfileElement.Add(newItem_targetProfile);
							break;
						case "aggregation":
							var newItem_aggregation = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ElementDefinition.AggregationMode>();
							Parse(newItem_aggregation, reader); // 70
							result.AggregationElement.Add(newItem_aggregation);
							break;
						case "versioning":
							result.VersioningElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ElementDefinition.ReferenceVersionRules>();
							Parse(result.VersioningElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ElementDefinition.ReferenceVersionRules>, reader); // 80
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ElementDefinition.SlicingComponent
		public void Parse(Hl7.Fhir.Model.ElementDefinition.SlicingComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "discriminator":
							var newItem_discriminator = new Hl7.Fhir.Model.ElementDefinition.DiscriminatorComponent();
							Parse(newItem_discriminator, reader); // 40
							result.Discriminator.Add(newItem_discriminator);
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "ordered":
							result.OrderedElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.OrderedElement as Hl7.Fhir.Model.FhirBoolean, reader); // 60
							break;
						case "rules":
							result.RulesElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ElementDefinition.SlicingRules>();
							Parse(result.RulesElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ElementDefinition.SlicingRules>, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ElementDefinition.BaseComponent
		public void Parse(Hl7.Fhir.Model.ElementDefinition.BaseComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "path":
							result.PathElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PathElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "min":
							result.MinElement = new Hl7.Fhir.Model.UnsignedInt();
							Parse(result.MinElement as Hl7.Fhir.Model.UnsignedInt, reader); // 50
							break;
						case "max":
							result.MaxElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.MaxElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ElementDefinition.ExampleComponent
		public void Parse(Hl7.Fhir.Model.ElementDefinition.ExampleComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "label":
							result.LabelElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.LabelElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "valueBase64Binary":
							result.Value = new Hl7.Fhir.Model.Base64Binary();
							Parse(result.Value as Hl7.Fhir.Model.Base64Binary, reader); // 50
							break;
						case "valueBoolean":
							result.Value = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.Value as Hl7.Fhir.Model.FhirBoolean, reader); // 50
							break;
						case "valueCanonical":
							result.Value = new Hl7.Fhir.Model.Canonical();
							Parse(result.Value as Hl7.Fhir.Model.Canonical, reader); // 50
							break;
						case "valueCode":
							result.Value = new Hl7.Fhir.Model.Code();
							Parse(result.Value as Hl7.Fhir.Model.Code, reader); // 50
							break;
						case "valueDate":
							result.Value = new Hl7.Fhir.Model.Date();
							Parse(result.Value as Hl7.Fhir.Model.Date, reader); // 50
							break;
						case "valueDateTime":
							result.Value = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Value as Hl7.Fhir.Model.FhirDateTime, reader); // 50
							break;
						case "valueDecimal":
							result.Value = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.Value as Hl7.Fhir.Model.FhirDecimal, reader); // 50
							break;
						case "valueId":
							result.Value = new Hl7.Fhir.Model.Id();
							Parse(result.Value as Hl7.Fhir.Model.Id, reader); // 50
							break;
						case "valueInstant":
							result.Value = new Hl7.Fhir.Model.Instant();
							Parse(result.Value as Hl7.Fhir.Model.Instant, reader); // 50
							break;
						case "valueInteger":
							result.Value = new Hl7.Fhir.Model.Integer();
							Parse(result.Value as Hl7.Fhir.Model.Integer, reader); // 50
							break;
						case "valueMarkdown":
							result.Value = new Hl7.Fhir.Model.Markdown();
							Parse(result.Value as Hl7.Fhir.Model.Markdown, reader); // 50
							break;
						case "valueOid":
							result.Value = new Hl7.Fhir.Model.Oid();
							Parse(result.Value as Hl7.Fhir.Model.Oid, reader); // 50
							break;
						case "valuePositiveInt":
							result.Value = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.Value as Hl7.Fhir.Model.PositiveInt, reader); // 50
							break;
						case "valueString":
							result.Value = new Hl7.Fhir.Model.FhirString();
							Parse(result.Value as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "valueTime":
							result.Value = new Hl7.Fhir.Model.Time();
							Parse(result.Value as Hl7.Fhir.Model.Time, reader); // 50
							break;
						case "valueUnsignedInt":
							result.Value = new Hl7.Fhir.Model.UnsignedInt();
							Parse(result.Value as Hl7.Fhir.Model.UnsignedInt, reader); // 50
							break;
						case "valueUri":
							result.Value = new Hl7.Fhir.Model.FhirUri();
							Parse(result.Value as Hl7.Fhir.Model.FhirUri, reader); // 50
							break;
						case "valueUrl":
							result.Value = new Hl7.Fhir.Model.FhirUrl();
							Parse(result.Value as Hl7.Fhir.Model.FhirUrl, reader); // 50
							break;
						case "valueUuid":
							result.Value = new Hl7.Fhir.Model.Uuid();
							Parse(result.Value as Hl7.Fhir.Model.Uuid, reader); // 50
							break;
						case "valueAddress":
							result.Value = new Hl7.Fhir.Model.Address();
							Parse(result.Value as Hl7.Fhir.Model.Address, reader); // 50
							break;
						case "valueAge":
							result.Value = new Hl7.Fhir.Model.Age();
							Parse(result.Value as Hl7.Fhir.Model.Age, reader); // 50
							break;
						case "valueAnnotation":
							result.Value = new Hl7.Fhir.Model.Annotation();
							Parse(result.Value as Hl7.Fhir.Model.Annotation, reader); // 50
							break;
						case "valueAttachment":
							result.Value = new Hl7.Fhir.Model.Attachment();
							Parse(result.Value as Hl7.Fhir.Model.Attachment, reader); // 50
							break;
						case "valueCodeableConcept":
							result.Value = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Value as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "valueCoding":
							result.Value = new Hl7.Fhir.Model.Coding();
							Parse(result.Value as Hl7.Fhir.Model.Coding, reader); // 50
							break;
						case "valueContactPoint":
							result.Value = new Hl7.Fhir.Model.ContactPoint();
							Parse(result.Value as Hl7.Fhir.Model.ContactPoint, reader); // 50
							break;
						case "valueCount":
							result.Value = new Hl7.Fhir.Model.Count();
							Parse(result.Value as Hl7.Fhir.Model.Count, reader); // 50
							break;
						case "valueDistance":
							result.Value = new Hl7.Fhir.Model.Distance();
							Parse(result.Value as Hl7.Fhir.Model.Distance, reader); // 50
							break;
						case "valueDuration":
							result.Value = new Hl7.Fhir.Model.Duration();
							Parse(result.Value as Hl7.Fhir.Model.Duration, reader); // 50
							break;
						case "valueHumanName":
							result.Value = new Hl7.Fhir.Model.HumanName();
							Parse(result.Value as Hl7.Fhir.Model.HumanName, reader); // 50
							break;
						case "valueIdentifier":
							result.Value = new Hl7.Fhir.Model.Identifier();
							Parse(result.Value as Hl7.Fhir.Model.Identifier, reader); // 50
							break;
						case "valueMoney":
							result.Value = new Hl7.Fhir.Model.Money();
							Parse(result.Value as Hl7.Fhir.Model.Money, reader); // 50
							break;
						case "valuePeriod":
							result.Value = new Hl7.Fhir.Model.Period();
							Parse(result.Value as Hl7.Fhir.Model.Period, reader); // 50
							break;
						case "valueQuantity":
							result.Value = new Hl7.Fhir.Model.Quantity();
							Parse(result.Value as Hl7.Fhir.Model.Quantity, reader); // 50
							break;
						case "valueRange":
							result.Value = new Hl7.Fhir.Model.Range();
							Parse(result.Value as Hl7.Fhir.Model.Range, reader); // 50
							break;
						case "valueRatio":
							result.Value = new Hl7.Fhir.Model.Ratio();
							Parse(result.Value as Hl7.Fhir.Model.Ratio, reader); // 50
							break;
						case "valueReference":
							result.Value = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Value as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						case "valueSampledData":
							result.Value = new Hl7.Fhir.Model.SampledData();
							Parse(result.Value as Hl7.Fhir.Model.SampledData, reader); // 50
							break;
						case "valueSignature":
							result.Value = new Hl7.Fhir.Model.Signature();
							Parse(result.Value as Hl7.Fhir.Model.Signature, reader); // 50
							break;
						case "valueTiming":
							result.Value = new Hl7.Fhir.Model.Timing();
							Parse(result.Value as Hl7.Fhir.Model.Timing, reader); // 50
							break;
						case "valueContactDetail":
							result.Value = new Hl7.Fhir.Model.ContactDetail();
							Parse(result.Value as Hl7.Fhir.Model.ContactDetail, reader); // 50
							break;
						case "valueContributor":
							result.Value = new Hl7.Fhir.Model.Contributor();
							Parse(result.Value as Hl7.Fhir.Model.Contributor, reader); // 50
							break;
						case "valueDataRequirement":
							result.Value = new Hl7.Fhir.Model.DataRequirement();
							Parse(result.Value as Hl7.Fhir.Model.DataRequirement, reader); // 50
							break;
						case "valueExpression":
							result.Value = new Hl7.Fhir.Model.Expression();
							Parse(result.Value as Hl7.Fhir.Model.Expression, reader); // 50
							break;
						case "valueParameterDefinition":
							result.Value = new Hl7.Fhir.Model.ParameterDefinition();
							Parse(result.Value as Hl7.Fhir.Model.ParameterDefinition, reader); // 50
							break;
						case "valueRelatedArtifact":
							result.Value = new Hl7.Fhir.Model.RelatedArtifact();
							Parse(result.Value as Hl7.Fhir.Model.RelatedArtifact, reader); // 50
							break;
						case "valueTriggerDefinition":
							result.Value = new Hl7.Fhir.Model.TriggerDefinition();
							Parse(result.Value as Hl7.Fhir.Model.TriggerDefinition, reader); // 50
							break;
						case "valueUsageContext":
							result.Value = new Hl7.Fhir.Model.UsageContext();
							Parse(result.Value as Hl7.Fhir.Model.UsageContext, reader); // 50
							break;
						case "valueDosage":
							result.Value = new Hl7.Fhir.Model.Dosage();
							Parse(result.Value as Hl7.Fhir.Model.Dosage, reader); // 50
							break;
						case "valueMeta":
							result.Value = new Hl7.Fhir.Model.Meta();
							Parse(result.Value as Hl7.Fhir.Model.Meta, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ElementDefinition.ConstraintComponent
		public void Parse(Hl7.Fhir.Model.ElementDefinition.ConstraintComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "key":
							result.KeyElement = new Hl7.Fhir.Model.Id();
							Parse(result.KeyElement as Hl7.Fhir.Model.Id, reader); // 40
							break;
						case "requirements":
							result.RequirementsElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.RequirementsElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "severity":
							result.SeverityElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ElementDefinition.ConstraintSeverity>();
							Parse(result.SeverityElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ElementDefinition.ConstraintSeverity>, reader); // 60
							break;
						case "human":
							result.HumanElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.HumanElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						case "expression":
							result.ExpressionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ExpressionElement as Hl7.Fhir.Model.FhirString, reader); // 80
							break;
						case "xpath":
							result.XpathElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.XpathElement as Hl7.Fhir.Model.FhirString, reader); // 90
							break;
						case "source":
							result.SourceElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.SourceElement as Hl7.Fhir.Model.Canonical, reader); // 100
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ElementDefinition.ElementDefinitionBindingComponent
		public void Parse(Hl7.Fhir.Model.ElementDefinition.ElementDefinitionBindingComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "strength":
							result.StrengthElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.BindingStrength>();
							Parse(result.StrengthElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.BindingStrength>, reader); // 40
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "valueSet":
							result.ValueSetElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.ValueSetElement as Hl7.Fhir.Model.Canonical, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ElementDefinition.MappingComponent
		public void Parse(Hl7.Fhir.Model.ElementDefinition.MappingComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "identity":
							result.IdentityElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdentityElement as Hl7.Fhir.Model.Id, reader); // 40
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 50
							break;
						case "map":
							result.MapElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.MapElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "comment":
							result.CommentElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.CommentElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Expression
		public void Parse(Hl7.Fhir.Model.Expression result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 30
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.Id();
							Parse(result.NameElement as Hl7.Fhir.Model.Id, reader); // 40
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 50
							break;
						case "expression":
							result.ExpressionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ExpressionElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "reference":
							result.ReferenceElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ReferenceElement as Hl7.Fhir.Model.FhirUri, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Extension
		public void Parse(Hl7.Fhir.Model.Extension result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "url":
							result.Url = reader.Value;
							break;
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "valueBase64Binary":
							result.Value = new Hl7.Fhir.Model.Base64Binary();
							Parse(result.Value as Hl7.Fhir.Model.Base64Binary, reader); // 40
							break;
						case "valueBoolean":
							result.Value = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.Value as Hl7.Fhir.Model.FhirBoolean, reader); // 40
							break;
						case "valueCanonical":
							result.Value = new Hl7.Fhir.Model.Canonical();
							Parse(result.Value as Hl7.Fhir.Model.Canonical, reader); // 40
							break;
						case "valueCode":
							result.Value = new Hl7.Fhir.Model.Code();
							Parse(result.Value as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "valueDate":
							result.Value = new Hl7.Fhir.Model.Date();
							Parse(result.Value as Hl7.Fhir.Model.Date, reader); // 40
							break;
						case "valueDateTime":
							result.Value = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Value as Hl7.Fhir.Model.FhirDateTime, reader); // 40
							break;
						case "valueDecimal":
							result.Value = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.Value as Hl7.Fhir.Model.FhirDecimal, reader); // 40
							break;
						case "valueId":
							result.Value = new Hl7.Fhir.Model.Id();
							Parse(result.Value as Hl7.Fhir.Model.Id, reader); // 40
							break;
						case "valueInstant":
							result.Value = new Hl7.Fhir.Model.Instant();
							Parse(result.Value as Hl7.Fhir.Model.Instant, reader); // 40
							break;
						case "valueInteger":
							result.Value = new Hl7.Fhir.Model.Integer();
							Parse(result.Value as Hl7.Fhir.Model.Integer, reader); // 40
							break;
						case "valueMarkdown":
							result.Value = new Hl7.Fhir.Model.Markdown();
							Parse(result.Value as Hl7.Fhir.Model.Markdown, reader); // 40
							break;
						case "valueOid":
							result.Value = new Hl7.Fhir.Model.Oid();
							Parse(result.Value as Hl7.Fhir.Model.Oid, reader); // 40
							break;
						case "valuePositiveInt":
							result.Value = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.Value as Hl7.Fhir.Model.PositiveInt, reader); // 40
							break;
						case "valueString":
							result.Value = new Hl7.Fhir.Model.FhirString();
							Parse(result.Value as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "valueTime":
							result.Value = new Hl7.Fhir.Model.Time();
							Parse(result.Value as Hl7.Fhir.Model.Time, reader); // 40
							break;
						case "valueUnsignedInt":
							result.Value = new Hl7.Fhir.Model.UnsignedInt();
							Parse(result.Value as Hl7.Fhir.Model.UnsignedInt, reader); // 40
							break;
						case "valueUri":
							result.Value = new Hl7.Fhir.Model.FhirUri();
							Parse(result.Value as Hl7.Fhir.Model.FhirUri, reader); // 40
							break;
						case "valueUrl":
							result.Value = new Hl7.Fhir.Model.FhirUrl();
							Parse(result.Value as Hl7.Fhir.Model.FhirUrl, reader); // 40
							break;
						case "valueUuid":
							result.Value = new Hl7.Fhir.Model.Uuid();
							Parse(result.Value as Hl7.Fhir.Model.Uuid, reader); // 40
							break;
						case "valueAddress":
							result.Value = new Hl7.Fhir.Model.Address();
							Parse(result.Value as Hl7.Fhir.Model.Address, reader); // 40
							break;
						case "valueAge":
							result.Value = new Hl7.Fhir.Model.Age();
							Parse(result.Value as Hl7.Fhir.Model.Age, reader); // 40
							break;
						case "valueAnnotation":
							result.Value = new Hl7.Fhir.Model.Annotation();
							Parse(result.Value as Hl7.Fhir.Model.Annotation, reader); // 40
							break;
						case "valueAttachment":
							result.Value = new Hl7.Fhir.Model.Attachment();
							Parse(result.Value as Hl7.Fhir.Model.Attachment, reader); // 40
							break;
						case "valueCodeableConcept":
							result.Value = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Value as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "valueCoding":
							result.Value = new Hl7.Fhir.Model.Coding();
							Parse(result.Value as Hl7.Fhir.Model.Coding, reader); // 40
							break;
						case "valueContactPoint":
							result.Value = new Hl7.Fhir.Model.ContactPoint();
							Parse(result.Value as Hl7.Fhir.Model.ContactPoint, reader); // 40
							break;
						case "valueCount":
							result.Value = new Hl7.Fhir.Model.Count();
							Parse(result.Value as Hl7.Fhir.Model.Count, reader); // 40
							break;
						case "valueDistance":
							result.Value = new Hl7.Fhir.Model.Distance();
							Parse(result.Value as Hl7.Fhir.Model.Distance, reader); // 40
							break;
						case "valueDuration":
							result.Value = new Hl7.Fhir.Model.Duration();
							Parse(result.Value as Hl7.Fhir.Model.Duration, reader); // 40
							break;
						case "valueHumanName":
							result.Value = new Hl7.Fhir.Model.HumanName();
							Parse(result.Value as Hl7.Fhir.Model.HumanName, reader); // 40
							break;
						case "valueIdentifier":
							result.Value = new Hl7.Fhir.Model.Identifier();
							Parse(result.Value as Hl7.Fhir.Model.Identifier, reader); // 40
							break;
						case "valueMoney":
							result.Value = new Hl7.Fhir.Model.Money();
							Parse(result.Value as Hl7.Fhir.Model.Money, reader); // 40
							break;
						case "valuePeriod":
							result.Value = new Hl7.Fhir.Model.Period();
							Parse(result.Value as Hl7.Fhir.Model.Period, reader); // 40
							break;
						case "valueQuantity":
							result.Value = new Hl7.Fhir.Model.Quantity();
							Parse(result.Value as Hl7.Fhir.Model.Quantity, reader); // 40
							break;
						case "valueRange":
							result.Value = new Hl7.Fhir.Model.Range();
							Parse(result.Value as Hl7.Fhir.Model.Range, reader); // 40
							break;
						case "valueRatio":
							result.Value = new Hl7.Fhir.Model.Ratio();
							Parse(result.Value as Hl7.Fhir.Model.Ratio, reader); // 40
							break;
						case "valueReference":
							result.Value = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Value as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						case "valueSampledData":
							result.Value = new Hl7.Fhir.Model.SampledData();
							Parse(result.Value as Hl7.Fhir.Model.SampledData, reader); // 40
							break;
						case "valueSignature":
							result.Value = new Hl7.Fhir.Model.Signature();
							Parse(result.Value as Hl7.Fhir.Model.Signature, reader); // 40
							break;
						case "valueTiming":
							result.Value = new Hl7.Fhir.Model.Timing();
							Parse(result.Value as Hl7.Fhir.Model.Timing, reader); // 40
							break;
						case "valueContactDetail":
							result.Value = new Hl7.Fhir.Model.ContactDetail();
							Parse(result.Value as Hl7.Fhir.Model.ContactDetail, reader); // 40
							break;
						case "valueContributor":
							result.Value = new Hl7.Fhir.Model.Contributor();
							Parse(result.Value as Hl7.Fhir.Model.Contributor, reader); // 40
							break;
						case "valueDataRequirement":
							result.Value = new Hl7.Fhir.Model.DataRequirement();
							Parse(result.Value as Hl7.Fhir.Model.DataRequirement, reader); // 40
							break;
						case "valueExpression":
							result.Value = new Hl7.Fhir.Model.Expression();
							Parse(result.Value as Hl7.Fhir.Model.Expression, reader); // 40
							break;
						case "valueParameterDefinition":
							result.Value = new Hl7.Fhir.Model.ParameterDefinition();
							Parse(result.Value as Hl7.Fhir.Model.ParameterDefinition, reader); // 40
							break;
						case "valueRelatedArtifact":
							result.Value = new Hl7.Fhir.Model.RelatedArtifact();
							Parse(result.Value as Hl7.Fhir.Model.RelatedArtifact, reader); // 40
							break;
						case "valueTriggerDefinition":
							result.Value = new Hl7.Fhir.Model.TriggerDefinition();
							Parse(result.Value as Hl7.Fhir.Model.TriggerDefinition, reader); // 40
							break;
						case "valueUsageContext":
							result.Value = new Hl7.Fhir.Model.UsageContext();
							Parse(result.Value as Hl7.Fhir.Model.UsageContext, reader); // 40
							break;
						case "valueDosage":
							result.Value = new Hl7.Fhir.Model.Dosage();
							Parse(result.Value as Hl7.Fhir.Model.Dosage, reader); // 40
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.HumanName
		public void Parse(Hl7.Fhir.Model.HumanName result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "use":
							result.UseElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.HumanName.NameUse>();
							Parse(result.UseElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.HumanName.NameUse>, reader); // 30
							break;
						case "text":
							result.TextElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TextElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "family":
							result.FamilyElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.FamilyElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "given":
							var newItem_given = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_given, reader); // 60
							result.GivenElement.Add(newItem_given);
							break;
						case "prefix":
							var newItem_prefix = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_prefix, reader); // 70
							result.PrefixElement.Add(newItem_prefix);
							break;
						case "suffix":
							var newItem_suffix = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_suffix, reader); // 80
							result.SuffixElement.Add(newItem_suffix);
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 90
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Id
		public void Parse(Hl7.Fhir.Model.Id result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "value":
							result.Value = reader.Value;
							break;
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Identifier
		public void Parse(Hl7.Fhir.Model.Identifier result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "use":
							result.UseElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Identifier.IdentifierUse>();
							Parse(result.UseElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Identifier.IdentifierUse>, reader); // 30
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "system":
							result.SystemElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.SystemElement as Hl7.Fhir.Model.FhirUri, reader); // 50
							break;
						case "value":
							result.ValueElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ValueElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 70
							break;
						case "assigner":
							result.Assigner = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Assigner as Hl7.Fhir.Model.ResourceReference, reader); // 80
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Instant
		public void Parse(Hl7.Fhir.Model.Instant result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "value":
							result.Value = Hl7.Fhir.Serialization.PrimitiveTypeConverter.ConvertTo<System.DateTimeOffset>(reader.Value);
							break;
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Integer
		public void Parse(Hl7.Fhir.Model.Integer result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "value":
							result.Value = Hl7.Fhir.Serialization.PrimitiveTypeConverter.ConvertTo<System.Int32>(reader.Value);
							break;
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Markdown
		public void Parse(Hl7.Fhir.Model.Markdown result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "value":
							result.Value = reader.Value;
							break;
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MarketingStatus
		public void Parse(Hl7.Fhir.Model.MarketingStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "country":
							result.Country = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Country as Hl7.Fhir.Model.CodeableConcept, reader); // 90
							break;
						case "jurisdiction":
							result.Jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Jurisdiction as Hl7.Fhir.Model.CodeableConcept, reader); // 100
							break;
						case "status":
							result.Status = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Status as Hl7.Fhir.Model.CodeableConcept, reader); // 110
							break;
						case "dateRange":
							result.DateRange = new Hl7.Fhir.Model.Period();
							Parse(result.DateRange as Hl7.Fhir.Model.Period, reader); // 120
							break;
						case "restoreDate":
							result.RestoreDateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.RestoreDateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 130
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Meta
		public void Parse(Hl7.Fhir.Model.Meta result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "versionId":
							result.VersionIdElement = new Hl7.Fhir.Model.Id();
							Parse(result.VersionIdElement as Hl7.Fhir.Model.Id, reader); // 30
							break;
						case "lastUpdated":
							result.LastUpdatedElement = new Hl7.Fhir.Model.Instant();
							Parse(result.LastUpdatedElement as Hl7.Fhir.Model.Instant, reader); // 40
							break;
						case "source":
							result.SourceElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.SourceElement as Hl7.Fhir.Model.FhirUri, reader); // 50
							break;
						case "profile":
							var newItem_profile = new Hl7.Fhir.Model.Canonical();
							Parse(newItem_profile, reader); // 60
							result.ProfileElement.Add(newItem_profile);
							break;
						case "security":
							var newItem_security = new Hl7.Fhir.Model.Coding();
							Parse(newItem_security, reader); // 70
							result.Security.Add(newItem_security);
							break;
						case "tag":
							var newItem_tag = new Hl7.Fhir.Model.Coding();
							Parse(newItem_tag, reader); // 80
							result.Tag.Add(newItem_tag);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Money
		public void Parse(Hl7.Fhir.Model.Money result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "value":
							result.ValueElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.ValueElement as Hl7.Fhir.Model.FhirDecimal, reader); // 30
							break;
						case "currency":
							result.CurrencyElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Money.Currencies>();
							Parse(result.CurrencyElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Money.Currencies>, reader); // 40
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Narrative
		public void Parse(Hl7.Fhir.Model.Narrative result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Narrative.NarrativeStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Narrative.NarrativeStatus>, reader); // 30
							break;
						// Xml Serialization: XHtml
						case "div":
							result.Div = reader.ReadOuterXml();
							if (reader.NodeType == XmlNodeType.EndElement)
								return;
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Oid
		public void Parse(Hl7.Fhir.Model.Oid result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "value":
							result.Value = reader.Value;
							break;
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ParameterDefinition
		public void Parse(Hl7.Fhir.Model.ParameterDefinition result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.Code();
							Parse(result.NameElement as Hl7.Fhir.Model.Code, reader); // 30
							break;
						case "use":
							result.UseElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.OperationParameterUse>();
							Parse(result.UseElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.OperationParameterUse>, reader); // 40
							break;
						case "min":
							result.MinElement = new Hl7.Fhir.Model.Integer();
							Parse(result.MinElement as Hl7.Fhir.Model.Integer, reader); // 50
							break;
						case "max":
							result.MaxElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.MaxElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "documentation":
							result.DocumentationElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DocumentationElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FHIRAllTypes>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FHIRAllTypes>, reader); // 80
							break;
						case "profile":
							result.ProfileElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.ProfileElement as Hl7.Fhir.Model.Canonical, reader); // 90
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Period
		public void Parse(Hl7.Fhir.Model.Period result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "start":
							result.StartElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.StartElement as Hl7.Fhir.Model.FhirDateTime, reader); // 30
							break;
						case "end":
							result.EndElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.EndElement as Hl7.Fhir.Model.FhirDateTime, reader); // 40
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Population
		public void Parse(Hl7.Fhir.Model.Population result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "ageRange":
							result.Age = new Hl7.Fhir.Model.Range();
							Parse(result.Age as Hl7.Fhir.Model.Range, reader); // 90
							break;
						case "ageCodeableConcept":
							result.Age = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Age as Hl7.Fhir.Model.CodeableConcept, reader); // 90
							break;
						case "gender":
							result.Gender = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Gender as Hl7.Fhir.Model.CodeableConcept, reader); // 100
							break;
						case "race":
							result.Race = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Race as Hl7.Fhir.Model.CodeableConcept, reader); // 110
							break;
						case "physiologicalCondition":
							result.PhysiologicalCondition = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.PhysiologicalCondition as Hl7.Fhir.Model.CodeableConcept, reader); // 120
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.PositiveInt
		public void Parse(Hl7.Fhir.Model.PositiveInt result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "value":
							result.Value = Hl7.Fhir.Serialization.PrimitiveTypeConverter.ConvertTo<System.Int32>(reader.Value);
							break;
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ProdCharacteristic
		public void Parse(Hl7.Fhir.Model.ProdCharacteristic result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "height":
							result.Height = new Hl7.Fhir.Model.Quantity();
							Parse(result.Height as Hl7.Fhir.Model.Quantity, reader); // 90
							break;
						case "width":
							result.Width = new Hl7.Fhir.Model.Quantity();
							Parse(result.Width as Hl7.Fhir.Model.Quantity, reader); // 100
							break;
						case "depth":
							result.Depth = new Hl7.Fhir.Model.Quantity();
							Parse(result.Depth as Hl7.Fhir.Model.Quantity, reader); // 110
							break;
						case "weight":
							result.Weight = new Hl7.Fhir.Model.Quantity();
							Parse(result.Weight as Hl7.Fhir.Model.Quantity, reader); // 120
							break;
						case "nominalVolume":
							result.NominalVolume = new Hl7.Fhir.Model.Quantity();
							Parse(result.NominalVolume as Hl7.Fhir.Model.Quantity, reader); // 130
							break;
						case "externalDiameter":
							result.ExternalDiameter = new Hl7.Fhir.Model.Quantity();
							Parse(result.ExternalDiameter as Hl7.Fhir.Model.Quantity, reader); // 140
							break;
						case "shape":
							result.ShapeElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ShapeElement as Hl7.Fhir.Model.FhirString, reader); // 150
							break;
						case "color":
							var newItem_color = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_color, reader); // 160
							result.ColorElement.Add(newItem_color);
							break;
						case "imprint":
							var newItem_imprint = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_imprint, reader); // 170
							result.ImprintElement.Add(newItem_imprint);
							break;
						case "image":
							var newItem_image = new Hl7.Fhir.Model.Attachment();
							Parse(newItem_image, reader); // 180
							result.Image.Add(newItem_image);
							break;
						case "scoring":
							result.Scoring = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Scoring as Hl7.Fhir.Model.CodeableConcept, reader); // 190
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ProductShelfLife
		public void Parse(Hl7.Fhir.Model.ProductShelfLife result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							result.Identifier = new Hl7.Fhir.Model.Identifier();
							Parse(result.Identifier as Hl7.Fhir.Model.Identifier, reader); // 90
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 100
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Quantity();
							Parse(result.Period as Hl7.Fhir.Model.Quantity, reader); // 110
							break;
						case "specialPrecautionsForStorage":
							var newItem_specialPrecautionsForStorage = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_specialPrecautionsForStorage, reader); // 120
							result.SpecialPrecautionsForStorage.Add(newItem_specialPrecautionsForStorage);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Quantity
		public void Parse(Hl7.Fhir.Model.Quantity result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "value":
							result.ValueElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.ValueElement as Hl7.Fhir.Model.FhirDecimal, reader); // 30
							break;
						case "comparator":
							result.ComparatorElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Quantity.QuantityComparator>();
							Parse(result.ComparatorElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Quantity.QuantityComparator>, reader); // 40
							break;
						case "unit":
							result.UnitElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.UnitElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "system":
							result.SystemElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.SystemElement as Hl7.Fhir.Model.FhirUri, reader); // 60
							break;
						case "code":
							result.CodeElement = new Hl7.Fhir.Model.Code();
							Parse(result.CodeElement as Hl7.Fhir.Model.Code, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Range
		public void Parse(Hl7.Fhir.Model.Range result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "low":
							result.Low = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Low as Hl7.Fhir.Model.SimpleQuantity, reader); // 30
							break;
						case "high":
							result.High = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.High as Hl7.Fhir.Model.SimpleQuantity, reader); // 40
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Ratio
		public void Parse(Hl7.Fhir.Model.Ratio result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "numerator":
							result.Numerator = new Hl7.Fhir.Model.Quantity();
							Parse(result.Numerator as Hl7.Fhir.Model.Quantity, reader); // 30
							break;
						case "denominator":
							result.Denominator = new Hl7.Fhir.Model.Quantity();
							Parse(result.Denominator as Hl7.Fhir.Model.Quantity, reader); // 40
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ResourceReference
		public void Parse(Hl7.Fhir.Model.ResourceReference result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "reference":
							result.ReferenceElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ReferenceElement as Hl7.Fhir.Model.FhirString, reader); // 30
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.TypeElement as Hl7.Fhir.Model.FhirUri, reader); // 40
							break;
						case "identifier":
							result.Identifier = new Hl7.Fhir.Model.Identifier();
							Parse(result.Identifier as Hl7.Fhir.Model.Identifier, reader); // 50
							break;
						case "display":
							result.DisplayElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DisplayElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.RelatedArtifact
		public void Parse(Hl7.Fhir.Model.RelatedArtifact result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RelatedArtifact.RelatedArtifactType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RelatedArtifact.RelatedArtifactType>, reader); // 30
							break;
						case "label":
							result.LabelElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.LabelElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "display":
							result.DisplayElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DisplayElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "citation":
							result.Citation = new Hl7.Fhir.Model.Markdown();
							Parse(result.Citation as Hl7.Fhir.Model.Markdown, reader); // 60
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUrl();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUrl, reader); // 70
							break;
						case "document":
							result.Document = new Hl7.Fhir.Model.Attachment();
							Parse(result.Document as Hl7.Fhir.Model.Attachment, reader); // 80
							break;
						case "resource":
							result.ResourceElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.ResourceElement as Hl7.Fhir.Model.Canonical, reader); // 90
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SampledData
		public void Parse(Hl7.Fhir.Model.SampledData result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "origin":
							result.Origin = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Origin as Hl7.Fhir.Model.SimpleQuantity, reader); // 30
							break;
						case "period":
							result.PeriodElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.PeriodElement as Hl7.Fhir.Model.FhirDecimal, reader); // 40
							break;
						case "factor":
							result.FactorElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.FactorElement as Hl7.Fhir.Model.FhirDecimal, reader); // 50
							break;
						case "lowerLimit":
							result.LowerLimitElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.LowerLimitElement as Hl7.Fhir.Model.FhirDecimal, reader); // 60
							break;
						case "upperLimit":
							result.UpperLimitElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.UpperLimitElement as Hl7.Fhir.Model.FhirDecimal, reader); // 70
							break;
						case "dimensions":
							result.DimensionsElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.DimensionsElement as Hl7.Fhir.Model.PositiveInt, reader); // 80
							break;
						case "data":
							result.DataElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DataElement as Hl7.Fhir.Model.FhirString, reader); // 90
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Signature
		public void Parse(Hl7.Fhir.Model.Signature result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "type":
							var newItem_type = new Hl7.Fhir.Model.Coding();
							Parse(newItem_type, reader); // 30
							result.Type.Add(newItem_type);
							break;
						case "when":
							result.WhenElement = new Hl7.Fhir.Model.Instant();
							Parse(result.WhenElement as Hl7.Fhir.Model.Instant, reader); // 40
							break;
						case "who":
							result.Who = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Who as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						case "onBehalfOf":
							result.OnBehalfOf = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.OnBehalfOf as Hl7.Fhir.Model.ResourceReference, reader); // 60
							break;
						case "targetFormat":
							result.TargetFormatElement = new Hl7.Fhir.Model.Code();
							Parse(result.TargetFormatElement as Hl7.Fhir.Model.Code, reader); // 70
							break;
						case "sigFormat":
							result.SigFormatElement = new Hl7.Fhir.Model.Code();
							Parse(result.SigFormatElement as Hl7.Fhir.Model.Code, reader); // 80
							break;
						case "data":
							result.DataElement = new Hl7.Fhir.Model.Base64Binary();
							Parse(result.DataElement as Hl7.Fhir.Model.Base64Binary, reader); // 90
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.FhirString
		public void Parse(Hl7.Fhir.Model.FhirString result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "value":
							result.Value = reader.Value;
							break;
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SubstanceAmount
		public void Parse(Hl7.Fhir.Model.SubstanceAmount result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "amountQuantity":
							result.Amount = new Hl7.Fhir.Model.Quantity();
							Parse(result.Amount as Hl7.Fhir.Model.Quantity, reader); // 90
							break;
						case "amountRange":
							result.Amount = new Hl7.Fhir.Model.Range();
							Parse(result.Amount as Hl7.Fhir.Model.Range, reader); // 90
							break;
						case "amountString":
							result.Amount = new Hl7.Fhir.Model.FhirString();
							Parse(result.Amount as Hl7.Fhir.Model.FhirString, reader); // 90
							break;
						case "amountType":
							result.AmountType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.AmountType as Hl7.Fhir.Model.CodeableConcept, reader); // 100
							break;
						case "amountText":
							result.AmountTextElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.AmountTextElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "referenceRange":
							result.ReferenceRange = new Hl7.Fhir.Model.SubstanceAmount.ReferenceRangeComponent();
							Parse(result.ReferenceRange as Hl7.Fhir.Model.SubstanceAmount.ReferenceRangeComponent, reader); // 120
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SubstanceAmount.ReferenceRangeComponent
		public void Parse(Hl7.Fhir.Model.SubstanceAmount.ReferenceRangeComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "lowLimit":
							result.LowLimit = new Hl7.Fhir.Model.Quantity();
							Parse(result.LowLimit as Hl7.Fhir.Model.Quantity, reader); // 40
							break;
						case "highLimit":
							result.HighLimit = new Hl7.Fhir.Model.Quantity();
							Parse(result.HighLimit as Hl7.Fhir.Model.Quantity, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Time
		public void Parse(Hl7.Fhir.Model.Time result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "value":
							result.Value = reader.Value;
							break;
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Timing
		public void Parse(Hl7.Fhir.Model.Timing result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "event":
							var newItem_event = new Hl7.Fhir.Model.FhirDateTime();
							Parse(newItem_event, reader); // 90
							result.EventElement.Add(newItem_event);
							break;
						case "repeat":
							result.Repeat = new Hl7.Fhir.Model.Timing.RepeatComponent();
							Parse(result.Repeat as Hl7.Fhir.Model.Timing.RepeatComponent, reader); // 100
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 110
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Timing.RepeatComponent
		public void Parse(Hl7.Fhir.Model.Timing.RepeatComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "boundsDuration":
							result.Bounds = new Hl7.Fhir.Model.Duration();
							Parse(result.Bounds as Hl7.Fhir.Model.Duration, reader); // 40
							break;
						case "boundsRange":
							result.Bounds = new Hl7.Fhir.Model.Range();
							Parse(result.Bounds as Hl7.Fhir.Model.Range, reader); // 40
							break;
						case "boundsPeriod":
							result.Bounds = new Hl7.Fhir.Model.Period();
							Parse(result.Bounds as Hl7.Fhir.Model.Period, reader); // 40
							break;
						case "count":
							result.CountElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.CountElement as Hl7.Fhir.Model.PositiveInt, reader); // 50
							break;
						case "countMax":
							result.CountMaxElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.CountMaxElement as Hl7.Fhir.Model.PositiveInt, reader); // 60
							break;
						case "duration":
							result.DurationElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.DurationElement as Hl7.Fhir.Model.FhirDecimal, reader); // 70
							break;
						case "durationMax":
							result.DurationMaxElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.DurationMaxElement as Hl7.Fhir.Model.FhirDecimal, reader); // 80
							break;
						case "durationUnit":
							result.DurationUnitElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Timing.UnitsOfTime>();
							Parse(result.DurationUnitElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Timing.UnitsOfTime>, reader); // 90
							break;
						case "frequency":
							result.FrequencyElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.FrequencyElement as Hl7.Fhir.Model.PositiveInt, reader); // 100
							break;
						case "frequencyMax":
							result.FrequencyMaxElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.FrequencyMaxElement as Hl7.Fhir.Model.PositiveInt, reader); // 110
							break;
						case "period":
							result.PeriodElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.PeriodElement as Hl7.Fhir.Model.FhirDecimal, reader); // 120
							break;
						case "periodMax":
							result.PeriodMaxElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.PeriodMaxElement as Hl7.Fhir.Model.FhirDecimal, reader); // 130
							break;
						case "periodUnit":
							result.PeriodUnitElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Timing.UnitsOfTime>();
							Parse(result.PeriodUnitElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Timing.UnitsOfTime>, reader); // 140
							break;
						case "dayOfWeek":
							var newItem_dayOfWeek = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DaysOfWeek>();
							Parse(newItem_dayOfWeek, reader); // 150
							result.DayOfWeekElement.Add(newItem_dayOfWeek);
							break;
						case "timeOfDay":
							var newItem_timeOfDay = new Hl7.Fhir.Model.Time();
							Parse(newItem_timeOfDay, reader); // 160
							result.TimeOfDayElement.Add(newItem_timeOfDay);
							break;
						case "when":
							var newItem_when = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Timing.EventTiming>();
							Parse(newItem_when, reader); // 170
							result.WhenElement.Add(newItem_when);
							break;
						case "offset":
							result.OffsetElement = new Hl7.Fhir.Model.UnsignedInt();
							Parse(result.OffsetElement as Hl7.Fhir.Model.UnsignedInt, reader); // 180
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TriggerDefinition
		public void Parse(Hl7.Fhir.Model.TriggerDefinition result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.TriggerDefinition.TriggerType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.TriggerDefinition.TriggerType>, reader); // 30
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "timingTiming":
							result.Timing = new Hl7.Fhir.Model.Timing();
							Parse(result.Timing as Hl7.Fhir.Model.Timing, reader); // 50
							break;
						case "timingReference":
							result.Timing = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Timing as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						case "timingDate":
							result.Timing = new Hl7.Fhir.Model.Date();
							Parse(result.Timing as Hl7.Fhir.Model.Date, reader); // 50
							break;
						case "timingDateTime":
							result.Timing = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Timing as Hl7.Fhir.Model.FhirDateTime, reader); // 50
							break;
						case "data":
							var newItem_data = new Hl7.Fhir.Model.DataRequirement();
							Parse(newItem_data, reader); // 60
							result.Data.Add(newItem_data);
							break;
						case "condition":
							result.Condition = new Hl7.Fhir.Model.Expression();
							Parse(result.Condition as Hl7.Fhir.Model.Expression, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.UnsignedInt
		public void Parse(Hl7.Fhir.Model.UnsignedInt result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "value":
							result.Value = Hl7.Fhir.Serialization.PrimitiveTypeConverter.ConvertTo<System.Int32>(reader.Value);
							break;
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.FhirUri
		public void Parse(Hl7.Fhir.Model.FhirUri result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "value":
							result.Value = reader.Value;
							break;
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.FhirUrl
		public void Parse(Hl7.Fhir.Model.FhirUrl result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "value":
							result.Value = reader.Value;
							break;
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.UsageContext
		public void Parse(Hl7.Fhir.Model.UsageContext result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.Coding();
							Parse(result.Code as Hl7.Fhir.Model.Coding, reader); // 30
							break;
						case "valueCodeableConcept":
							result.Value = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Value as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "valueQuantity":
							result.Value = new Hl7.Fhir.Model.Quantity();
							Parse(result.Value as Hl7.Fhir.Model.Quantity, reader); // 40
							break;
						case "valueRange":
							result.Value = new Hl7.Fhir.Model.Range();
							Parse(result.Value as Hl7.Fhir.Model.Range, reader); // 40
							break;
						case "valueReference":
							result.Value = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Value as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Uuid
		public void Parse(Hl7.Fhir.Model.Uuid result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "value":
							result.Value = reader.Value;
							break;
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.XHtml
		public void Parse(Hl7.Fhir.Model.XHtml result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "value":
							result.Value = reader.Value;
							break;
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Account.CoverageComponent
		public void Parse(Hl7.Fhir.Model.Account.CoverageComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "coverage":
							result.Coverage = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Coverage as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						case "priority":
							result.PriorityElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.PriorityElement as Hl7.Fhir.Model.PositiveInt, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Account.GuarantorComponent
		public void Parse(Hl7.Fhir.Model.Account.GuarantorComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "party":
							result.Party = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Party as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						case "onHold":
							result.OnHoldElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.OnHoldElement as Hl7.Fhir.Model.FhirBoolean, reader); // 50
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ActivityDefinition.ParticipantComponent
		public void Parse(Hl7.Fhir.Model.ActivityDefinition.ParticipantComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ActionParticipantType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ActionParticipantType>, reader); // 40
							break;
						case "role":
							result.Role = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Role as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ActivityDefinition.DynamicValueComponent
		public void Parse(Hl7.Fhir.Model.ActivityDefinition.DynamicValueComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "path":
							result.PathElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PathElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "expression":
							result.Expression = new Hl7.Fhir.Model.Expression();
							Parse(result.Expression as Hl7.Fhir.Model.Expression, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.AdverseEvent.SuspectEntityComponent
		public void Parse(Hl7.Fhir.Model.AdverseEvent.SuspectEntityComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "instance":
							result.Instance = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Instance as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						case "causality":
							var newItem_causality = new Hl7.Fhir.Model.AdverseEvent.CausalityComponent();
							Parse(newItem_causality, reader); // 50
							result.Causality.Add(newItem_causality);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.AdverseEvent.CausalityComponent
		public void Parse(Hl7.Fhir.Model.AdverseEvent.CausalityComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "assessment":
							result.Assessment = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Assessment as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "productRelatedness":
							result.ProductRelatednessElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ProductRelatednessElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "author":
							result.Author = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Author as Hl7.Fhir.Model.ResourceReference, reader); // 60
							break;
						case "method":
							result.Method = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Method as Hl7.Fhir.Model.CodeableConcept, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.AllergyIntolerance.ReactionComponent
		public void Parse(Hl7.Fhir.Model.AllergyIntolerance.ReactionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "substance":
							result.Substance = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Substance as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "manifestation":
							var newItem_manifestation = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_manifestation, reader); // 50
							result.Manifestation.Add(newItem_manifestation);
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "onset":
							result.OnsetElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.OnsetElement as Hl7.Fhir.Model.FhirDateTime, reader); // 70
							break;
						case "severity":
							result.SeverityElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.AllergyIntolerance.AllergyIntoleranceSeverity>();
							Parse(result.SeverityElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.AllergyIntolerance.AllergyIntoleranceSeverity>, reader); // 80
							break;
						case "exposureRoute":
							result.ExposureRoute = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.ExposureRoute as Hl7.Fhir.Model.CodeableConcept, reader); // 90
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 100
							result.Note.Add(newItem_note);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Appointment.ParticipantComponent
		public void Parse(Hl7.Fhir.Model.Appointment.ParticipantComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							var newItem_type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_type, reader); // 40
							result.Type.Add(newItem_type);
							break;
						case "actor":
							result.Actor = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Actor as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						case "required":
							result.RequiredElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Appointment.ParticipantRequired>();
							Parse(result.RequiredElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Appointment.ParticipantRequired>, reader); // 60
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ParticipationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ParticipationStatus>, reader); // 70
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 80
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.AuditEvent.AgentComponent
		public void Parse(Hl7.Fhir.Model.AuditEvent.AgentComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "role":
							var newItem_role = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_role, reader); // 50
							result.Role.Add(newItem_role);
							break;
						case "who":
							result.Who = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Who as Hl7.Fhir.Model.ResourceReference, reader); // 60
							break;
						case "altId":
							result.AltIdElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.AltIdElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 80
							break;
						case "requestor":
							result.RequestorElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.RequestorElement as Hl7.Fhir.Model.FhirBoolean, reader); // 90
							break;
						case "location":
							result.Location = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Location as Hl7.Fhir.Model.ResourceReference, reader); // 100
							break;
						case "policy":
							var newItem_policy = new Hl7.Fhir.Model.FhirUri();
							Parse(newItem_policy, reader); // 110
							result.PolicyElement.Add(newItem_policy);
							break;
						case "media":
							result.Media = new Hl7.Fhir.Model.Coding();
							Parse(result.Media as Hl7.Fhir.Model.Coding, reader); // 120
							break;
						case "network":
							result.Network = new Hl7.Fhir.Model.AuditEvent.NetworkComponent();
							Parse(result.Network as Hl7.Fhir.Model.AuditEvent.NetworkComponent, reader); // 130
							break;
						case "purposeOfUse":
							var newItem_purposeOfUse = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_purposeOfUse, reader); // 140
							result.PurposeOfUse.Add(newItem_purposeOfUse);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.AuditEvent.NetworkComponent
		public void Parse(Hl7.Fhir.Model.AuditEvent.NetworkComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "address":
							result.AddressElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.AddressElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.AuditEvent.AuditEventAgentNetworkType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.AuditEvent.AuditEventAgentNetworkType>, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.AuditEvent.SourceComponent
		public void Parse(Hl7.Fhir.Model.AuditEvent.SourceComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "site":
							result.SiteElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.SiteElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "observer":
							result.Observer = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Observer as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						case "type":
							var newItem_type = new Hl7.Fhir.Model.Coding();
							Parse(newItem_type, reader); // 60
							result.Type.Add(newItem_type);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.AuditEvent.EntityComponent
		public void Parse(Hl7.Fhir.Model.AuditEvent.EntityComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "what":
							result.What = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.What as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.Coding();
							Parse(result.Type as Hl7.Fhir.Model.Coding, reader); // 50
							break;
						case "role":
							result.Role = new Hl7.Fhir.Model.Coding();
							Parse(result.Role as Hl7.Fhir.Model.Coding, reader); // 60
							break;
						case "lifecycle":
							result.Lifecycle = new Hl7.Fhir.Model.Coding();
							Parse(result.Lifecycle as Hl7.Fhir.Model.Coding, reader); // 70
							break;
						case "securityLabel":
							var newItem_securityLabel = new Hl7.Fhir.Model.Coding();
							Parse(newItem_securityLabel, reader); // 80
							result.SecurityLabel.Add(newItem_securityLabel);
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 90
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 100
							break;
						case "query":
							result.QueryElement = new Hl7.Fhir.Model.Base64Binary();
							Parse(result.QueryElement as Hl7.Fhir.Model.Base64Binary, reader); // 110
							break;
						case "detail":
							var newItem_detail = new Hl7.Fhir.Model.AuditEvent.DetailComponent();
							Parse(newItem_detail, reader); // 120
							result.Detail.Add(newItem_detail);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.AuditEvent.DetailComponent
		public void Parse(Hl7.Fhir.Model.AuditEvent.DetailComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TypeElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "valueString":
							result.Value = new Hl7.Fhir.Model.FhirString();
							Parse(result.Value as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "valueBase64Binary":
							result.Value = new Hl7.Fhir.Model.Base64Binary();
							Parse(result.Value as Hl7.Fhir.Model.Base64Binary, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.BiologicallyDerivedProduct.CollectionComponent
		public void Parse(Hl7.Fhir.Model.BiologicallyDerivedProduct.CollectionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "collector":
							result.Collector = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Collector as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						case "source":
							result.Source = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Source as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						case "collectedDateTime":
							result.Collected = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Collected as Hl7.Fhir.Model.FhirDateTime, reader); // 60
							break;
						case "collectedPeriod":
							result.Collected = new Hl7.Fhir.Model.Period();
							Parse(result.Collected as Hl7.Fhir.Model.Period, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.BiologicallyDerivedProduct.ProcessingComponent
		public void Parse(Hl7.Fhir.Model.BiologicallyDerivedProduct.ProcessingComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "procedure":
							result.Procedure = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Procedure as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "additive":
							result.Additive = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Additive as Hl7.Fhir.Model.ResourceReference, reader); // 60
							break;
						case "timeDateTime":
							result.Time = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Time as Hl7.Fhir.Model.FhirDateTime, reader); // 70
							break;
						case "timePeriod":
							result.Time = new Hl7.Fhir.Model.Period();
							Parse(result.Time as Hl7.Fhir.Model.Period, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.BiologicallyDerivedProduct.ManipulationComponent
		public void Parse(Hl7.Fhir.Model.BiologicallyDerivedProduct.ManipulationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "timeDateTime":
							result.Time = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Time as Hl7.Fhir.Model.FhirDateTime, reader); // 50
							break;
						case "timePeriod":
							result.Time = new Hl7.Fhir.Model.Period();
							Parse(result.Time as Hl7.Fhir.Model.Period, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.BiologicallyDerivedProduct.StorageComponent
		public void Parse(Hl7.Fhir.Model.BiologicallyDerivedProduct.StorageComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "temperature":
							result.TemperatureElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.TemperatureElement as Hl7.Fhir.Model.FhirDecimal, reader); // 50
							break;
						case "scale":
							result.ScaleElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.BiologicallyDerivedProduct.BiologicallyDerivedProductStorageScale>();
							Parse(result.ScaleElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.BiologicallyDerivedProduct.BiologicallyDerivedProductStorageScale>, reader); // 60
							break;
						case "duration":
							result.Duration = new Hl7.Fhir.Model.Period();
							Parse(result.Duration as Hl7.Fhir.Model.Period, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Bundle.EntryComponent
		public void Parse(Hl7.Fhir.Model.Bundle.EntryComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "link":
							var newItem_link = new Hl7.Fhir.Model.Bundle.LinkComponent();
							Parse(newItem_link, reader); // 40
							result.Link.Add(newItem_link);
							break;
						case "fullUrl":
							result.FullUrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.FullUrlElement as Hl7.Fhir.Model.FhirUri, reader); // 50
							break;
						case "resource":
							// FirstChildOf(reader); // 60
							var ResourceResource = Parse(reader);
							result.Resource = ResourceResource;
							reader.Read();
							break;
						case "search":
							result.Search = new Hl7.Fhir.Model.Bundle.SearchComponent();
							Parse(result.Search as Hl7.Fhir.Model.Bundle.SearchComponent, reader); // 70
							break;
						case "request":
							result.Request = new Hl7.Fhir.Model.Bundle.RequestComponent();
							Parse(result.Request as Hl7.Fhir.Model.Bundle.RequestComponent, reader); // 80
							break;
						case "response":
							result.Response = new Hl7.Fhir.Model.Bundle.ResponseComponent();
							Parse(result.Response as Hl7.Fhir.Model.Bundle.ResponseComponent, reader); // 90
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Bundle.LinkComponent
		public void Parse(Hl7.Fhir.Model.Bundle.LinkComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "relation":
							result.RelationElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.RelationElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUri, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Bundle.SearchComponent
		public void Parse(Hl7.Fhir.Model.Bundle.SearchComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "mode":
							result.ModeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Bundle.SearchEntryMode>();
							Parse(result.ModeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Bundle.SearchEntryMode>, reader); // 40
							break;
						case "score":
							result.ScoreElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.ScoreElement as Hl7.Fhir.Model.FhirDecimal, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Bundle.RequestComponent
		public void Parse(Hl7.Fhir.Model.Bundle.RequestComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "method":
							result.MethodElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Bundle.HTTPVerb>();
							Parse(result.MethodElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Bundle.HTTPVerb>, reader); // 40
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUri, reader); // 50
							break;
						case "ifNoneMatch":
							result.IfNoneMatchElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.IfNoneMatchElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "ifModifiedSince":
							result.IfModifiedSinceElement = new Hl7.Fhir.Model.Instant();
							Parse(result.IfModifiedSinceElement as Hl7.Fhir.Model.Instant, reader); // 70
							break;
						case "ifMatch":
							result.IfMatchElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.IfMatchElement as Hl7.Fhir.Model.FhirString, reader); // 80
							break;
						case "ifNoneExist":
							result.IfNoneExistElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.IfNoneExistElement as Hl7.Fhir.Model.FhirString, reader); // 90
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Bundle.ResponseComponent
		public void Parse(Hl7.Fhir.Model.Bundle.ResponseComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.StatusElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "location":
							result.LocationElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.LocationElement as Hl7.Fhir.Model.FhirUri, reader); // 50
							break;
						case "etag":
							result.EtagElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.EtagElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "lastModified":
							result.LastModifiedElement = new Hl7.Fhir.Model.Instant();
							Parse(result.LastModifiedElement as Hl7.Fhir.Model.Instant, reader); // 70
							break;
						case "outcome":
							// FirstChildOf(reader); // 80
							var OutcomeResource = Parse(reader);
							result.Outcome = OutcomeResource;
							reader.Read();
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CapabilityStatement.SoftwareComponent
		public void Parse(Hl7.Fhir.Model.CapabilityStatement.SoftwareComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "releaseDate":
							result.ReleaseDateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.ReleaseDateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CapabilityStatement.ImplementationComponent
		public void Parse(Hl7.Fhir.Model.CapabilityStatement.ImplementationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUrl();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUrl, reader); // 50
							break;
						case "custodian":
							result.Custodian = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Custodian as Hl7.Fhir.Model.ResourceReference, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CapabilityStatement.RestComponent
		public void Parse(Hl7.Fhir.Model.CapabilityStatement.RestComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "mode":
							result.ModeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CapabilityStatement.RestfulCapabilityMode>();
							Parse(result.ModeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CapabilityStatement.RestfulCapabilityMode>, reader); // 40
							break;
						case "documentation":
							result.Documentation = new Hl7.Fhir.Model.Markdown();
							Parse(result.Documentation as Hl7.Fhir.Model.Markdown, reader); // 50
							break;
						case "security":
							result.Security = new Hl7.Fhir.Model.CapabilityStatement.SecurityComponent();
							Parse(result.Security as Hl7.Fhir.Model.CapabilityStatement.SecurityComponent, reader); // 60
							break;
						case "resource":
							var newItem_resource = new Hl7.Fhir.Model.CapabilityStatement.ResourceComponent();
							Parse(newItem_resource, reader); // 70
							result.Resource.Add(newItem_resource);
							break;
						case "interaction":
							var newItem_interaction = new Hl7.Fhir.Model.CapabilityStatement.SystemInteractionComponent();
							Parse(newItem_interaction, reader); // 80
							result.Interaction.Add(newItem_interaction);
							break;
						case "searchParam":
							var newItem_searchParam = new Hl7.Fhir.Model.CapabilityStatement.SearchParamComponent();
							Parse(newItem_searchParam, reader); // 90
							result.SearchParam.Add(newItem_searchParam);
							break;
						case "operation":
							var newItem_operation = new Hl7.Fhir.Model.CapabilityStatement.OperationComponent();
							Parse(newItem_operation, reader); // 100
							result.Operation.Add(newItem_operation);
							break;
						case "compartment":
							var newItem_compartment = new Hl7.Fhir.Model.Canonical();
							Parse(newItem_compartment, reader); // 110
							result.CompartmentElement.Add(newItem_compartment);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CapabilityStatement.SecurityComponent
		public void Parse(Hl7.Fhir.Model.CapabilityStatement.SecurityComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "cors":
							result.CorsElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.CorsElement as Hl7.Fhir.Model.FhirBoolean, reader); // 40
							break;
						case "service":
							var newItem_service = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_service, reader); // 50
							result.Service.Add(newItem_service);
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.Markdown();
							Parse(result.Description as Hl7.Fhir.Model.Markdown, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CapabilityStatement.ResourceComponent
		public void Parse(Hl7.Fhir.Model.CapabilityStatement.ResourceComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ResourceType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ResourceType>, reader); // 40
							break;
						case "profile":
							result.ProfileElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.ProfileElement as Hl7.Fhir.Model.Canonical, reader); // 50
							break;
						case "supportedProfile":
							var newItem_supportedProfile = new Hl7.Fhir.Model.Canonical();
							Parse(newItem_supportedProfile, reader); // 60
							result.SupportedProfileElement.Add(newItem_supportedProfile);
							break;
						case "documentation":
							result.Documentation = new Hl7.Fhir.Model.Markdown();
							Parse(result.Documentation as Hl7.Fhir.Model.Markdown, reader); // 70
							break;
						case "interaction":
							var newItem_interaction = new Hl7.Fhir.Model.CapabilityStatement.ResourceInteractionComponent();
							Parse(newItem_interaction, reader); // 80
							result.Interaction.Add(newItem_interaction);
							break;
						case "versioning":
							result.VersioningElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CapabilityStatement.ResourceVersionPolicy>();
							Parse(result.VersioningElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CapabilityStatement.ResourceVersionPolicy>, reader); // 90
							break;
						case "readHistory":
							result.ReadHistoryElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ReadHistoryElement as Hl7.Fhir.Model.FhirBoolean, reader); // 100
							break;
						case "updateCreate":
							result.UpdateCreateElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.UpdateCreateElement as Hl7.Fhir.Model.FhirBoolean, reader); // 110
							break;
						case "conditionalCreate":
							result.ConditionalCreateElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ConditionalCreateElement as Hl7.Fhir.Model.FhirBoolean, reader); // 120
							break;
						case "conditionalRead":
							result.ConditionalReadElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CapabilityStatement.ConditionalReadStatus>();
							Parse(result.ConditionalReadElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CapabilityStatement.ConditionalReadStatus>, reader); // 130
							break;
						case "conditionalUpdate":
							result.ConditionalUpdateElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ConditionalUpdateElement as Hl7.Fhir.Model.FhirBoolean, reader); // 140
							break;
						case "conditionalDelete":
							result.ConditionalDeleteElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CapabilityStatement.ConditionalDeleteStatus>();
							Parse(result.ConditionalDeleteElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CapabilityStatement.ConditionalDeleteStatus>, reader); // 150
							break;
						case "referencePolicy":
							var newItem_referencePolicy = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CapabilityStatement.ReferenceHandlingPolicy>();
							Parse(newItem_referencePolicy, reader); // 160
							result.ReferencePolicyElement.Add(newItem_referencePolicy);
							break;
						case "searchInclude":
							var newItem_searchInclude = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_searchInclude, reader); // 170
							result.SearchIncludeElement.Add(newItem_searchInclude);
							break;
						case "searchRevInclude":
							var newItem_searchRevInclude = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_searchRevInclude, reader); // 180
							result.SearchRevIncludeElement.Add(newItem_searchRevInclude);
							break;
						case "searchParam":
							var newItem_searchParam = new Hl7.Fhir.Model.CapabilityStatement.SearchParamComponent();
							Parse(newItem_searchParam, reader); // 190
							result.SearchParam.Add(newItem_searchParam);
							break;
						case "operation":
							var newItem_operation = new Hl7.Fhir.Model.CapabilityStatement.OperationComponent();
							Parse(newItem_operation, reader); // 200
							result.Operation.Add(newItem_operation);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CapabilityStatement.ResourceInteractionComponent
		public void Parse(Hl7.Fhir.Model.CapabilityStatement.ResourceInteractionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.CodeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CapabilityStatement.TypeRestfulInteraction>();
							Parse(result.CodeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CapabilityStatement.TypeRestfulInteraction>, reader); // 40
							break;
						case "documentation":
							result.Documentation = new Hl7.Fhir.Model.Markdown();
							Parse(result.Documentation as Hl7.Fhir.Model.Markdown, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CapabilityStatement.SearchParamComponent
		public void Parse(Hl7.Fhir.Model.CapabilityStatement.SearchParamComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "definition":
							result.DefinitionElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.DefinitionElement as Hl7.Fhir.Model.Canonical, reader); // 50
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.SearchParamType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.SearchParamType>, reader); // 60
							break;
						case "documentation":
							result.Documentation = new Hl7.Fhir.Model.Markdown();
							Parse(result.Documentation as Hl7.Fhir.Model.Markdown, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CapabilityStatement.OperationComponent
		public void Parse(Hl7.Fhir.Model.CapabilityStatement.OperationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "definition":
							result.DefinitionElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.DefinitionElement as Hl7.Fhir.Model.Canonical, reader); // 50
							break;
						case "documentation":
							result.Documentation = new Hl7.Fhir.Model.Markdown();
							Parse(result.Documentation as Hl7.Fhir.Model.Markdown, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CapabilityStatement.SystemInteractionComponent
		public void Parse(Hl7.Fhir.Model.CapabilityStatement.SystemInteractionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.CodeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CapabilityStatement.SystemRestfulInteraction>();
							Parse(result.CodeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CapabilityStatement.SystemRestfulInteraction>, reader); // 40
							break;
						case "documentation":
							result.Documentation = new Hl7.Fhir.Model.Markdown();
							Parse(result.Documentation as Hl7.Fhir.Model.Markdown, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CapabilityStatement.MessagingComponent
		public void Parse(Hl7.Fhir.Model.CapabilityStatement.MessagingComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "endpoint":
							var newItem_endpoint = new Hl7.Fhir.Model.CapabilityStatement.EndpointComponent();
							Parse(newItem_endpoint, reader); // 40
							result.Endpoint.Add(newItem_endpoint);
							break;
						case "reliableCache":
							result.ReliableCacheElement = new Hl7.Fhir.Model.UnsignedInt();
							Parse(result.ReliableCacheElement as Hl7.Fhir.Model.UnsignedInt, reader); // 50
							break;
						case "documentation":
							result.Documentation = new Hl7.Fhir.Model.Markdown();
							Parse(result.Documentation as Hl7.Fhir.Model.Markdown, reader); // 60
							break;
						case "supportedMessage":
							var newItem_supportedMessage = new Hl7.Fhir.Model.CapabilityStatement.SupportedMessageComponent();
							Parse(newItem_supportedMessage, reader); // 70
							result.SupportedMessage.Add(newItem_supportedMessage);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CapabilityStatement.EndpointComponent
		public void Parse(Hl7.Fhir.Model.CapabilityStatement.EndpointComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "protocol":
							result.Protocol = new Hl7.Fhir.Model.Coding();
							Parse(result.Protocol as Hl7.Fhir.Model.Coding, reader); // 40
							break;
						case "address":
							result.AddressElement = new Hl7.Fhir.Model.FhirUrl();
							Parse(result.AddressElement as Hl7.Fhir.Model.FhirUrl, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CapabilityStatement.SupportedMessageComponent
		public void Parse(Hl7.Fhir.Model.CapabilityStatement.SupportedMessageComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "mode":
							result.ModeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CapabilityStatement.EventCapabilityMode>();
							Parse(result.ModeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CapabilityStatement.EventCapabilityMode>, reader); // 40
							break;
						case "definition":
							result.DefinitionElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.DefinitionElement as Hl7.Fhir.Model.Canonical, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CapabilityStatement.DocumentComponent
		public void Parse(Hl7.Fhir.Model.CapabilityStatement.DocumentComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "mode":
							result.ModeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CapabilityStatement.DocumentMode>();
							Parse(result.ModeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CapabilityStatement.DocumentMode>, reader); // 40
							break;
						case "documentation":
							result.Documentation = new Hl7.Fhir.Model.Markdown();
							Parse(result.Documentation as Hl7.Fhir.Model.Markdown, reader); // 50
							break;
						case "profile":
							result.ProfileElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.ProfileElement as Hl7.Fhir.Model.Canonical, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CarePlan.ActivityComponent
		public void Parse(Hl7.Fhir.Model.CarePlan.ActivityComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "outcomeCodeableConcept":
							var newItem_outcomeCodeableConcept = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_outcomeCodeableConcept, reader); // 40
							result.OutcomeCodeableConcept.Add(newItem_outcomeCodeableConcept);
							break;
						case "outcomeReference":
							var newItem_outcomeReference = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_outcomeReference, reader); // 50
							result.OutcomeReference.Add(newItem_outcomeReference);
							break;
						case "progress":
							var newItem_progress = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_progress, reader); // 60
							result.Progress.Add(newItem_progress);
							break;
						case "reference":
							result.Reference = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Reference as Hl7.Fhir.Model.ResourceReference, reader); // 70
							break;
						case "detail":
							result.Detail = new Hl7.Fhir.Model.CarePlan.DetailComponent();
							Parse(result.Detail as Hl7.Fhir.Model.CarePlan.DetailComponent, reader); // 80
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CarePlan.DetailComponent
		public void Parse(Hl7.Fhir.Model.CarePlan.DetailComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "kind":
							result.KindElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CarePlan.CarePlanActivityKind>();
							Parse(result.KindElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CarePlan.CarePlanActivityKind>, reader); // 40
							break;
						case "instantiatesCanonical":
							var newItem_instantiatesCanonical = new Hl7.Fhir.Model.Canonical();
							Parse(newItem_instantiatesCanonical, reader); // 50
							result.InstantiatesCanonicalElement.Add(newItem_instantiatesCanonical);
							break;
						case "instantiatesUri":
							var newItem_instantiatesUri = new Hl7.Fhir.Model.FhirUri();
							Parse(newItem_instantiatesUri, reader); // 60
							result.InstantiatesUriElement.Add(newItem_instantiatesUri);
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 70
							break;
						case "reasonCode":
							var newItem_reasonCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_reasonCode, reader); // 80
							result.ReasonCode.Add(newItem_reasonCode);
							break;
						case "reasonReference":
							var newItem_reasonReference = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_reasonReference, reader); // 90
							result.ReasonReference.Add(newItem_reasonReference);
							break;
						case "goal":
							var newItem_goal = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_goal, reader); // 100
							result.Goal.Add(newItem_goal);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CarePlan.CarePlanActivityStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CarePlan.CarePlanActivityStatus>, reader); // 110
							break;
						case "statusReason":
							result.StatusReason = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.StatusReason as Hl7.Fhir.Model.CodeableConcept, reader); // 120
							break;
						case "doNotPerform":
							result.DoNotPerformElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.DoNotPerformElement as Hl7.Fhir.Model.FhirBoolean, reader); // 130
							break;
						case "scheduledTiming":
							result.Scheduled = new Hl7.Fhir.Model.Timing();
							Parse(result.Scheduled as Hl7.Fhir.Model.Timing, reader); // 140
							break;
						case "scheduledPeriod":
							result.Scheduled = new Hl7.Fhir.Model.Period();
							Parse(result.Scheduled as Hl7.Fhir.Model.Period, reader); // 140
							break;
						case "scheduledString":
							result.Scheduled = new Hl7.Fhir.Model.FhirString();
							Parse(result.Scheduled as Hl7.Fhir.Model.FhirString, reader); // 140
							break;
						case "location":
							result.Location = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Location as Hl7.Fhir.Model.ResourceReference, reader); // 150
							break;
						case "performer":
							var newItem_performer = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_performer, reader); // 160
							result.Performer.Add(newItem_performer);
							break;
						case "productCodeableConcept":
							result.Product = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Product as Hl7.Fhir.Model.CodeableConcept, reader); // 170
							break;
						case "productReference":
							result.Product = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Product as Hl7.Fhir.Model.ResourceReference, reader); // 170
							break;
						case "dailyAmount":
							result.DailyAmount = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.DailyAmount as Hl7.Fhir.Model.SimpleQuantity, reader); // 180
							break;
						case "quantity":
							result.Quantity = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Quantity as Hl7.Fhir.Model.SimpleQuantity, reader); // 190
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 200
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CareTeam.ParticipantComponent
		public void Parse(Hl7.Fhir.Model.CareTeam.ParticipantComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "role":
							var newItem_role = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_role, reader); // 40
							result.Role.Add(newItem_role);
							break;
						case "member":
							result.Member = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Member as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						case "onBehalfOf":
							result.OnBehalfOf = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.OnBehalfOf as Hl7.Fhir.Model.ResourceReference, reader); // 60
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CatalogEntry.RelatedEntryComponent
		public void Parse(Hl7.Fhir.Model.CatalogEntry.RelatedEntryComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "relationtype":
							result.RelationtypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CatalogEntry.CatalogEntryRelationType>();
							Parse(result.RelationtypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CatalogEntry.CatalogEntryRelationType>, reader); // 40
							break;
						case "item":
							result.Item = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Item as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ChargeItem.PerformerComponent
		public void Parse(Hl7.Fhir.Model.ChargeItem.PerformerComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "function":
							result.Function = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Function as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "actor":
							result.Actor = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Actor as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ChargeItemDefinition.ApplicabilityComponent
		public void Parse(Hl7.Fhir.Model.ChargeItemDefinition.ApplicabilityComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.LanguageElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "expression":
							result.ExpressionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ExpressionElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ChargeItemDefinition.PropertyGroupComponent
		public void Parse(Hl7.Fhir.Model.ChargeItemDefinition.PropertyGroupComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "applicability":
							var newItem_applicability = new Hl7.Fhir.Model.ChargeItemDefinition.ApplicabilityComponent();
							Parse(newItem_applicability, reader); // 40
							result.Applicability.Add(newItem_applicability);
							break;
						case "priceComponent":
							var newItem_priceComponent = new Hl7.Fhir.Model.ChargeItemDefinition.PriceComponentComponent();
							Parse(newItem_priceComponent, reader); // 50
							result.PriceComponent.Add(newItem_priceComponent);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ChargeItemDefinition.PriceComponentComponent
		public void Parse(Hl7.Fhir.Model.ChargeItemDefinition.PriceComponentComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.InvoicePriceComponentType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.InvoicePriceComponentType>, reader); // 40
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "factor":
							result.FactorElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.FactorElement as Hl7.Fhir.Model.FhirDecimal, reader); // 60
							break;
						case "amount":
							result.Amount = new Hl7.Fhir.Model.Money();
							Parse(result.Amount as Hl7.Fhir.Model.Money, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Claim.RelatedClaimComponent
		public void Parse(Hl7.Fhir.Model.Claim.RelatedClaimComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "claim":
							result.Claim = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Claim as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						case "relationship":
							result.Relationship = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Relationship as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "reference":
							result.Reference = new Hl7.Fhir.Model.Identifier();
							Parse(result.Reference as Hl7.Fhir.Model.Identifier, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Claim.PayeeComponent
		public void Parse(Hl7.Fhir.Model.Claim.PayeeComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "party":
							result.Party = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Party as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Claim.CareTeamComponent
		public void Parse(Hl7.Fhir.Model.Claim.CareTeamComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "sequence":
							result.SequenceElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.SequenceElement as Hl7.Fhir.Model.PositiveInt, reader); // 40
							break;
						case "provider":
							result.Provider = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Provider as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						case "responsible":
							result.ResponsibleElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ResponsibleElement as Hl7.Fhir.Model.FhirBoolean, reader); // 60
							break;
						case "role":
							result.Role = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Role as Hl7.Fhir.Model.CodeableConcept, reader); // 70
							break;
						case "qualification":
							result.Qualification = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Qualification as Hl7.Fhir.Model.CodeableConcept, reader); // 80
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Claim.SupportingInformationComponent
		public void Parse(Hl7.Fhir.Model.Claim.SupportingInformationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "sequence":
							result.SequenceElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.SequenceElement as Hl7.Fhir.Model.PositiveInt, reader); // 40
							break;
						case "category":
							result.Category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Category as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 60
							break;
						case "timingDate":
							result.Timing = new Hl7.Fhir.Model.Date();
							Parse(result.Timing as Hl7.Fhir.Model.Date, reader); // 70
							break;
						case "timingPeriod":
							result.Timing = new Hl7.Fhir.Model.Period();
							Parse(result.Timing as Hl7.Fhir.Model.Period, reader); // 70
							break;
						case "valueBoolean":
							result.Value = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.Value as Hl7.Fhir.Model.FhirBoolean, reader); // 80
							break;
						case "valueString":
							result.Value = new Hl7.Fhir.Model.FhirString();
							Parse(result.Value as Hl7.Fhir.Model.FhirString, reader); // 80
							break;
						case "valueQuantity":
							result.Value = new Hl7.Fhir.Model.Quantity();
							Parse(result.Value as Hl7.Fhir.Model.Quantity, reader); // 80
							break;
						case "valueAttachment":
							result.Value = new Hl7.Fhir.Model.Attachment();
							Parse(result.Value as Hl7.Fhir.Model.Attachment, reader); // 80
							break;
						case "valueReference":
							result.Value = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Value as Hl7.Fhir.Model.ResourceReference, reader); // 80
							break;
						case "reason":
							result.Reason = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Reason as Hl7.Fhir.Model.CodeableConcept, reader); // 90
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Claim.DiagnosisComponent
		public void Parse(Hl7.Fhir.Model.Claim.DiagnosisComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "sequence":
							result.SequenceElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.SequenceElement as Hl7.Fhir.Model.PositiveInt, reader); // 40
							break;
						case "diagnosisCodeableConcept":
							result.Diagnosis = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Diagnosis as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "diagnosisReference":
							result.Diagnosis = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Diagnosis as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						case "type":
							var newItem_type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_type, reader); // 60
							result.Type.Add(newItem_type);
							break;
						case "onAdmission":
							result.OnAdmission = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.OnAdmission as Hl7.Fhir.Model.CodeableConcept, reader); // 70
							break;
						case "packageCode":
							result.PackageCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.PackageCode as Hl7.Fhir.Model.CodeableConcept, reader); // 80
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Claim.ProcedureComponent
		public void Parse(Hl7.Fhir.Model.Claim.ProcedureComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "sequence":
							result.SequenceElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.SequenceElement as Hl7.Fhir.Model.PositiveInt, reader); // 40
							break;
						case "type":
							var newItem_type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_type, reader); // 50
							result.Type.Add(newItem_type);
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 60
							break;
						case "procedureCodeableConcept":
							result.Procedure = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Procedure as Hl7.Fhir.Model.CodeableConcept, reader); // 70
							break;
						case "procedureReference":
							result.Procedure = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Procedure as Hl7.Fhir.Model.ResourceReference, reader); // 70
							break;
						case "udi":
							var newItem_udi = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_udi, reader); // 80
							result.Udi.Add(newItem_udi);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Claim.InsuranceComponent
		public void Parse(Hl7.Fhir.Model.Claim.InsuranceComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "sequence":
							result.SequenceElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.SequenceElement as Hl7.Fhir.Model.PositiveInt, reader); // 40
							break;
						case "focal":
							result.FocalElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.FocalElement as Hl7.Fhir.Model.FhirBoolean, reader); // 50
							break;
						case "identifier":
							result.Identifier = new Hl7.Fhir.Model.Identifier();
							Parse(result.Identifier as Hl7.Fhir.Model.Identifier, reader); // 60
							break;
						case "coverage":
							result.Coverage = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Coverage as Hl7.Fhir.Model.ResourceReference, reader); // 70
							break;
						case "businessArrangement":
							result.BusinessArrangementElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.BusinessArrangementElement as Hl7.Fhir.Model.FhirString, reader); // 80
							break;
						case "preAuthRef":
							var newItem_preAuthRef = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_preAuthRef, reader); // 90
							result.PreAuthRefElement.Add(newItem_preAuthRef);
							break;
						case "claimResponse":
							result.ClaimResponse = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.ClaimResponse as Hl7.Fhir.Model.ResourceReference, reader); // 100
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Claim.AccidentComponent
		public void Parse(Hl7.Fhir.Model.Claim.AccidentComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.Date();
							Parse(result.DateElement as Hl7.Fhir.Model.Date, reader); // 40
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "locationAddress":
							result.Location = new Hl7.Fhir.Model.Address();
							Parse(result.Location as Hl7.Fhir.Model.Address, reader); // 60
							break;
						case "locationReference":
							result.Location = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Location as Hl7.Fhir.Model.ResourceReference, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Claim.ItemComponent
		public void Parse(Hl7.Fhir.Model.Claim.ItemComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "sequence":
							result.SequenceElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.SequenceElement as Hl7.Fhir.Model.PositiveInt, reader); // 40
							break;
						case "careTeamSequence":
							var newItem_careTeamSequence = new Hl7.Fhir.Model.PositiveInt();
							Parse(newItem_careTeamSequence, reader); // 50
							result.CareTeamSequenceElement.Add(newItem_careTeamSequence);
							break;
						case "diagnosisSequence":
							var newItem_diagnosisSequence = new Hl7.Fhir.Model.PositiveInt();
							Parse(newItem_diagnosisSequence, reader); // 60
							result.DiagnosisSequenceElement.Add(newItem_diagnosisSequence);
							break;
						case "procedureSequence":
							var newItem_procedureSequence = new Hl7.Fhir.Model.PositiveInt();
							Parse(newItem_procedureSequence, reader); // 70
							result.ProcedureSequenceElement.Add(newItem_procedureSequence);
							break;
						case "informationSequence":
							var newItem_informationSequence = new Hl7.Fhir.Model.PositiveInt();
							Parse(newItem_informationSequence, reader); // 80
							result.InformationSequenceElement.Add(newItem_informationSequence);
							break;
						case "revenue":
							result.Revenue = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Revenue as Hl7.Fhir.Model.CodeableConcept, reader); // 90
							break;
						case "category":
							result.Category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Category as Hl7.Fhir.Model.CodeableConcept, reader); // 100
							break;
						case "productOrService":
							result.ProductOrService = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.ProductOrService as Hl7.Fhir.Model.CodeableConcept, reader); // 110
							break;
						case "modifier":
							var newItem_modifier = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_modifier, reader); // 120
							result.Modifier.Add(newItem_modifier);
							break;
						case "programCode":
							var newItem_programCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_programCode, reader); // 130
							result.ProgramCode.Add(newItem_programCode);
							break;
						case "servicedDate":
							result.Serviced = new Hl7.Fhir.Model.Date();
							Parse(result.Serviced as Hl7.Fhir.Model.Date, reader); // 140
							break;
						case "servicedPeriod":
							result.Serviced = new Hl7.Fhir.Model.Period();
							Parse(result.Serviced as Hl7.Fhir.Model.Period, reader); // 140
							break;
						case "locationCodeableConcept":
							result.Location = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Location as Hl7.Fhir.Model.CodeableConcept, reader); // 150
							break;
						case "locationAddress":
							result.Location = new Hl7.Fhir.Model.Address();
							Parse(result.Location as Hl7.Fhir.Model.Address, reader); // 150
							break;
						case "locationReference":
							result.Location = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Location as Hl7.Fhir.Model.ResourceReference, reader); // 150
							break;
						case "quantity":
							result.Quantity = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Quantity as Hl7.Fhir.Model.SimpleQuantity, reader); // 160
							break;
						case "unitPrice":
							result.UnitPrice = new Hl7.Fhir.Model.Money();
							Parse(result.UnitPrice as Hl7.Fhir.Model.Money, reader); // 170
							break;
						case "factor":
							result.FactorElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.FactorElement as Hl7.Fhir.Model.FhirDecimal, reader); // 180
							break;
						case "net":
							result.Net = new Hl7.Fhir.Model.Money();
							Parse(result.Net as Hl7.Fhir.Model.Money, reader); // 190
							break;
						case "udi":
							var newItem_udi = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_udi, reader); // 200
							result.Udi.Add(newItem_udi);
							break;
						case "bodySite":
							result.BodySite = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.BodySite as Hl7.Fhir.Model.CodeableConcept, reader); // 210
							break;
						case "subSite":
							var newItem_subSite = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_subSite, reader); // 220
							result.SubSite.Add(newItem_subSite);
							break;
						case "encounter":
							var newItem_encounter = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_encounter, reader); // 230
							result.Encounter.Add(newItem_encounter);
							break;
						case "detail":
							var newItem_detail = new Hl7.Fhir.Model.Claim.DetailComponent();
							Parse(newItem_detail, reader); // 240
							result.Detail.Add(newItem_detail);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Claim.DetailComponent
		public void Parse(Hl7.Fhir.Model.Claim.DetailComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "sequence":
							result.SequenceElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.SequenceElement as Hl7.Fhir.Model.PositiveInt, reader); // 40
							break;
						case "revenue":
							result.Revenue = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Revenue as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "category":
							result.Category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Category as Hl7.Fhir.Model.CodeableConcept, reader); // 60
							break;
						case "productOrService":
							result.ProductOrService = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.ProductOrService as Hl7.Fhir.Model.CodeableConcept, reader); // 70
							break;
						case "modifier":
							var newItem_modifier = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_modifier, reader); // 80
							result.Modifier.Add(newItem_modifier);
							break;
						case "programCode":
							var newItem_programCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_programCode, reader); // 90
							result.ProgramCode.Add(newItem_programCode);
							break;
						case "quantity":
							result.Quantity = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Quantity as Hl7.Fhir.Model.SimpleQuantity, reader); // 100
							break;
						case "unitPrice":
							result.UnitPrice = new Hl7.Fhir.Model.Money();
							Parse(result.UnitPrice as Hl7.Fhir.Model.Money, reader); // 110
							break;
						case "factor":
							result.FactorElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.FactorElement as Hl7.Fhir.Model.FhirDecimal, reader); // 120
							break;
						case "net":
							result.Net = new Hl7.Fhir.Model.Money();
							Parse(result.Net as Hl7.Fhir.Model.Money, reader); // 130
							break;
						case "udi":
							var newItem_udi = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_udi, reader); // 140
							result.Udi.Add(newItem_udi);
							break;
						case "subDetail":
							var newItem_subDetail = new Hl7.Fhir.Model.Claim.SubDetailComponent();
							Parse(newItem_subDetail, reader); // 150
							result.SubDetail.Add(newItem_subDetail);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Claim.SubDetailComponent
		public void Parse(Hl7.Fhir.Model.Claim.SubDetailComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "sequence":
							result.SequenceElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.SequenceElement as Hl7.Fhir.Model.PositiveInt, reader); // 40
							break;
						case "revenue":
							result.Revenue = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Revenue as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "category":
							result.Category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Category as Hl7.Fhir.Model.CodeableConcept, reader); // 60
							break;
						case "productOrService":
							result.ProductOrService = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.ProductOrService as Hl7.Fhir.Model.CodeableConcept, reader); // 70
							break;
						case "modifier":
							var newItem_modifier = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_modifier, reader); // 80
							result.Modifier.Add(newItem_modifier);
							break;
						case "programCode":
							var newItem_programCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_programCode, reader); // 90
							result.ProgramCode.Add(newItem_programCode);
							break;
						case "quantity":
							result.Quantity = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Quantity as Hl7.Fhir.Model.SimpleQuantity, reader); // 100
							break;
						case "unitPrice":
							result.UnitPrice = new Hl7.Fhir.Model.Money();
							Parse(result.UnitPrice as Hl7.Fhir.Model.Money, reader); // 110
							break;
						case "factor":
							result.FactorElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.FactorElement as Hl7.Fhir.Model.FhirDecimal, reader); // 120
							break;
						case "net":
							result.Net = new Hl7.Fhir.Model.Money();
							Parse(result.Net as Hl7.Fhir.Model.Money, reader); // 130
							break;
						case "udi":
							var newItem_udi = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_udi, reader); // 140
							result.Udi.Add(newItem_udi);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ClaimResponse.ItemComponent
		public void Parse(Hl7.Fhir.Model.ClaimResponse.ItemComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "itemSequence":
							result.ItemSequenceElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.ItemSequenceElement as Hl7.Fhir.Model.PositiveInt, reader); // 40
							break;
						case "noteNumber":
							var newItem_noteNumber = new Hl7.Fhir.Model.PositiveInt();
							Parse(newItem_noteNumber, reader); // 50
							result.NoteNumberElement.Add(newItem_noteNumber);
							break;
						case "adjudication":
							var newItem_adjudication = new Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent();
							Parse(newItem_adjudication, reader); // 60
							result.Adjudication.Add(newItem_adjudication);
							break;
						case "detail":
							var newItem_detail = new Hl7.Fhir.Model.ClaimResponse.ItemDetailComponent();
							Parse(newItem_detail, reader); // 70
							result.Detail.Add(newItem_detail);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent
		public void Parse(Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "category":
							result.Category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Category as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "reason":
							result.Reason = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Reason as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "amount":
							result.Amount = new Hl7.Fhir.Model.Money();
							Parse(result.Amount as Hl7.Fhir.Model.Money, reader); // 60
							break;
						case "value":
							result.ValueElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.ValueElement as Hl7.Fhir.Model.FhirDecimal, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ClaimResponse.ItemDetailComponent
		public void Parse(Hl7.Fhir.Model.ClaimResponse.ItemDetailComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "detailSequence":
							result.DetailSequenceElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.DetailSequenceElement as Hl7.Fhir.Model.PositiveInt, reader); // 40
							break;
						case "noteNumber":
							var newItem_noteNumber = new Hl7.Fhir.Model.PositiveInt();
							Parse(newItem_noteNumber, reader); // 50
							result.NoteNumberElement.Add(newItem_noteNumber);
							break;
						case "adjudication":
							var newItem_adjudication = new Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent();
							Parse(newItem_adjudication, reader); // 60
							result.Adjudication.Add(newItem_adjudication);
							break;
						case "subDetail":
							var newItem_subDetail = new Hl7.Fhir.Model.ClaimResponse.SubDetailComponent();
							Parse(newItem_subDetail, reader); // 70
							result.SubDetail.Add(newItem_subDetail);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ClaimResponse.SubDetailComponent
		public void Parse(Hl7.Fhir.Model.ClaimResponse.SubDetailComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "subDetailSequence":
							result.SubDetailSequenceElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.SubDetailSequenceElement as Hl7.Fhir.Model.PositiveInt, reader); // 40
							break;
						case "noteNumber":
							var newItem_noteNumber = new Hl7.Fhir.Model.PositiveInt();
							Parse(newItem_noteNumber, reader); // 50
							result.NoteNumberElement.Add(newItem_noteNumber);
							break;
						case "adjudication":
							var newItem_adjudication = new Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent();
							Parse(newItem_adjudication, reader); // 60
							result.Adjudication.Add(newItem_adjudication);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ClaimResponse.AddedItemComponent
		public void Parse(Hl7.Fhir.Model.ClaimResponse.AddedItemComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "itemSequence":
							var newItem_itemSequence = new Hl7.Fhir.Model.PositiveInt();
							Parse(newItem_itemSequence, reader); // 40
							result.ItemSequenceElement.Add(newItem_itemSequence);
							break;
						case "detailSequence":
							var newItem_detailSequence = new Hl7.Fhir.Model.PositiveInt();
							Parse(newItem_detailSequence, reader); // 50
							result.DetailSequenceElement.Add(newItem_detailSequence);
							break;
						case "subdetailSequence":
							var newItem_subdetailSequence = new Hl7.Fhir.Model.PositiveInt();
							Parse(newItem_subdetailSequence, reader); // 60
							result.SubdetailSequenceElement.Add(newItem_subdetailSequence);
							break;
						case "provider":
							var newItem_provider = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_provider, reader); // 70
							result.Provider.Add(newItem_provider);
							break;
						case "productOrService":
							result.ProductOrService = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.ProductOrService as Hl7.Fhir.Model.CodeableConcept, reader); // 80
							break;
						case "modifier":
							var newItem_modifier = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_modifier, reader); // 90
							result.Modifier.Add(newItem_modifier);
							break;
						case "programCode":
							var newItem_programCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_programCode, reader); // 100
							result.ProgramCode.Add(newItem_programCode);
							break;
						case "servicedDate":
							result.Serviced = new Hl7.Fhir.Model.Date();
							Parse(result.Serviced as Hl7.Fhir.Model.Date, reader); // 110
							break;
						case "servicedPeriod":
							result.Serviced = new Hl7.Fhir.Model.Period();
							Parse(result.Serviced as Hl7.Fhir.Model.Period, reader); // 110
							break;
						case "locationCodeableConcept":
							result.Location = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Location as Hl7.Fhir.Model.CodeableConcept, reader); // 120
							break;
						case "locationAddress":
							result.Location = new Hl7.Fhir.Model.Address();
							Parse(result.Location as Hl7.Fhir.Model.Address, reader); // 120
							break;
						case "locationReference":
							result.Location = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Location as Hl7.Fhir.Model.ResourceReference, reader); // 120
							break;
						case "quantity":
							result.Quantity = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Quantity as Hl7.Fhir.Model.SimpleQuantity, reader); // 130
							break;
						case "unitPrice":
							result.UnitPrice = new Hl7.Fhir.Model.Money();
							Parse(result.UnitPrice as Hl7.Fhir.Model.Money, reader); // 140
							break;
						case "factor":
							result.FactorElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.FactorElement as Hl7.Fhir.Model.FhirDecimal, reader); // 150
							break;
						case "net":
							result.Net = new Hl7.Fhir.Model.Money();
							Parse(result.Net as Hl7.Fhir.Model.Money, reader); // 160
							break;
						case "bodySite":
							result.BodySite = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.BodySite as Hl7.Fhir.Model.CodeableConcept, reader); // 170
							break;
						case "subSite":
							var newItem_subSite = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_subSite, reader); // 180
							result.SubSite.Add(newItem_subSite);
							break;
						case "noteNumber":
							var newItem_noteNumber = new Hl7.Fhir.Model.PositiveInt();
							Parse(newItem_noteNumber, reader); // 190
							result.NoteNumberElement.Add(newItem_noteNumber);
							break;
						case "adjudication":
							var newItem_adjudication = new Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent();
							Parse(newItem_adjudication, reader); // 200
							result.Adjudication.Add(newItem_adjudication);
							break;
						case "detail":
							var newItem_detail = new Hl7.Fhir.Model.ClaimResponse.AddedItemDetailComponent();
							Parse(newItem_detail, reader); // 210
							result.Detail.Add(newItem_detail);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ClaimResponse.AddedItemDetailComponent
		public void Parse(Hl7.Fhir.Model.ClaimResponse.AddedItemDetailComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "productOrService":
							result.ProductOrService = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.ProductOrService as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "modifier":
							var newItem_modifier = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_modifier, reader); // 50
							result.Modifier.Add(newItem_modifier);
							break;
						case "quantity":
							result.Quantity = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Quantity as Hl7.Fhir.Model.SimpleQuantity, reader); // 60
							break;
						case "unitPrice":
							result.UnitPrice = new Hl7.Fhir.Model.Money();
							Parse(result.UnitPrice as Hl7.Fhir.Model.Money, reader); // 70
							break;
						case "factor":
							result.FactorElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.FactorElement as Hl7.Fhir.Model.FhirDecimal, reader); // 80
							break;
						case "net":
							result.Net = new Hl7.Fhir.Model.Money();
							Parse(result.Net as Hl7.Fhir.Model.Money, reader); // 90
							break;
						case "noteNumber":
							var newItem_noteNumber = new Hl7.Fhir.Model.PositiveInt();
							Parse(newItem_noteNumber, reader); // 100
							result.NoteNumberElement.Add(newItem_noteNumber);
							break;
						case "adjudication":
							var newItem_adjudication = new Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent();
							Parse(newItem_adjudication, reader); // 110
							result.Adjudication.Add(newItem_adjudication);
							break;
						case "subDetail":
							var newItem_subDetail = new Hl7.Fhir.Model.ClaimResponse.AddedItemSubDetailComponent();
							Parse(newItem_subDetail, reader); // 120
							result.SubDetail.Add(newItem_subDetail);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ClaimResponse.AddedItemSubDetailComponent
		public void Parse(Hl7.Fhir.Model.ClaimResponse.AddedItemSubDetailComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "productOrService":
							result.ProductOrService = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.ProductOrService as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "modifier":
							var newItem_modifier = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_modifier, reader); // 50
							result.Modifier.Add(newItem_modifier);
							break;
						case "quantity":
							result.Quantity = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Quantity as Hl7.Fhir.Model.SimpleQuantity, reader); // 60
							break;
						case "unitPrice":
							result.UnitPrice = new Hl7.Fhir.Model.Money();
							Parse(result.UnitPrice as Hl7.Fhir.Model.Money, reader); // 70
							break;
						case "factor":
							result.FactorElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.FactorElement as Hl7.Fhir.Model.FhirDecimal, reader); // 80
							break;
						case "net":
							result.Net = new Hl7.Fhir.Model.Money();
							Parse(result.Net as Hl7.Fhir.Model.Money, reader); // 90
							break;
						case "noteNumber":
							var newItem_noteNumber = new Hl7.Fhir.Model.PositiveInt();
							Parse(newItem_noteNumber, reader); // 100
							result.NoteNumberElement.Add(newItem_noteNumber);
							break;
						case "adjudication":
							var newItem_adjudication = new Hl7.Fhir.Model.ClaimResponse.AdjudicationComponent();
							Parse(newItem_adjudication, reader); // 110
							result.Adjudication.Add(newItem_adjudication);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ClaimResponse.TotalComponent
		public void Parse(Hl7.Fhir.Model.ClaimResponse.TotalComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "category":
							result.Category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Category as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "amount":
							result.Amount = new Hl7.Fhir.Model.Money();
							Parse(result.Amount as Hl7.Fhir.Model.Money, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ClaimResponse.PaymentComponent
		public void Parse(Hl7.Fhir.Model.ClaimResponse.PaymentComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "adjustment":
							result.Adjustment = new Hl7.Fhir.Model.Money();
							Parse(result.Adjustment as Hl7.Fhir.Model.Money, reader); // 50
							break;
						case "adjustmentReason":
							result.AdjustmentReason = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.AdjustmentReason as Hl7.Fhir.Model.CodeableConcept, reader); // 60
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.Date();
							Parse(result.DateElement as Hl7.Fhir.Model.Date, reader); // 70
							break;
						case "amount":
							result.Amount = new Hl7.Fhir.Model.Money();
							Parse(result.Amount as Hl7.Fhir.Model.Money, reader); // 80
							break;
						case "identifier":
							result.Identifier = new Hl7.Fhir.Model.Identifier();
							Parse(result.Identifier as Hl7.Fhir.Model.Identifier, reader); // 90
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ClaimResponse.NoteComponent
		public void Parse(Hl7.Fhir.Model.ClaimResponse.NoteComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "number":
							result.NumberElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.NumberElement as Hl7.Fhir.Model.PositiveInt, reader); // 40
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.NoteType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.NoteType>, reader); // 50
							break;
						case "text":
							result.TextElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TextElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "language":
							result.Language = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Language as Hl7.Fhir.Model.CodeableConcept, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ClaimResponse.InsuranceComponent
		public void Parse(Hl7.Fhir.Model.ClaimResponse.InsuranceComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "sequence":
							result.SequenceElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.SequenceElement as Hl7.Fhir.Model.PositiveInt, reader); // 40
							break;
						case "focal":
							result.FocalElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.FocalElement as Hl7.Fhir.Model.FhirBoolean, reader); // 50
							break;
						case "coverage":
							result.Coverage = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Coverage as Hl7.Fhir.Model.ResourceReference, reader); // 60
							break;
						case "businessArrangement":
							result.BusinessArrangementElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.BusinessArrangementElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						case "claimResponse":
							result.ClaimResponse = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.ClaimResponse as Hl7.Fhir.Model.ResourceReference, reader); // 80
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ClaimResponse.ErrorComponent
		public void Parse(Hl7.Fhir.Model.ClaimResponse.ErrorComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "itemSequence":
							result.ItemSequenceElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.ItemSequenceElement as Hl7.Fhir.Model.PositiveInt, reader); // 40
							break;
						case "detailSequence":
							result.DetailSequenceElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.DetailSequenceElement as Hl7.Fhir.Model.PositiveInt, reader); // 50
							break;
						case "subDetailSequence":
							result.SubDetailSequenceElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.SubDetailSequenceElement as Hl7.Fhir.Model.PositiveInt, reader); // 60
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ClinicalImpression.InvestigationComponent
		public void Parse(Hl7.Fhir.Model.ClinicalImpression.InvestigationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "item":
							var newItem_item = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_item, reader); // 50
							result.Item.Add(newItem_item);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ClinicalImpression.FindingComponent
		public void Parse(Hl7.Fhir.Model.ClinicalImpression.FindingComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "itemCodeableConcept":
							result.ItemCodeableConcept = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.ItemCodeableConcept as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "itemReference":
							result.ItemReference = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.ItemReference as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						case "basis":
							result.BasisElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.BasisElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CodeSystem.FilterComponent
		public void Parse(Hl7.Fhir.Model.CodeSystem.FilterComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.CodeElement = new Hl7.Fhir.Model.Code();
							Parse(result.CodeElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "operator":
							var newItem_operator = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FilterOperator>();
							Parse(newItem_operator, reader); // 60
							result.OperatorElement.Add(newItem_operator);
							break;
						case "value":
							result.ValueElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ValueElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CodeSystem.PropertyComponent
		public void Parse(Hl7.Fhir.Model.CodeSystem.PropertyComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.CodeElement = new Hl7.Fhir.Model.Code();
							Parse(result.CodeElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "uri":
							result.UriElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UriElement as Hl7.Fhir.Model.FhirUri, reader); // 50
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CodeSystem.PropertyType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CodeSystem.PropertyType>, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CodeSystem.ConceptDefinitionComponent
		public void Parse(Hl7.Fhir.Model.CodeSystem.ConceptDefinitionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.CodeElement = new Hl7.Fhir.Model.Code();
							Parse(result.CodeElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "display":
							result.DisplayElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DisplayElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "definition":
							result.DefinitionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DefinitionElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "designation":
							var newItem_designation = new Hl7.Fhir.Model.CodeSystem.DesignationComponent();
							Parse(newItem_designation, reader); // 70
							result.Designation.Add(newItem_designation);
							break;
						case "property":
							var newItem_property = new Hl7.Fhir.Model.CodeSystem.ConceptPropertyComponent();
							Parse(newItem_property, reader); // 80
							result.Property.Add(newItem_property);
							break;
						case "concept":
							var newItem_concept = new Hl7.Fhir.Model.CodeSystem.ConceptDefinitionComponent();
							Parse(newItem_concept, reader); // 90
							result.Concept.Add(newItem_concept);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CodeSystem.DesignationComponent
		public void Parse(Hl7.Fhir.Model.CodeSystem.DesignationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "use":
							result.Use = new Hl7.Fhir.Model.Coding();
							Parse(result.Use as Hl7.Fhir.Model.Coding, reader); // 50
							break;
						case "value":
							result.ValueElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ValueElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CodeSystem.ConceptPropertyComponent
		public void Parse(Hl7.Fhir.Model.CodeSystem.ConceptPropertyComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.CodeElement = new Hl7.Fhir.Model.Code();
							Parse(result.CodeElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "valueCode":
							result.Value = new Hl7.Fhir.Model.Code();
							Parse(result.Value as Hl7.Fhir.Model.Code, reader); // 50
							break;
						case "valueCoding":
							result.Value = new Hl7.Fhir.Model.Coding();
							Parse(result.Value as Hl7.Fhir.Model.Coding, reader); // 50
							break;
						case "valueString":
							result.Value = new Hl7.Fhir.Model.FhirString();
							Parse(result.Value as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "valueInteger":
							result.Value = new Hl7.Fhir.Model.Integer();
							Parse(result.Value as Hl7.Fhir.Model.Integer, reader); // 50
							break;
						case "valueBoolean":
							result.Value = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.Value as Hl7.Fhir.Model.FhirBoolean, reader); // 50
							break;
						case "valueDateTime":
							result.Value = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Value as Hl7.Fhir.Model.FhirDateTime, reader); // 50
							break;
						case "valueDecimal":
							result.Value = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.Value as Hl7.Fhir.Model.FhirDecimal, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Communication.PayloadComponent
		public void Parse(Hl7.Fhir.Model.Communication.PayloadComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "contentString":
							result.Content = new Hl7.Fhir.Model.FhirString();
							Parse(result.Content as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "contentAttachment":
							result.Content = new Hl7.Fhir.Model.Attachment();
							Parse(result.Content as Hl7.Fhir.Model.Attachment, reader); // 40
							break;
						case "contentReference":
							result.Content = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Content as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CommunicationRequest.PayloadComponent
		public void Parse(Hl7.Fhir.Model.CommunicationRequest.PayloadComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "contentString":
							result.Content = new Hl7.Fhir.Model.FhirString();
							Parse(result.Content as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "contentAttachment":
							result.Content = new Hl7.Fhir.Model.Attachment();
							Parse(result.Content as Hl7.Fhir.Model.Attachment, reader); // 40
							break;
						case "contentReference":
							result.Content = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Content as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CompartmentDefinition.ResourceComponent
		public void Parse(Hl7.Fhir.Model.CompartmentDefinition.ResourceComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.CodeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ResourceType>();
							Parse(result.CodeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ResourceType>, reader); // 40
							break;
						case "param":
							var newItem_param = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_param, reader); // 50
							result.ParamElement.Add(newItem_param);
							break;
						case "documentation":
							result.DocumentationElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DocumentationElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Composition.AttesterComponent
		public void Parse(Hl7.Fhir.Model.Composition.AttesterComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "mode":
							result.ModeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Composition.CompositionAttestationMode>();
							Parse(result.ModeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Composition.CompositionAttestationMode>, reader); // 40
							break;
						case "time":
							result.TimeElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.TimeElement as Hl7.Fhir.Model.FhirDateTime, reader); // 50
							break;
						case "party":
							result.Party = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Party as Hl7.Fhir.Model.ResourceReference, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Composition.RelatesToComponent
		public void Parse(Hl7.Fhir.Model.Composition.RelatesToComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.CodeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DocumentRelationshipType>();
							Parse(result.CodeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DocumentRelationshipType>, reader); // 40
							break;
						case "targetIdentifier":
							result.Target = new Hl7.Fhir.Model.Identifier();
							Parse(result.Target as Hl7.Fhir.Model.Identifier, reader); // 50
							break;
						case "targetReference":
							result.Target = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Target as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Composition.EventComponent
		public void Parse(Hl7.Fhir.Model.Composition.EventComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							var newItem_code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_code, reader); // 40
							result.Code.Add(newItem_code);
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 50
							break;
						case "detail":
							var newItem_detail = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_detail, reader); // 60
							result.Detail.Add(newItem_detail);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Composition.SectionComponent
		public void Parse(Hl7.Fhir.Model.Composition.SectionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "author":
							var newItem_author = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_author, reader); // 60
							result.Author.Add(newItem_author);
							break;
						case "focus":
							result.Focus = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Focus as Hl7.Fhir.Model.ResourceReference, reader); // 70
							break;
						case "text":
							result.Text = new Hl7.Fhir.Model.Narrative();
							Parse(result.Text as Hl7.Fhir.Model.Narrative, reader); // 80
							break;
						case "mode":
							result.ModeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ListMode>();
							Parse(result.ModeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ListMode>, reader); // 90
							break;
						case "orderedBy":
							result.OrderedBy = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.OrderedBy as Hl7.Fhir.Model.CodeableConcept, reader); // 100
							break;
						case "entry":
							var newItem_entry = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_entry, reader); // 110
							result.Entry.Add(newItem_entry);
							break;
						case "emptyReason":
							result.EmptyReason = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.EmptyReason as Hl7.Fhir.Model.CodeableConcept, reader); // 120
							break;
						case "section":
							var newItem_section = new Hl7.Fhir.Model.Composition.SectionComponent();
							Parse(newItem_section, reader); // 130
							result.Section.Add(newItem_section);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ConceptMap.GroupComponent
		public void Parse(Hl7.Fhir.Model.ConceptMap.GroupComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "source":
							result.SourceElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.SourceElement as Hl7.Fhir.Model.FhirUri, reader); // 40
							break;
						case "sourceVersion":
							result.SourceVersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.SourceVersionElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "target":
							result.TargetElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.TargetElement as Hl7.Fhir.Model.FhirUri, reader); // 60
							break;
						case "targetVersion":
							result.TargetVersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TargetVersionElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						case "element":
							var newItem_element = new Hl7.Fhir.Model.ConceptMap.SourceElementComponent();
							Parse(newItem_element, reader); // 80
							result.Element.Add(newItem_element);
							break;
						case "unmapped":
							result.Unmapped = new Hl7.Fhir.Model.ConceptMap.UnmappedComponent();
							Parse(result.Unmapped as Hl7.Fhir.Model.ConceptMap.UnmappedComponent, reader); // 90
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ConceptMap.SourceElementComponent
		public void Parse(Hl7.Fhir.Model.ConceptMap.SourceElementComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.CodeElement = new Hl7.Fhir.Model.Code();
							Parse(result.CodeElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "display":
							result.DisplayElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DisplayElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "target":
							var newItem_target = new Hl7.Fhir.Model.ConceptMap.TargetElementComponent();
							Parse(newItem_target, reader); // 60
							result.Target.Add(newItem_target);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ConceptMap.TargetElementComponent
		public void Parse(Hl7.Fhir.Model.ConceptMap.TargetElementComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.CodeElement = new Hl7.Fhir.Model.Code();
							Parse(result.CodeElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "display":
							result.DisplayElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DisplayElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "equivalence":
							result.EquivalenceElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ConceptMap.ConceptMapEquivalence>();
							Parse(result.EquivalenceElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ConceptMap.ConceptMapEquivalence>, reader); // 60
							break;
						case "comment":
							result.CommentElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.CommentElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						case "dependsOn":
							var newItem_dependsOn = new Hl7.Fhir.Model.ConceptMap.OtherElementComponent();
							Parse(newItem_dependsOn, reader); // 80
							result.DependsOn.Add(newItem_dependsOn);
							break;
						case "product":
							var newItem_product = new Hl7.Fhir.Model.ConceptMap.OtherElementComponent();
							Parse(newItem_product, reader); // 90
							result.Product.Add(newItem_product);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ConceptMap.OtherElementComponent
		public void Parse(Hl7.Fhir.Model.ConceptMap.OtherElementComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "property":
							result.PropertyElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.PropertyElement as Hl7.Fhir.Model.FhirUri, reader); // 40
							break;
						case "system":
							result.SystemElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.SystemElement as Hl7.Fhir.Model.Canonical, reader); // 50
							break;
						case "value":
							result.ValueElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ValueElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "display":
							result.DisplayElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DisplayElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ConceptMap.UnmappedComponent
		public void Parse(Hl7.Fhir.Model.ConceptMap.UnmappedComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "mode":
							result.ModeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ConceptMap.ConceptMapGroupUnmappedMode>();
							Parse(result.ModeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ConceptMap.ConceptMapGroupUnmappedMode>, reader); // 40
							break;
						case "code":
							result.CodeElement = new Hl7.Fhir.Model.Code();
							Parse(result.CodeElement as Hl7.Fhir.Model.Code, reader); // 50
							break;
						case "display":
							result.DisplayElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DisplayElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.UrlElement as Hl7.Fhir.Model.Canonical, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Condition.StageComponent
		public void Parse(Hl7.Fhir.Model.Condition.StageComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "summary":
							result.Summary = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Summary as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "assessment":
							var newItem_assessment = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_assessment, reader); // 50
							result.Assessment.Add(newItem_assessment);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Condition.EvidenceComponent
		public void Parse(Hl7.Fhir.Model.Condition.EvidenceComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							var newItem_code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_code, reader); // 40
							result.Code.Add(newItem_code);
							break;
						case "detail":
							var newItem_detail = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_detail, reader); // 50
							result.Detail.Add(newItem_detail);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Consent.PolicyComponent
		public void Parse(Hl7.Fhir.Model.Consent.PolicyComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "authority":
							result.AuthorityElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.AuthorityElement as Hl7.Fhir.Model.FhirUri, reader); // 40
							break;
						case "uri":
							result.UriElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UriElement as Hl7.Fhir.Model.FhirUri, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Consent.VerificationComponent
		public void Parse(Hl7.Fhir.Model.Consent.VerificationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "verified":
							result.VerifiedElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.VerifiedElement as Hl7.Fhir.Model.FhirBoolean, reader); // 40
							break;
						case "verifiedWith":
							result.VerifiedWith = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.VerifiedWith as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						case "verificationDate":
							result.VerificationDateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.VerificationDateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Consent.provisionComponent
		public void Parse(Hl7.Fhir.Model.Consent.provisionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Consent.ConsentProvisionType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Consent.ConsentProvisionType>, reader); // 40
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 50
							break;
						case "actor":
							var newItem_actor = new Hl7.Fhir.Model.Consent.provisionActorComponent();
							Parse(newItem_actor, reader); // 60
							result.Actor.Add(newItem_actor);
							break;
						case "action":
							var newItem_action = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_action, reader); // 70
							result.Action.Add(newItem_action);
							break;
						case "securityLabel":
							var newItem_securityLabel = new Hl7.Fhir.Model.Coding();
							Parse(newItem_securityLabel, reader); // 80
							result.SecurityLabel.Add(newItem_securityLabel);
							break;
						case "purpose":
							var newItem_purpose = new Hl7.Fhir.Model.Coding();
							Parse(newItem_purpose, reader); // 90
							result.Purpose.Add(newItem_purpose);
							break;
						case "class":
							var newItem_class = new Hl7.Fhir.Model.Coding();
							Parse(newItem_class, reader); // 100
							result.Class.Add(newItem_class);
							break;
						case "code":
							var newItem_code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_code, reader); // 110
							result.Code.Add(newItem_code);
							break;
						case "dataPeriod":
							result.DataPeriod = new Hl7.Fhir.Model.Period();
							Parse(result.DataPeriod as Hl7.Fhir.Model.Period, reader); // 120
							break;
						case "data":
							var newItem_data = new Hl7.Fhir.Model.Consent.provisionDataComponent();
							Parse(newItem_data, reader); // 130
							result.Data.Add(newItem_data);
							break;
						case "provision":
							var newItem_provision = new Hl7.Fhir.Model.Consent.provisionComponent();
							Parse(newItem_provision, reader); // 140
							result.Provision.Add(newItem_provision);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Consent.provisionActorComponent
		public void Parse(Hl7.Fhir.Model.Consent.provisionActorComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "role":
							result.Role = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Role as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "reference":
							result.Reference = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Reference as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Consent.provisionDataComponent
		public void Parse(Hl7.Fhir.Model.Consent.provisionDataComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "meaning":
							result.MeaningElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Consent.ConsentDataMeaning>();
							Parse(result.MeaningElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Consent.ConsentDataMeaning>, reader); // 40
							break;
						case "reference":
							result.Reference = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Reference as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Contract.ContentDefinitionComponent
		public void Parse(Hl7.Fhir.Model.Contract.ContentDefinitionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "subType":
							result.SubType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.SubType as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "publisher":
							result.Publisher = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Publisher as Hl7.Fhir.Model.ResourceReference, reader); // 60
							break;
						case "publicationDate":
							result.PublicationDateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.PublicationDateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 70
							break;
						case "publicationStatus":
							result.PublicationStatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Contract.ContractResourcePublicationStatusCodes>();
							Parse(result.PublicationStatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Contract.ContractResourcePublicationStatusCodes>, reader); // 80
							break;
						case "copyright":
							result.Copyright = new Hl7.Fhir.Model.Markdown();
							Parse(result.Copyright as Hl7.Fhir.Model.Markdown, reader); // 90
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Contract.TermComponent
		public void Parse(Hl7.Fhir.Model.Contract.TermComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							result.Identifier = new Hl7.Fhir.Model.Identifier();
							Parse(result.Identifier as Hl7.Fhir.Model.Identifier, reader); // 40
							break;
						case "issued":
							result.IssuedElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.IssuedElement as Hl7.Fhir.Model.FhirDateTime, reader); // 50
							break;
						case "applies":
							result.Applies = new Hl7.Fhir.Model.Period();
							Parse(result.Applies as Hl7.Fhir.Model.Period, reader); // 60
							break;
						case "topicCodeableConcept":
							result.Topic = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Topic as Hl7.Fhir.Model.CodeableConcept, reader); // 70
							break;
						case "topicReference":
							result.Topic = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Topic as Hl7.Fhir.Model.ResourceReference, reader); // 70
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 80
							break;
						case "subType":
							result.SubType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.SubType as Hl7.Fhir.Model.CodeableConcept, reader); // 90
							break;
						case "text":
							result.TextElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TextElement as Hl7.Fhir.Model.FhirString, reader); // 100
							break;
						case "securityLabel":
							var newItem_securityLabel = new Hl7.Fhir.Model.Contract.SecurityLabelComponent();
							Parse(newItem_securityLabel, reader); // 110
							result.SecurityLabel.Add(newItem_securityLabel);
							break;
						case "offer":
							result.Offer = new Hl7.Fhir.Model.Contract.ContractOfferComponent();
							Parse(result.Offer as Hl7.Fhir.Model.Contract.ContractOfferComponent, reader); // 120
							break;
						case "asset":
							var newItem_asset = new Hl7.Fhir.Model.Contract.ContractAssetComponent();
							Parse(newItem_asset, reader); // 130
							result.Asset.Add(newItem_asset);
							break;
						case "action":
							var newItem_action = new Hl7.Fhir.Model.Contract.ActionComponent();
							Parse(newItem_action, reader); // 140
							result.Action.Add(newItem_action);
							break;
						case "group":
							var newItem_group = new Hl7.Fhir.Model.Contract.TermComponent();
							Parse(newItem_group, reader); // 150
							result.Group.Add(newItem_group);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Contract.SecurityLabelComponent
		public void Parse(Hl7.Fhir.Model.Contract.SecurityLabelComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "number":
							var newItem_number = new Hl7.Fhir.Model.UnsignedInt();
							Parse(newItem_number, reader); // 40
							result.NumberElement.Add(newItem_number);
							break;
						case "classification":
							result.Classification = new Hl7.Fhir.Model.Coding();
							Parse(result.Classification as Hl7.Fhir.Model.Coding, reader); // 50
							break;
						case "category":
							var newItem_category = new Hl7.Fhir.Model.Coding();
							Parse(newItem_category, reader); // 60
							result.Category.Add(newItem_category);
							break;
						case "control":
							var newItem_control = new Hl7.Fhir.Model.Coding();
							Parse(newItem_control, reader); // 70
							result.Control.Add(newItem_control);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Contract.ContractOfferComponent
		public void Parse(Hl7.Fhir.Model.Contract.ContractOfferComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 40
							result.Identifier.Add(newItem_identifier);
							break;
						case "party":
							var newItem_party = new Hl7.Fhir.Model.Contract.ContractPartyComponent();
							Parse(newItem_party, reader); // 50
							result.Party.Add(newItem_party);
							break;
						case "topic":
							result.Topic = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Topic as Hl7.Fhir.Model.ResourceReference, reader); // 60
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 70
							break;
						case "decision":
							result.Decision = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Decision as Hl7.Fhir.Model.CodeableConcept, reader); // 80
							break;
						case "decisionMode":
							var newItem_decisionMode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_decisionMode, reader); // 90
							result.DecisionMode.Add(newItem_decisionMode);
							break;
						case "answer":
							var newItem_answer = new Hl7.Fhir.Model.Contract.AnswerComponent();
							Parse(newItem_answer, reader); // 100
							result.Answer.Add(newItem_answer);
							break;
						case "text":
							result.TextElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TextElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "linkId":
							var newItem_linkId = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_linkId, reader); // 120
							result.LinkIdElement.Add(newItem_linkId);
							break;
						case "securityLabelNumber":
							var newItem_securityLabelNumber = new Hl7.Fhir.Model.UnsignedInt();
							Parse(newItem_securityLabelNumber, reader); // 130
							result.SecurityLabelNumberElement.Add(newItem_securityLabelNumber);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Contract.ContractPartyComponent
		public void Parse(Hl7.Fhir.Model.Contract.ContractPartyComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "reference":
							var newItem_reference = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_reference, reader); // 40
							result.Reference.Add(newItem_reference);
							break;
						case "role":
							result.Role = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Role as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Contract.AnswerComponent
		public void Parse(Hl7.Fhir.Model.Contract.AnswerComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "valueBoolean":
							result.Value = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.Value as Hl7.Fhir.Model.FhirBoolean, reader); // 40
							break;
						case "valueDecimal":
							result.Value = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.Value as Hl7.Fhir.Model.FhirDecimal, reader); // 40
							break;
						case "valueInteger":
							result.Value = new Hl7.Fhir.Model.Integer();
							Parse(result.Value as Hl7.Fhir.Model.Integer, reader); // 40
							break;
						case "valueDate":
							result.Value = new Hl7.Fhir.Model.Date();
							Parse(result.Value as Hl7.Fhir.Model.Date, reader); // 40
							break;
						case "valueDateTime":
							result.Value = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Value as Hl7.Fhir.Model.FhirDateTime, reader); // 40
							break;
						case "valueTime":
							result.Value = new Hl7.Fhir.Model.Time();
							Parse(result.Value as Hl7.Fhir.Model.Time, reader); // 40
							break;
						case "valueString":
							result.Value = new Hl7.Fhir.Model.FhirString();
							Parse(result.Value as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "valueUri":
							result.Value = new Hl7.Fhir.Model.FhirUri();
							Parse(result.Value as Hl7.Fhir.Model.FhirUri, reader); // 40
							break;
						case "valueAttachment":
							result.Value = new Hl7.Fhir.Model.Attachment();
							Parse(result.Value as Hl7.Fhir.Model.Attachment, reader); // 40
							break;
						case "valueCoding":
							result.Value = new Hl7.Fhir.Model.Coding();
							Parse(result.Value as Hl7.Fhir.Model.Coding, reader); // 40
							break;
						case "valueQuantity":
							result.Value = new Hl7.Fhir.Model.Quantity();
							Parse(result.Value as Hl7.Fhir.Model.Quantity, reader); // 40
							break;
						case "valueReference":
							result.Value = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Value as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Contract.ContractAssetComponent
		public void Parse(Hl7.Fhir.Model.Contract.ContractAssetComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "scope":
							result.Scope = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Scope as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "type":
							var newItem_type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_type, reader); // 50
							result.Type.Add(newItem_type);
							break;
						case "typeReference":
							var newItem_typeReference = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_typeReference, reader); // 60
							result.TypeReference.Add(newItem_typeReference);
							break;
						case "subtype":
							var newItem_subtype = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_subtype, reader); // 70
							result.Subtype.Add(newItem_subtype);
							break;
						case "relationship":
							result.Relationship = new Hl7.Fhir.Model.Coding();
							Parse(result.Relationship as Hl7.Fhir.Model.Coding, reader); // 80
							break;
						case "context":
							var newItem_context = new Hl7.Fhir.Model.Contract.AssetContextComponent();
							Parse(newItem_context, reader); // 90
							result.Context.Add(newItem_context);
							break;
						case "condition":
							result.ConditionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ConditionElement as Hl7.Fhir.Model.FhirString, reader); // 100
							break;
						case "periodType":
							var newItem_periodType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_periodType, reader); // 110
							result.PeriodType.Add(newItem_periodType);
							break;
						case "period":
							var newItem_period = new Hl7.Fhir.Model.Period();
							Parse(newItem_period, reader); // 120
							result.Period.Add(newItem_period);
							break;
						case "usePeriod":
							var newItem_usePeriod = new Hl7.Fhir.Model.Period();
							Parse(newItem_usePeriod, reader); // 130
							result.UsePeriod.Add(newItem_usePeriod);
							break;
						case "text":
							result.TextElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TextElement as Hl7.Fhir.Model.FhirString, reader); // 140
							break;
						case "linkId":
							var newItem_linkId = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_linkId, reader); // 150
							result.LinkIdElement.Add(newItem_linkId);
							break;
						case "answer":
							var newItem_answer = new Hl7.Fhir.Model.Contract.AnswerComponent();
							Parse(newItem_answer, reader); // 160
							result.Answer.Add(newItem_answer);
							break;
						case "securityLabelNumber":
							var newItem_securityLabelNumber = new Hl7.Fhir.Model.UnsignedInt();
							Parse(newItem_securityLabelNumber, reader); // 170
							result.SecurityLabelNumberElement.Add(newItem_securityLabelNumber);
							break;
						case "valuedItem":
							var newItem_valuedItem = new Hl7.Fhir.Model.Contract.ValuedItemComponent();
							Parse(newItem_valuedItem, reader); // 180
							result.ValuedItem.Add(newItem_valuedItem);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Contract.AssetContextComponent
		public void Parse(Hl7.Fhir.Model.Contract.AssetContextComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "reference":
							result.Reference = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Reference as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						case "code":
							var newItem_code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_code, reader); // 50
							result.Code.Add(newItem_code);
							break;
						case "text":
							result.TextElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TextElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Contract.ValuedItemComponent
		public void Parse(Hl7.Fhir.Model.Contract.ValuedItemComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "entityCodeableConcept":
							result.Entity = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Entity as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "entityReference":
							result.Entity = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Entity as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						case "identifier":
							result.Identifier = new Hl7.Fhir.Model.Identifier();
							Parse(result.Identifier as Hl7.Fhir.Model.Identifier, reader); // 50
							break;
						case "effectiveTime":
							result.EffectiveTimeElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.EffectiveTimeElement as Hl7.Fhir.Model.FhirDateTime, reader); // 60
							break;
						case "quantity":
							result.Quantity = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Quantity as Hl7.Fhir.Model.SimpleQuantity, reader); // 70
							break;
						case "unitPrice":
							result.UnitPrice = new Hl7.Fhir.Model.Money();
							Parse(result.UnitPrice as Hl7.Fhir.Model.Money, reader); // 80
							break;
						case "factor":
							result.FactorElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.FactorElement as Hl7.Fhir.Model.FhirDecimal, reader); // 90
							break;
						case "points":
							result.PointsElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.PointsElement as Hl7.Fhir.Model.FhirDecimal, reader); // 100
							break;
						case "net":
							result.Net = new Hl7.Fhir.Model.Money();
							Parse(result.Net as Hl7.Fhir.Model.Money, reader); // 110
							break;
						case "payment":
							result.PaymentElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PaymentElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "paymentDate":
							result.PaymentDateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.PaymentDateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 130
							break;
						case "responsible":
							result.Responsible = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Responsible as Hl7.Fhir.Model.ResourceReference, reader); // 140
							break;
						case "recipient":
							result.Recipient = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Recipient as Hl7.Fhir.Model.ResourceReference, reader); // 150
							break;
						case "linkId":
							var newItem_linkId = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_linkId, reader); // 160
							result.LinkIdElement.Add(newItem_linkId);
							break;
						case "securityLabelNumber":
							var newItem_securityLabelNumber = new Hl7.Fhir.Model.UnsignedInt();
							Parse(newItem_securityLabelNumber, reader); // 170
							result.SecurityLabelNumberElement.Add(newItem_securityLabelNumber);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Contract.ActionComponent
		public void Parse(Hl7.Fhir.Model.Contract.ActionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "doNotPerform":
							result.DoNotPerformElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.DoNotPerformElement as Hl7.Fhir.Model.FhirBoolean, reader); // 40
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "subject":
							var newItem_subject = new Hl7.Fhir.Model.Contract.ActionSubjectComponent();
							Parse(newItem_subject, reader); // 60
							result.Subject.Add(newItem_subject);
							break;
						case "intent":
							result.Intent = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Intent as Hl7.Fhir.Model.CodeableConcept, reader); // 70
							break;
						case "linkId":
							var newItem_linkId = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_linkId, reader); // 80
							result.LinkIdElement.Add(newItem_linkId);
							break;
						case "status":
							result.Status = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Status as Hl7.Fhir.Model.CodeableConcept, reader); // 90
							break;
						case "context":
							result.Context = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Context as Hl7.Fhir.Model.ResourceReference, reader); // 100
							break;
						case "contextLinkId":
							var newItem_contextLinkId = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_contextLinkId, reader); // 110
							result.ContextLinkIdElement.Add(newItem_contextLinkId);
							break;
						case "occurrenceDateTime":
							result.Occurrence = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Occurrence as Hl7.Fhir.Model.FhirDateTime, reader); // 120
							break;
						case "occurrencePeriod":
							result.Occurrence = new Hl7.Fhir.Model.Period();
							Parse(result.Occurrence as Hl7.Fhir.Model.Period, reader); // 120
							break;
						case "occurrenceTiming":
							result.Occurrence = new Hl7.Fhir.Model.Timing();
							Parse(result.Occurrence as Hl7.Fhir.Model.Timing, reader); // 120
							break;
						case "requester":
							var newItem_requester = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_requester, reader); // 130
							result.Requester.Add(newItem_requester);
							break;
						case "requesterLinkId":
							var newItem_requesterLinkId = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_requesterLinkId, reader); // 140
							result.RequesterLinkIdElement.Add(newItem_requesterLinkId);
							break;
						case "performerType":
							var newItem_performerType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_performerType, reader); // 150
							result.PerformerType.Add(newItem_performerType);
							break;
						case "performerRole":
							result.PerformerRole = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.PerformerRole as Hl7.Fhir.Model.CodeableConcept, reader); // 160
							break;
						case "performer":
							result.Performer = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Performer as Hl7.Fhir.Model.ResourceReference, reader); // 170
							break;
						case "performerLinkId":
							var newItem_performerLinkId = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_performerLinkId, reader); // 180
							result.PerformerLinkIdElement.Add(newItem_performerLinkId);
							break;
						case "reasonCode":
							var newItem_reasonCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_reasonCode, reader); // 190
							result.ReasonCode.Add(newItem_reasonCode);
							break;
						case "reasonReference":
							var newItem_reasonReference = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_reasonReference, reader); // 200
							result.ReasonReference.Add(newItem_reasonReference);
							break;
						case "reason":
							var newItem_reason = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_reason, reader); // 210
							result.ReasonElement.Add(newItem_reason);
							break;
						case "reasonLinkId":
							var newItem_reasonLinkId = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_reasonLinkId, reader); // 220
							result.ReasonLinkIdElement.Add(newItem_reasonLinkId);
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 230
							result.Note.Add(newItem_note);
							break;
						case "securityLabelNumber":
							var newItem_securityLabelNumber = new Hl7.Fhir.Model.UnsignedInt();
							Parse(newItem_securityLabelNumber, reader); // 240
							result.SecurityLabelNumberElement.Add(newItem_securityLabelNumber);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Contract.ActionSubjectComponent
		public void Parse(Hl7.Fhir.Model.Contract.ActionSubjectComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "reference":
							var newItem_reference = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_reference, reader); // 40
							result.Reference.Add(newItem_reference);
							break;
						case "role":
							result.Role = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Role as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Contract.SignatoryComponent
		public void Parse(Hl7.Fhir.Model.Contract.SignatoryComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.Coding();
							Parse(result.Type as Hl7.Fhir.Model.Coding, reader); // 40
							break;
						case "party":
							result.Party = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Party as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						case "signature":
							var newItem_signature = new Hl7.Fhir.Model.Signature();
							Parse(newItem_signature, reader); // 60
							result.Signature.Add(newItem_signature);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Contract.FriendlyLanguageComponent
		public void Parse(Hl7.Fhir.Model.Contract.FriendlyLanguageComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "contentAttachment":
							result.Content = new Hl7.Fhir.Model.Attachment();
							Parse(result.Content as Hl7.Fhir.Model.Attachment, reader); // 40
							break;
						case "contentReference":
							result.Content = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Content as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Contract.LegalLanguageComponent
		public void Parse(Hl7.Fhir.Model.Contract.LegalLanguageComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "contentAttachment":
							result.Content = new Hl7.Fhir.Model.Attachment();
							Parse(result.Content as Hl7.Fhir.Model.Attachment, reader); // 40
							break;
						case "contentReference":
							result.Content = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Content as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Contract.ComputableLanguageComponent
		public void Parse(Hl7.Fhir.Model.Contract.ComputableLanguageComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "contentAttachment":
							result.Content = new Hl7.Fhir.Model.Attachment();
							Parse(result.Content as Hl7.Fhir.Model.Attachment, reader); // 40
							break;
						case "contentReference":
							result.Content = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Content as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Coverage.ClassComponent
		public void Parse(Hl7.Fhir.Model.Coverage.ClassComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "value":
							result.ValueElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ValueElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Coverage.CostToBeneficiaryComponent
		public void Parse(Hl7.Fhir.Model.Coverage.CostToBeneficiaryComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "valueQuantity":
							result.Value = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Value as Hl7.Fhir.Model.SimpleQuantity, reader); // 50
							break;
						case "valueMoney":
							result.Value = new Hl7.Fhir.Model.Money();
							Parse(result.Value as Hl7.Fhir.Model.Money, reader); // 50
							break;
						case "exception":
							var newItem_exception = new Hl7.Fhir.Model.Coverage.ExemptionComponent();
							Parse(newItem_exception, reader); // 60
							result.Exception.Add(newItem_exception);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Coverage.ExemptionComponent
		public void Parse(Hl7.Fhir.Model.Coverage.ExemptionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CoverageEligibilityRequest.SupportingInformationComponent
		public void Parse(Hl7.Fhir.Model.CoverageEligibilityRequest.SupportingInformationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "sequence":
							result.SequenceElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.SequenceElement as Hl7.Fhir.Model.PositiveInt, reader); // 40
							break;
						case "information":
							result.Information = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Information as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						case "appliesToAll":
							result.AppliesToAllElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.AppliesToAllElement as Hl7.Fhir.Model.FhirBoolean, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CoverageEligibilityRequest.InsuranceComponent
		public void Parse(Hl7.Fhir.Model.CoverageEligibilityRequest.InsuranceComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "focal":
							result.FocalElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.FocalElement as Hl7.Fhir.Model.FhirBoolean, reader); // 40
							break;
						case "coverage":
							result.Coverage = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Coverage as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						case "businessArrangement":
							result.BusinessArrangementElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.BusinessArrangementElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CoverageEligibilityRequest.DetailsComponent
		public void Parse(Hl7.Fhir.Model.CoverageEligibilityRequest.DetailsComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "supportingInfoSequence":
							var newItem_supportingInfoSequence = new Hl7.Fhir.Model.PositiveInt();
							Parse(newItem_supportingInfoSequence, reader); // 40
							result.SupportingInfoSequenceElement.Add(newItem_supportingInfoSequence);
							break;
						case "category":
							result.Category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Category as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "productOrService":
							result.ProductOrService = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.ProductOrService as Hl7.Fhir.Model.CodeableConcept, reader); // 60
							break;
						case "modifier":
							var newItem_modifier = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_modifier, reader); // 70
							result.Modifier.Add(newItem_modifier);
							break;
						case "provider":
							result.Provider = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Provider as Hl7.Fhir.Model.ResourceReference, reader); // 80
							break;
						case "quantity":
							result.Quantity = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Quantity as Hl7.Fhir.Model.SimpleQuantity, reader); // 90
							break;
						case "unitPrice":
							result.UnitPrice = new Hl7.Fhir.Model.Money();
							Parse(result.UnitPrice as Hl7.Fhir.Model.Money, reader); // 100
							break;
						case "facility":
							result.Facility = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Facility as Hl7.Fhir.Model.ResourceReference, reader); // 110
							break;
						case "diagnosis":
							var newItem_diagnosis = new Hl7.Fhir.Model.CoverageEligibilityRequest.DiagnosisComponent();
							Parse(newItem_diagnosis, reader); // 120
							result.Diagnosis.Add(newItem_diagnosis);
							break;
						case "detail":
							var newItem_detail = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_detail, reader); // 130
							result.Detail.Add(newItem_detail);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CoverageEligibilityRequest.DiagnosisComponent
		public void Parse(Hl7.Fhir.Model.CoverageEligibilityRequest.DiagnosisComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "diagnosisCodeableConcept":
							result.Diagnosis = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Diagnosis as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "diagnosisReference":
							result.Diagnosis = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Diagnosis as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CoverageEligibilityResponse.InsuranceComponent
		public void Parse(Hl7.Fhir.Model.CoverageEligibilityResponse.InsuranceComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "coverage":
							result.Coverage = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Coverage as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						case "inforce":
							result.InforceElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.InforceElement as Hl7.Fhir.Model.FhirBoolean, reader); // 50
							break;
						case "benefitPeriod":
							result.BenefitPeriod = new Hl7.Fhir.Model.Period();
							Parse(result.BenefitPeriod as Hl7.Fhir.Model.Period, reader); // 60
							break;
						case "item":
							var newItem_item = new Hl7.Fhir.Model.CoverageEligibilityResponse.ItemsComponent();
							Parse(newItem_item, reader); // 70
							result.Item.Add(newItem_item);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CoverageEligibilityResponse.ItemsComponent
		public void Parse(Hl7.Fhir.Model.CoverageEligibilityResponse.ItemsComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "category":
							result.Category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Category as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "productOrService":
							result.ProductOrService = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.ProductOrService as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "modifier":
							var newItem_modifier = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_modifier, reader); // 60
							result.Modifier.Add(newItem_modifier);
							break;
						case "provider":
							result.Provider = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Provider as Hl7.Fhir.Model.ResourceReference, reader); // 70
							break;
						case "excluded":
							result.ExcludedElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ExcludedElement as Hl7.Fhir.Model.FhirBoolean, reader); // 80
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 90
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 100
							break;
						case "network":
							result.Network = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Network as Hl7.Fhir.Model.CodeableConcept, reader); // 110
							break;
						case "unit":
							result.Unit = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Unit as Hl7.Fhir.Model.CodeableConcept, reader); // 120
							break;
						case "term":
							result.Term = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Term as Hl7.Fhir.Model.CodeableConcept, reader); // 130
							break;
						case "benefit":
							var newItem_benefit = new Hl7.Fhir.Model.CoverageEligibilityResponse.BenefitComponent();
							Parse(newItem_benefit, reader); // 140
							result.Benefit.Add(newItem_benefit);
							break;
						case "authorizationRequired":
							result.AuthorizationRequiredElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.AuthorizationRequiredElement as Hl7.Fhir.Model.FhirBoolean, reader); // 150
							break;
						case "authorizationSupporting":
							var newItem_authorizationSupporting = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_authorizationSupporting, reader); // 160
							result.AuthorizationSupporting.Add(newItem_authorizationSupporting);
							break;
						case "authorizationUrl":
							result.AuthorizationUrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.AuthorizationUrlElement as Hl7.Fhir.Model.FhirUri, reader); // 170
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CoverageEligibilityResponse.BenefitComponent
		public void Parse(Hl7.Fhir.Model.CoverageEligibilityResponse.BenefitComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "allowedUnsignedInt":
							result.Allowed = new Hl7.Fhir.Model.UnsignedInt();
							Parse(result.Allowed as Hl7.Fhir.Model.UnsignedInt, reader); // 50
							break;
						case "allowedString":
							result.Allowed = new Hl7.Fhir.Model.FhirString();
							Parse(result.Allowed as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "allowedMoney":
							result.Allowed = new Hl7.Fhir.Model.Money();
							Parse(result.Allowed as Hl7.Fhir.Model.Money, reader); // 50
							break;
						case "usedUnsignedInt":
							result.Used = new Hl7.Fhir.Model.UnsignedInt();
							Parse(result.Used as Hl7.Fhir.Model.UnsignedInt, reader); // 60
							break;
						case "usedString":
							result.Used = new Hl7.Fhir.Model.FhirString();
							Parse(result.Used as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "usedMoney":
							result.Used = new Hl7.Fhir.Model.Money();
							Parse(result.Used as Hl7.Fhir.Model.Money, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CoverageEligibilityResponse.ErrorsComponent
		public void Parse(Hl7.Fhir.Model.CoverageEligibilityResponse.ErrorsComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.DetectedIssue.EvidenceComponent
		public void Parse(Hl7.Fhir.Model.DetectedIssue.EvidenceComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							var newItem_code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_code, reader); // 40
							result.Code.Add(newItem_code);
							break;
						case "detail":
							var newItem_detail = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_detail, reader); // 50
							result.Detail.Add(newItem_detail);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.DetectedIssue.MitigationComponent
		public void Parse(Hl7.Fhir.Model.DetectedIssue.MitigationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "action":
							result.Action = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Action as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 50
							break;
						case "author":
							result.Author = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Author as Hl7.Fhir.Model.ResourceReference, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Device.UdiCarrierComponent
		public void Parse(Hl7.Fhir.Model.Device.UdiCarrierComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "deviceIdentifier":
							result.DeviceIdentifierElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DeviceIdentifierElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "issuer":
							result.IssuerElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.IssuerElement as Hl7.Fhir.Model.FhirUri, reader); // 50
							break;
						case "jurisdiction":
							result.JurisdictionElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.JurisdictionElement as Hl7.Fhir.Model.FhirUri, reader); // 60
							break;
						case "carrierAIDC":
							result.CarrierAIDCElement = new Hl7.Fhir.Model.Base64Binary();
							Parse(result.CarrierAIDCElement as Hl7.Fhir.Model.Base64Binary, reader); // 70
							break;
						case "carrierHRF":
							result.CarrierHRFElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.CarrierHRFElement as Hl7.Fhir.Model.FhirString, reader); // 80
							break;
						case "entryType":
							result.EntryTypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Device.UDIEntryType>();
							Parse(result.EntryTypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Device.UDIEntryType>, reader); // 90
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Device.DeviceNameComponent
		public void Parse(Hl7.Fhir.Model.Device.DeviceNameComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DeviceNameType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DeviceNameType>, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Device.SpecializationComponent
		public void Parse(Hl7.Fhir.Model.Device.SpecializationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "systemType":
							result.SystemType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.SystemType as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Device.VersionComponent
		public void Parse(Hl7.Fhir.Model.Device.VersionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "component":
							result.Component = new Hl7.Fhir.Model.Identifier();
							Parse(result.Component as Hl7.Fhir.Model.Identifier, reader); // 50
							break;
						case "value":
							result.ValueElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ValueElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Device.PropertyComponent
		public void Parse(Hl7.Fhir.Model.Device.PropertyComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "valueQuantity":
							var newItem_valueQuantity = new Hl7.Fhir.Model.Quantity();
							Parse(newItem_valueQuantity, reader); // 50
							result.ValueQuantity.Add(newItem_valueQuantity);
							break;
						case "valueCode":
							var newItem_valueCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_valueCode, reader); // 60
							result.ValueCode.Add(newItem_valueCode);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.DeviceDefinition.UdiDeviceIdentifierComponent
		public void Parse(Hl7.Fhir.Model.DeviceDefinition.UdiDeviceIdentifierComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "deviceIdentifier":
							result.DeviceIdentifierElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DeviceIdentifierElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "issuer":
							result.IssuerElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.IssuerElement as Hl7.Fhir.Model.FhirUri, reader); // 50
							break;
						case "jurisdiction":
							result.JurisdictionElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.JurisdictionElement as Hl7.Fhir.Model.FhirUri, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.DeviceDefinition.DeviceNameComponent
		public void Parse(Hl7.Fhir.Model.DeviceDefinition.DeviceNameComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DeviceNameType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DeviceNameType>, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.DeviceDefinition.SpecializationComponent
		public void Parse(Hl7.Fhir.Model.DeviceDefinition.SpecializationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "systemType":
							result.SystemTypeElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.SystemTypeElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.DeviceDefinition.CapabilityComponent
		public void Parse(Hl7.Fhir.Model.DeviceDefinition.CapabilityComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "description":
							var newItem_description = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_description, reader); // 50
							result.Description.Add(newItem_description);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.DeviceDefinition.PropertyComponent
		public void Parse(Hl7.Fhir.Model.DeviceDefinition.PropertyComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "valueQuantity":
							var newItem_valueQuantity = new Hl7.Fhir.Model.Quantity();
							Parse(newItem_valueQuantity, reader); // 50
							result.ValueQuantity.Add(newItem_valueQuantity);
							break;
						case "valueCode":
							var newItem_valueCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_valueCode, reader); // 60
							result.ValueCode.Add(newItem_valueCode);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.DeviceDefinition.MaterialComponent
		public void Parse(Hl7.Fhir.Model.DeviceDefinition.MaterialComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "substance":
							result.Substance = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Substance as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "alternate":
							result.AlternateElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.AlternateElement as Hl7.Fhir.Model.FhirBoolean, reader); // 50
							break;
						case "allergenicIndicator":
							result.AllergenicIndicatorElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.AllergenicIndicatorElement as Hl7.Fhir.Model.FhirBoolean, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.DeviceMetric.CalibrationComponent
		public void Parse(Hl7.Fhir.Model.DeviceMetric.CalibrationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DeviceMetric.DeviceMetricCalibrationType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DeviceMetric.DeviceMetricCalibrationType>, reader); // 40
							break;
						case "state":
							result.StateElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DeviceMetric.DeviceMetricCalibrationState>();
							Parse(result.StateElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DeviceMetric.DeviceMetricCalibrationState>, reader); // 50
							break;
						case "time":
							result.TimeElement = new Hl7.Fhir.Model.Instant();
							Parse(result.TimeElement as Hl7.Fhir.Model.Instant, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.DeviceRequest.ParameterComponent
		public void Parse(Hl7.Fhir.Model.DeviceRequest.ParameterComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "valueCodeableConcept":
							result.Value = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Value as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "valueQuantity":
							result.Value = new Hl7.Fhir.Model.Quantity();
							Parse(result.Value as Hl7.Fhir.Model.Quantity, reader); // 50
							break;
						case "valueRange":
							result.Value = new Hl7.Fhir.Model.Range();
							Parse(result.Value as Hl7.Fhir.Model.Range, reader); // 50
							break;
						case "valueBoolean":
							result.Value = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.Value as Hl7.Fhir.Model.FhirBoolean, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.DiagnosticReport.MediaComponent
		public void Parse(Hl7.Fhir.Model.DiagnosticReport.MediaComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "comment":
							result.CommentElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.CommentElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "link":
							result.Link = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Link as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.DocumentManifest.RelatedComponent
		public void Parse(Hl7.Fhir.Model.DocumentManifest.RelatedComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							result.Identifier = new Hl7.Fhir.Model.Identifier();
							Parse(result.Identifier as Hl7.Fhir.Model.Identifier, reader); // 40
							break;
						case "ref":
							result.Ref = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Ref as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.DocumentReference.RelatesToComponent
		public void Parse(Hl7.Fhir.Model.DocumentReference.RelatesToComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.CodeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DocumentRelationshipType>();
							Parse(result.CodeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DocumentRelationshipType>, reader); // 40
							break;
						case "target":
							result.Target = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Target as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.DocumentReference.ContentComponent
		public void Parse(Hl7.Fhir.Model.DocumentReference.ContentComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "attachment":
							result.Attachment = new Hl7.Fhir.Model.Attachment();
							Parse(result.Attachment as Hl7.Fhir.Model.Attachment, reader); // 40
							break;
						case "format":
							result.Format = new Hl7.Fhir.Model.Coding();
							Parse(result.Format as Hl7.Fhir.Model.Coding, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.DocumentReference.ContextComponent
		public void Parse(Hl7.Fhir.Model.DocumentReference.ContextComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "encounter":
							var newItem_encounter = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_encounter, reader); // 40
							result.Encounter.Add(newItem_encounter);
							break;
						case "event":
							var newItem_event = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_event, reader); // 50
							result.Event.Add(newItem_event);
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 60
							break;
						case "facilityType":
							result.FacilityType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.FacilityType as Hl7.Fhir.Model.CodeableConcept, reader); // 70
							break;
						case "practiceSetting":
							result.PracticeSetting = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.PracticeSetting as Hl7.Fhir.Model.CodeableConcept, reader); // 80
							break;
						case "sourcePatientInfo":
							result.SourcePatientInfo = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.SourcePatientInfo as Hl7.Fhir.Model.ResourceReference, reader); // 90
							break;
						case "related":
							var newItem_related = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_related, reader); // 100
							result.Related.Add(newItem_related);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.EffectEvidenceSynthesis.SampleSizeComponent
		public void Parse(Hl7.Fhir.Model.EffectEvidenceSynthesis.SampleSizeComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "numberOfStudies":
							result.NumberOfStudiesElement = new Hl7.Fhir.Model.Integer();
							Parse(result.NumberOfStudiesElement as Hl7.Fhir.Model.Integer, reader); // 50
							break;
						case "numberOfParticipants":
							result.NumberOfParticipantsElement = new Hl7.Fhir.Model.Integer();
							Parse(result.NumberOfParticipantsElement as Hl7.Fhir.Model.Integer, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.EffectEvidenceSynthesis.ResultsByExposureComponent
		public void Parse(Hl7.Fhir.Model.EffectEvidenceSynthesis.ResultsByExposureComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "exposureState":
							result.ExposureState_Element = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.EffectEvidenceSynthesis.ExposureState>();
							Parse(result.ExposureState_Element as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.EffectEvidenceSynthesis.ExposureState>, reader); // 50
							break;
						case "variantState":
							result.VariantState = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.VariantState as Hl7.Fhir.Model.CodeableConcept, reader); // 60
							break;
						case "riskEvidenceSynthesis":
							result.RiskEvidenceSynthesis = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.RiskEvidenceSynthesis as Hl7.Fhir.Model.ResourceReference, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.EffectEvidenceSynthesis.EffectEstimateComponent
		public void Parse(Hl7.Fhir.Model.EffectEvidenceSynthesis.EffectEstimateComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "variantState":
							result.VariantState = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.VariantState as Hl7.Fhir.Model.CodeableConcept, reader); // 60
							break;
						case "value":
							result.ValueElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.ValueElement as Hl7.Fhir.Model.FhirDecimal, reader); // 70
							break;
						case "unitOfMeasure":
							result.UnitOfMeasure = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.UnitOfMeasure as Hl7.Fhir.Model.CodeableConcept, reader); // 80
							break;
						case "precisionEstimate":
							var newItem_precisionEstimate = new Hl7.Fhir.Model.EffectEvidenceSynthesis.PrecisionEstimateComponent();
							Parse(newItem_precisionEstimate, reader); // 90
							result.PrecisionEstimate.Add(newItem_precisionEstimate);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.EffectEvidenceSynthesis.PrecisionEstimateComponent
		public void Parse(Hl7.Fhir.Model.EffectEvidenceSynthesis.PrecisionEstimateComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "level":
							result.LevelElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.LevelElement as Hl7.Fhir.Model.FhirDecimal, reader); // 50
							break;
						case "from":
							result.FromElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.FromElement as Hl7.Fhir.Model.FhirDecimal, reader); // 60
							break;
						case "to":
							result.ToElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.ToElement as Hl7.Fhir.Model.FhirDecimal, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.EffectEvidenceSynthesis.CertaintyComponent
		public void Parse(Hl7.Fhir.Model.EffectEvidenceSynthesis.CertaintyComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "rating":
							var newItem_rating = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_rating, reader); // 40
							result.Rating.Add(newItem_rating);
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 50
							result.Note.Add(newItem_note);
							break;
						case "certaintySubcomponent":
							var newItem_certaintySubcomponent = new Hl7.Fhir.Model.EffectEvidenceSynthesis.CertaintySubcomponentComponent();
							Parse(newItem_certaintySubcomponent, reader); // 60
							result.CertaintySubcomponent.Add(newItem_certaintySubcomponent);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.EffectEvidenceSynthesis.CertaintySubcomponentComponent
		public void Parse(Hl7.Fhir.Model.EffectEvidenceSynthesis.CertaintySubcomponentComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "rating":
							var newItem_rating = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_rating, reader); // 50
							result.Rating.Add(newItem_rating);
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 60
							result.Note.Add(newItem_note);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Encounter.StatusHistoryComponent
		public void Parse(Hl7.Fhir.Model.Encounter.StatusHistoryComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Encounter.EncounterStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Encounter.EncounterStatus>, reader); // 40
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Encounter.ClassHistoryComponent
		public void Parse(Hl7.Fhir.Model.Encounter.ClassHistoryComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "class":
							result.Class = new Hl7.Fhir.Model.Coding();
							Parse(result.Class as Hl7.Fhir.Model.Coding, reader); // 40
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Encounter.ParticipantComponent
		public void Parse(Hl7.Fhir.Model.Encounter.ParticipantComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							var newItem_type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_type, reader); // 40
							result.Type.Add(newItem_type);
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 50
							break;
						case "individual":
							result.Individual = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Individual as Hl7.Fhir.Model.ResourceReference, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Encounter.DiagnosisComponent
		public void Parse(Hl7.Fhir.Model.Encounter.DiagnosisComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "condition":
							result.Condition = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Condition as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						case "use":
							result.Use = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Use as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "rank":
							result.RankElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.RankElement as Hl7.Fhir.Model.PositiveInt, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Encounter.HospitalizationComponent
		public void Parse(Hl7.Fhir.Model.Encounter.HospitalizationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "preAdmissionIdentifier":
							result.PreAdmissionIdentifier = new Hl7.Fhir.Model.Identifier();
							Parse(result.PreAdmissionIdentifier as Hl7.Fhir.Model.Identifier, reader); // 40
							break;
						case "origin":
							result.Origin = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Origin as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						case "admitSource":
							result.AdmitSource = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.AdmitSource as Hl7.Fhir.Model.CodeableConcept, reader); // 60
							break;
						case "reAdmission":
							result.ReAdmission = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.ReAdmission as Hl7.Fhir.Model.CodeableConcept, reader); // 70
							break;
						case "dietPreference":
							var newItem_dietPreference = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_dietPreference, reader); // 80
							result.DietPreference.Add(newItem_dietPreference);
							break;
						case "specialCourtesy":
							var newItem_specialCourtesy = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_specialCourtesy, reader); // 90
							result.SpecialCourtesy.Add(newItem_specialCourtesy);
							break;
						case "specialArrangement":
							var newItem_specialArrangement = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_specialArrangement, reader); // 100
							result.SpecialArrangement.Add(newItem_specialArrangement);
							break;
						case "destination":
							result.Destination = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Destination as Hl7.Fhir.Model.ResourceReference, reader); // 110
							break;
						case "dischargeDisposition":
							result.DischargeDisposition = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.DischargeDisposition as Hl7.Fhir.Model.CodeableConcept, reader); // 120
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Encounter.LocationComponent
		public void Parse(Hl7.Fhir.Model.Encounter.LocationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "location":
							result.Location = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Location as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Encounter.EncounterLocationStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Encounter.EncounterLocationStatus>, reader); // 50
							break;
						case "physicalType":
							result.PhysicalType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.PhysicalType as Hl7.Fhir.Model.CodeableConcept, reader); // 60
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.EpisodeOfCare.StatusHistoryComponent
		public void Parse(Hl7.Fhir.Model.EpisodeOfCare.StatusHistoryComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "status":
							result.StatusElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.EpisodeOfCare.EpisodeOfCareStatus>();
							Parse(result.StatusElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.EpisodeOfCare.EpisodeOfCareStatus>, reader); // 40
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.EpisodeOfCare.DiagnosisComponent
		public void Parse(Hl7.Fhir.Model.EpisodeOfCare.DiagnosisComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "condition":
							result.Condition = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Condition as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						case "role":
							result.Role = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Role as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "rank":
							result.RankElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.RankElement as Hl7.Fhir.Model.PositiveInt, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.EvidenceVariable.CharacteristicComponent
		public void Parse(Hl7.Fhir.Model.EvidenceVariable.CharacteristicComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "definitionReference":
							result.Definition = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Definition as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						case "definitionCanonical":
							result.Definition = new Hl7.Fhir.Model.Canonical();
							Parse(result.Definition as Hl7.Fhir.Model.Canonical, reader); // 50
							break;
						case "definitionCodeableConcept":
							result.Definition = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Definition as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "definitionExpression":
							result.Definition = new Hl7.Fhir.Model.Expression();
							Parse(result.Definition as Hl7.Fhir.Model.Expression, reader); // 50
							break;
						case "definitionDataRequirement":
							result.Definition = new Hl7.Fhir.Model.DataRequirement();
							Parse(result.Definition as Hl7.Fhir.Model.DataRequirement, reader); // 50
							break;
						case "definitionTriggerDefinition":
							result.Definition = new Hl7.Fhir.Model.TriggerDefinition();
							Parse(result.Definition as Hl7.Fhir.Model.TriggerDefinition, reader); // 50
							break;
						case "usageContext":
							var newItem_usageContext = new Hl7.Fhir.Model.UsageContext();
							Parse(newItem_usageContext, reader); // 60
							result.UsageContext.Add(newItem_usageContext);
							break;
						case "exclude":
							result.ExcludeElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ExcludeElement as Hl7.Fhir.Model.FhirBoolean, reader); // 70
							break;
						case "participantEffectiveDateTime":
							result.ParticipantEffective = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.ParticipantEffective as Hl7.Fhir.Model.FhirDateTime, reader); // 80
							break;
						case "participantEffectivePeriod":
							result.ParticipantEffective = new Hl7.Fhir.Model.Period();
							Parse(result.ParticipantEffective as Hl7.Fhir.Model.Period, reader); // 80
							break;
						case "participantEffectiveDuration":
							result.ParticipantEffective = new Hl7.Fhir.Model.Duration();
							Parse(result.ParticipantEffective as Hl7.Fhir.Model.Duration, reader); // 80
							break;
						case "participantEffectiveTiming":
							result.ParticipantEffective = new Hl7.Fhir.Model.Timing();
							Parse(result.ParticipantEffective as Hl7.Fhir.Model.Timing, reader); // 80
							break;
						case "timeFromStart":
							result.TimeFromStart = new Hl7.Fhir.Model.Duration();
							Parse(result.TimeFromStart as Hl7.Fhir.Model.Duration, reader); // 90
							break;
						case "groupMeasure":
							result.GroupMeasureElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.GroupMeasure>();
							Parse(result.GroupMeasureElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.GroupMeasure>, reader); // 100
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ExampleScenario.ActorComponent
		public void Parse(Hl7.Fhir.Model.ExampleScenario.ActorComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "actorId":
							result.ActorIdElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ActorIdElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ExampleScenario.ExampleScenarioActorType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ExampleScenario.ExampleScenarioActorType>, reader); // 50
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.Markdown();
							Parse(result.Description as Hl7.Fhir.Model.Markdown, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ExampleScenario.InstanceComponent
		public void Parse(Hl7.Fhir.Model.ExampleScenario.InstanceComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "resourceId":
							result.ResourceIdElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ResourceIdElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "resourceType":
							result.ResourceTypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ResourceType>();
							Parse(result.ResourceTypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ResourceType>, reader); // 50
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.Markdown();
							Parse(result.Description as Hl7.Fhir.Model.Markdown, reader); // 70
							break;
						case "version":
							var newItem_version = new Hl7.Fhir.Model.ExampleScenario.VersionComponent();
							Parse(newItem_version, reader); // 80
							result.Version.Add(newItem_version);
							break;
						case "containedInstance":
							var newItem_containedInstance = new Hl7.Fhir.Model.ExampleScenario.ContainedInstanceComponent();
							Parse(newItem_containedInstance, reader); // 90
							result.ContainedInstance.Add(newItem_containedInstance);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ExampleScenario.VersionComponent
		public void Parse(Hl7.Fhir.Model.ExampleScenario.VersionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "versionId":
							result.VersionIdElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionIdElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.Markdown();
							Parse(result.Description as Hl7.Fhir.Model.Markdown, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ExampleScenario.ContainedInstanceComponent
		public void Parse(Hl7.Fhir.Model.ExampleScenario.ContainedInstanceComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "resourceId":
							result.ResourceIdElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ResourceIdElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "versionId":
							result.VersionIdElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionIdElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ExampleScenario.ProcessComponent
		public void Parse(Hl7.Fhir.Model.ExampleScenario.ProcessComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.Markdown();
							Parse(result.Description as Hl7.Fhir.Model.Markdown, reader); // 50
							break;
						case "preConditions":
							result.PreConditions = new Hl7.Fhir.Model.Markdown();
							Parse(result.PreConditions as Hl7.Fhir.Model.Markdown, reader); // 60
							break;
						case "postConditions":
							result.PostConditions = new Hl7.Fhir.Model.Markdown();
							Parse(result.PostConditions as Hl7.Fhir.Model.Markdown, reader); // 70
							break;
						case "step":
							var newItem_step = new Hl7.Fhir.Model.ExampleScenario.StepComponent();
							Parse(newItem_step, reader); // 80
							result.Step.Add(newItem_step);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ExampleScenario.StepComponent
		public void Parse(Hl7.Fhir.Model.ExampleScenario.StepComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "process":
							var newItem_process = new Hl7.Fhir.Model.ExampleScenario.ProcessComponent();
							Parse(newItem_process, reader); // 40
							result.Process.Add(newItem_process);
							break;
						case "pause":
							result.PauseElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.PauseElement as Hl7.Fhir.Model.FhirBoolean, reader); // 50
							break;
						case "operation":
							result.Operation = new Hl7.Fhir.Model.ExampleScenario.OperationComponent();
							Parse(result.Operation as Hl7.Fhir.Model.ExampleScenario.OperationComponent, reader); // 60
							break;
						case "alternative":
							var newItem_alternative = new Hl7.Fhir.Model.ExampleScenario.AlternativeComponent();
							Parse(newItem_alternative, reader); // 70
							result.Alternative.Add(newItem_alternative);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ExampleScenario.OperationComponent
		public void Parse(Hl7.Fhir.Model.ExampleScenario.OperationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "number":
							result.NumberElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NumberElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TypeElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "initiator":
							result.InitiatorElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.InitiatorElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						case "receiver":
							result.ReceiverElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ReceiverElement as Hl7.Fhir.Model.FhirString, reader); // 80
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.Markdown();
							Parse(result.Description as Hl7.Fhir.Model.Markdown, reader); // 90
							break;
						case "initiatorActive":
							result.InitiatorActiveElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.InitiatorActiveElement as Hl7.Fhir.Model.FhirBoolean, reader); // 100
							break;
						case "receiverActive":
							result.ReceiverActiveElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ReceiverActiveElement as Hl7.Fhir.Model.FhirBoolean, reader); // 110
							break;
						case "request":
							result.Request = new Hl7.Fhir.Model.ExampleScenario.ContainedInstanceComponent();
							Parse(result.Request as Hl7.Fhir.Model.ExampleScenario.ContainedInstanceComponent, reader); // 120
							break;
						case "response":
							result.Response = new Hl7.Fhir.Model.ExampleScenario.ContainedInstanceComponent();
							Parse(result.Response as Hl7.Fhir.Model.ExampleScenario.ContainedInstanceComponent, reader); // 130
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ExampleScenario.AlternativeComponent
		public void Parse(Hl7.Fhir.Model.ExampleScenario.AlternativeComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.Markdown();
							Parse(result.Description as Hl7.Fhir.Model.Markdown, reader); // 50
							break;
						case "step":
							var newItem_step = new Hl7.Fhir.Model.ExampleScenario.StepComponent();
							Parse(newItem_step, reader); // 60
							result.Step.Add(newItem_step);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ExplanationOfBenefit.RelatedClaimComponent
		public void Parse(Hl7.Fhir.Model.ExplanationOfBenefit.RelatedClaimComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "claim":
							result.Claim = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Claim as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						case "relationship":
							result.Relationship = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Relationship as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "reference":
							result.Reference = new Hl7.Fhir.Model.Identifier();
							Parse(result.Reference as Hl7.Fhir.Model.Identifier, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ExplanationOfBenefit.PayeeComponent
		public void Parse(Hl7.Fhir.Model.ExplanationOfBenefit.PayeeComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "party":
							result.Party = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Party as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ExplanationOfBenefit.CareTeamComponent
		public void Parse(Hl7.Fhir.Model.ExplanationOfBenefit.CareTeamComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "sequence":
							result.SequenceElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.SequenceElement as Hl7.Fhir.Model.PositiveInt, reader); // 40
							break;
						case "provider":
							result.Provider = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Provider as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						case "responsible":
							result.ResponsibleElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ResponsibleElement as Hl7.Fhir.Model.FhirBoolean, reader); // 60
							break;
						case "role":
							result.Role = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Role as Hl7.Fhir.Model.CodeableConcept, reader); // 70
							break;
						case "qualification":
							result.Qualification = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Qualification as Hl7.Fhir.Model.CodeableConcept, reader); // 80
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ExplanationOfBenefit.SupportingInformationComponent
		public void Parse(Hl7.Fhir.Model.ExplanationOfBenefit.SupportingInformationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "sequence":
							result.SequenceElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.SequenceElement as Hl7.Fhir.Model.PositiveInt, reader); // 40
							break;
						case "category":
							result.Category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Category as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 60
							break;
						case "timingDate":
							result.Timing = new Hl7.Fhir.Model.Date();
							Parse(result.Timing as Hl7.Fhir.Model.Date, reader); // 70
							break;
						case "timingPeriod":
							result.Timing = new Hl7.Fhir.Model.Period();
							Parse(result.Timing as Hl7.Fhir.Model.Period, reader); // 70
							break;
						case "valueBoolean":
							result.Value = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.Value as Hl7.Fhir.Model.FhirBoolean, reader); // 80
							break;
						case "valueString":
							result.Value = new Hl7.Fhir.Model.FhirString();
							Parse(result.Value as Hl7.Fhir.Model.FhirString, reader); // 80
							break;
						case "valueQuantity":
							result.Value = new Hl7.Fhir.Model.Quantity();
							Parse(result.Value as Hl7.Fhir.Model.Quantity, reader); // 80
							break;
						case "valueAttachment":
							result.Value = new Hl7.Fhir.Model.Attachment();
							Parse(result.Value as Hl7.Fhir.Model.Attachment, reader); // 80
							break;
						case "valueReference":
							result.Value = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Value as Hl7.Fhir.Model.ResourceReference, reader); // 80
							break;
						case "reason":
							result.Reason = new Hl7.Fhir.Model.Coding();
							Parse(result.Reason as Hl7.Fhir.Model.Coding, reader); // 90
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ExplanationOfBenefit.DiagnosisComponent
		public void Parse(Hl7.Fhir.Model.ExplanationOfBenefit.DiagnosisComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "sequence":
							result.SequenceElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.SequenceElement as Hl7.Fhir.Model.PositiveInt, reader); // 40
							break;
						case "diagnosisCodeableConcept":
							result.Diagnosis = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Diagnosis as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "diagnosisReference":
							result.Diagnosis = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Diagnosis as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						case "type":
							var newItem_type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_type, reader); // 60
							result.Type.Add(newItem_type);
							break;
						case "onAdmission":
							result.OnAdmission = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.OnAdmission as Hl7.Fhir.Model.CodeableConcept, reader); // 70
							break;
						case "packageCode":
							result.PackageCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.PackageCode as Hl7.Fhir.Model.CodeableConcept, reader); // 80
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ExplanationOfBenefit.ProcedureComponent
		public void Parse(Hl7.Fhir.Model.ExplanationOfBenefit.ProcedureComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "sequence":
							result.SequenceElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.SequenceElement as Hl7.Fhir.Model.PositiveInt, reader); // 40
							break;
						case "type":
							var newItem_type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_type, reader); // 50
							result.Type.Add(newItem_type);
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 60
							break;
						case "procedureCodeableConcept":
							result.Procedure = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Procedure as Hl7.Fhir.Model.CodeableConcept, reader); // 70
							break;
						case "procedureReference":
							result.Procedure = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Procedure as Hl7.Fhir.Model.ResourceReference, reader); // 70
							break;
						case "udi":
							var newItem_udi = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_udi, reader); // 80
							result.Udi.Add(newItem_udi);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ExplanationOfBenefit.InsuranceComponent
		public void Parse(Hl7.Fhir.Model.ExplanationOfBenefit.InsuranceComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "focal":
							result.FocalElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.FocalElement as Hl7.Fhir.Model.FhirBoolean, reader); // 40
							break;
						case "coverage":
							result.Coverage = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Coverage as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						case "preAuthRef":
							var newItem_preAuthRef = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_preAuthRef, reader); // 60
							result.PreAuthRefElement.Add(newItem_preAuthRef);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ExplanationOfBenefit.AccidentComponent
		public void Parse(Hl7.Fhir.Model.ExplanationOfBenefit.AccidentComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.Date();
							Parse(result.DateElement as Hl7.Fhir.Model.Date, reader); // 40
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "locationAddress":
							result.Location = new Hl7.Fhir.Model.Address();
							Parse(result.Location as Hl7.Fhir.Model.Address, reader); // 60
							break;
						case "locationReference":
							result.Location = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Location as Hl7.Fhir.Model.ResourceReference, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ExplanationOfBenefit.ItemComponent
		public void Parse(Hl7.Fhir.Model.ExplanationOfBenefit.ItemComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "sequence":
							result.SequenceElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.SequenceElement as Hl7.Fhir.Model.PositiveInt, reader); // 40
							break;
						case "careTeamSequence":
							var newItem_careTeamSequence = new Hl7.Fhir.Model.PositiveInt();
							Parse(newItem_careTeamSequence, reader); // 50
							result.CareTeamSequenceElement.Add(newItem_careTeamSequence);
							break;
						case "diagnosisSequence":
							var newItem_diagnosisSequence = new Hl7.Fhir.Model.PositiveInt();
							Parse(newItem_diagnosisSequence, reader); // 60
							result.DiagnosisSequenceElement.Add(newItem_diagnosisSequence);
							break;
						case "procedureSequence":
							var newItem_procedureSequence = new Hl7.Fhir.Model.PositiveInt();
							Parse(newItem_procedureSequence, reader); // 70
							result.ProcedureSequenceElement.Add(newItem_procedureSequence);
							break;
						case "informationSequence":
							var newItem_informationSequence = new Hl7.Fhir.Model.PositiveInt();
							Parse(newItem_informationSequence, reader); // 80
							result.InformationSequenceElement.Add(newItem_informationSequence);
							break;
						case "revenue":
							result.Revenue = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Revenue as Hl7.Fhir.Model.CodeableConcept, reader); // 90
							break;
						case "category":
							result.Category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Category as Hl7.Fhir.Model.CodeableConcept, reader); // 100
							break;
						case "productOrService":
							result.ProductOrService = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.ProductOrService as Hl7.Fhir.Model.CodeableConcept, reader); // 110
							break;
						case "modifier":
							var newItem_modifier = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_modifier, reader); // 120
							result.Modifier.Add(newItem_modifier);
							break;
						case "programCode":
							var newItem_programCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_programCode, reader); // 130
							result.ProgramCode.Add(newItem_programCode);
							break;
						case "servicedDate":
							result.Serviced = new Hl7.Fhir.Model.Date();
							Parse(result.Serviced as Hl7.Fhir.Model.Date, reader); // 140
							break;
						case "servicedPeriod":
							result.Serviced = new Hl7.Fhir.Model.Period();
							Parse(result.Serviced as Hl7.Fhir.Model.Period, reader); // 140
							break;
						case "locationCodeableConcept":
							result.Location = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Location as Hl7.Fhir.Model.CodeableConcept, reader); // 150
							break;
						case "locationAddress":
							result.Location = new Hl7.Fhir.Model.Address();
							Parse(result.Location as Hl7.Fhir.Model.Address, reader); // 150
							break;
						case "locationReference":
							result.Location = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Location as Hl7.Fhir.Model.ResourceReference, reader); // 150
							break;
						case "quantity":
							result.Quantity = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Quantity as Hl7.Fhir.Model.SimpleQuantity, reader); // 160
							break;
						case "unitPrice":
							result.UnitPrice = new Hl7.Fhir.Model.Money();
							Parse(result.UnitPrice as Hl7.Fhir.Model.Money, reader); // 170
							break;
						case "factor":
							result.FactorElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.FactorElement as Hl7.Fhir.Model.FhirDecimal, reader); // 180
							break;
						case "net":
							result.Net = new Hl7.Fhir.Model.Money();
							Parse(result.Net as Hl7.Fhir.Model.Money, reader); // 190
							break;
						case "udi":
							var newItem_udi = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_udi, reader); // 200
							result.Udi.Add(newItem_udi);
							break;
						case "bodySite":
							result.BodySite = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.BodySite as Hl7.Fhir.Model.CodeableConcept, reader); // 210
							break;
						case "subSite":
							var newItem_subSite = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_subSite, reader); // 220
							result.SubSite.Add(newItem_subSite);
							break;
						case "encounter":
							var newItem_encounter = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_encounter, reader); // 230
							result.Encounter.Add(newItem_encounter);
							break;
						case "noteNumber":
							var newItem_noteNumber = new Hl7.Fhir.Model.PositiveInt();
							Parse(newItem_noteNumber, reader); // 240
							result.NoteNumberElement.Add(newItem_noteNumber);
							break;
						case "adjudication":
							var newItem_adjudication = new Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent();
							Parse(newItem_adjudication, reader); // 250
							result.Adjudication.Add(newItem_adjudication);
							break;
						case "detail":
							var newItem_detail = new Hl7.Fhir.Model.ExplanationOfBenefit.DetailComponent();
							Parse(newItem_detail, reader); // 260
							result.Detail.Add(newItem_detail);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent
		public void Parse(Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "category":
							result.Category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Category as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "reason":
							result.Reason = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Reason as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "amount":
							result.Amount = new Hl7.Fhir.Model.Money();
							Parse(result.Amount as Hl7.Fhir.Model.Money, reader); // 60
							break;
						case "value":
							result.ValueElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.ValueElement as Hl7.Fhir.Model.FhirDecimal, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ExplanationOfBenefit.DetailComponent
		public void Parse(Hl7.Fhir.Model.ExplanationOfBenefit.DetailComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "sequence":
							result.SequenceElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.SequenceElement as Hl7.Fhir.Model.PositiveInt, reader); // 40
							break;
						case "revenue":
							result.Revenue = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Revenue as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "category":
							result.Category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Category as Hl7.Fhir.Model.CodeableConcept, reader); // 60
							break;
						case "productOrService":
							result.ProductOrService = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.ProductOrService as Hl7.Fhir.Model.CodeableConcept, reader); // 70
							break;
						case "modifier":
							var newItem_modifier = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_modifier, reader); // 80
							result.Modifier.Add(newItem_modifier);
							break;
						case "programCode":
							var newItem_programCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_programCode, reader); // 90
							result.ProgramCode.Add(newItem_programCode);
							break;
						case "quantity":
							result.Quantity = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Quantity as Hl7.Fhir.Model.SimpleQuantity, reader); // 100
							break;
						case "unitPrice":
							result.UnitPrice = new Hl7.Fhir.Model.Money();
							Parse(result.UnitPrice as Hl7.Fhir.Model.Money, reader); // 110
							break;
						case "factor":
							result.FactorElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.FactorElement as Hl7.Fhir.Model.FhirDecimal, reader); // 120
							break;
						case "net":
							result.Net = new Hl7.Fhir.Model.Money();
							Parse(result.Net as Hl7.Fhir.Model.Money, reader); // 130
							break;
						case "udi":
							var newItem_udi = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_udi, reader); // 140
							result.Udi.Add(newItem_udi);
							break;
						case "noteNumber":
							var newItem_noteNumber = new Hl7.Fhir.Model.PositiveInt();
							Parse(newItem_noteNumber, reader); // 150
							result.NoteNumberElement.Add(newItem_noteNumber);
							break;
						case "adjudication":
							var newItem_adjudication = new Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent();
							Parse(newItem_adjudication, reader); // 160
							result.Adjudication.Add(newItem_adjudication);
							break;
						case "subDetail":
							var newItem_subDetail = new Hl7.Fhir.Model.ExplanationOfBenefit.SubDetailComponent();
							Parse(newItem_subDetail, reader); // 170
							result.SubDetail.Add(newItem_subDetail);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ExplanationOfBenefit.SubDetailComponent
		public void Parse(Hl7.Fhir.Model.ExplanationOfBenefit.SubDetailComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "sequence":
							result.SequenceElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.SequenceElement as Hl7.Fhir.Model.PositiveInt, reader); // 40
							break;
						case "revenue":
							result.Revenue = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Revenue as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "category":
							result.Category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Category as Hl7.Fhir.Model.CodeableConcept, reader); // 60
							break;
						case "productOrService":
							result.ProductOrService = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.ProductOrService as Hl7.Fhir.Model.CodeableConcept, reader); // 70
							break;
						case "modifier":
							var newItem_modifier = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_modifier, reader); // 80
							result.Modifier.Add(newItem_modifier);
							break;
						case "programCode":
							var newItem_programCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_programCode, reader); // 90
							result.ProgramCode.Add(newItem_programCode);
							break;
						case "quantity":
							result.Quantity = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Quantity as Hl7.Fhir.Model.SimpleQuantity, reader); // 100
							break;
						case "unitPrice":
							result.UnitPrice = new Hl7.Fhir.Model.Money();
							Parse(result.UnitPrice as Hl7.Fhir.Model.Money, reader); // 110
							break;
						case "factor":
							result.FactorElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.FactorElement as Hl7.Fhir.Model.FhirDecimal, reader); // 120
							break;
						case "net":
							result.Net = new Hl7.Fhir.Model.Money();
							Parse(result.Net as Hl7.Fhir.Model.Money, reader); // 130
							break;
						case "udi":
							var newItem_udi = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_udi, reader); // 140
							result.Udi.Add(newItem_udi);
							break;
						case "noteNumber":
							var newItem_noteNumber = new Hl7.Fhir.Model.PositiveInt();
							Parse(newItem_noteNumber, reader); // 150
							result.NoteNumberElement.Add(newItem_noteNumber);
							break;
						case "adjudication":
							var newItem_adjudication = new Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent();
							Parse(newItem_adjudication, reader); // 160
							result.Adjudication.Add(newItem_adjudication);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemComponent
		public void Parse(Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "itemSequence":
							var newItem_itemSequence = new Hl7.Fhir.Model.PositiveInt();
							Parse(newItem_itemSequence, reader); // 40
							result.ItemSequenceElement.Add(newItem_itemSequence);
							break;
						case "detailSequence":
							var newItem_detailSequence = new Hl7.Fhir.Model.PositiveInt();
							Parse(newItem_detailSequence, reader); // 50
							result.DetailSequenceElement.Add(newItem_detailSequence);
							break;
						case "subDetailSequence":
							var newItem_subDetailSequence = new Hl7.Fhir.Model.PositiveInt();
							Parse(newItem_subDetailSequence, reader); // 60
							result.SubDetailSequenceElement.Add(newItem_subDetailSequence);
							break;
						case "provider":
							var newItem_provider = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_provider, reader); // 70
							result.Provider.Add(newItem_provider);
							break;
						case "productOrService":
							result.ProductOrService = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.ProductOrService as Hl7.Fhir.Model.CodeableConcept, reader); // 80
							break;
						case "modifier":
							var newItem_modifier = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_modifier, reader); // 90
							result.Modifier.Add(newItem_modifier);
							break;
						case "programCode":
							var newItem_programCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_programCode, reader); // 100
							result.ProgramCode.Add(newItem_programCode);
							break;
						case "servicedDate":
							result.Serviced = new Hl7.Fhir.Model.Date();
							Parse(result.Serviced as Hl7.Fhir.Model.Date, reader); // 110
							break;
						case "servicedPeriod":
							result.Serviced = new Hl7.Fhir.Model.Period();
							Parse(result.Serviced as Hl7.Fhir.Model.Period, reader); // 110
							break;
						case "locationCodeableConcept":
							result.Location = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Location as Hl7.Fhir.Model.CodeableConcept, reader); // 120
							break;
						case "locationAddress":
							result.Location = new Hl7.Fhir.Model.Address();
							Parse(result.Location as Hl7.Fhir.Model.Address, reader); // 120
							break;
						case "locationReference":
							result.Location = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Location as Hl7.Fhir.Model.ResourceReference, reader); // 120
							break;
						case "quantity":
							result.Quantity = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Quantity as Hl7.Fhir.Model.SimpleQuantity, reader); // 130
							break;
						case "unitPrice":
							result.UnitPrice = new Hl7.Fhir.Model.Money();
							Parse(result.UnitPrice as Hl7.Fhir.Model.Money, reader); // 140
							break;
						case "factor":
							result.FactorElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.FactorElement as Hl7.Fhir.Model.FhirDecimal, reader); // 150
							break;
						case "net":
							result.Net = new Hl7.Fhir.Model.Money();
							Parse(result.Net as Hl7.Fhir.Model.Money, reader); // 160
							break;
						case "bodySite":
							result.BodySite = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.BodySite as Hl7.Fhir.Model.CodeableConcept, reader); // 170
							break;
						case "subSite":
							var newItem_subSite = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_subSite, reader); // 180
							result.SubSite.Add(newItem_subSite);
							break;
						case "noteNumber":
							var newItem_noteNumber = new Hl7.Fhir.Model.PositiveInt();
							Parse(newItem_noteNumber, reader); // 190
							result.NoteNumberElement.Add(newItem_noteNumber);
							break;
						case "adjudication":
							var newItem_adjudication = new Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent();
							Parse(newItem_adjudication, reader); // 200
							result.Adjudication.Add(newItem_adjudication);
							break;
						case "detail":
							var newItem_detail = new Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemDetailComponent();
							Parse(newItem_detail, reader); // 210
							result.Detail.Add(newItem_detail);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemDetailComponent
		public void Parse(Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemDetailComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "productOrService":
							result.ProductOrService = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.ProductOrService as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "modifier":
							var newItem_modifier = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_modifier, reader); // 50
							result.Modifier.Add(newItem_modifier);
							break;
						case "quantity":
							result.Quantity = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Quantity as Hl7.Fhir.Model.SimpleQuantity, reader); // 60
							break;
						case "unitPrice":
							result.UnitPrice = new Hl7.Fhir.Model.Money();
							Parse(result.UnitPrice as Hl7.Fhir.Model.Money, reader); // 70
							break;
						case "factor":
							result.FactorElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.FactorElement as Hl7.Fhir.Model.FhirDecimal, reader); // 80
							break;
						case "net":
							result.Net = new Hl7.Fhir.Model.Money();
							Parse(result.Net as Hl7.Fhir.Model.Money, reader); // 90
							break;
						case "noteNumber":
							var newItem_noteNumber = new Hl7.Fhir.Model.PositiveInt();
							Parse(newItem_noteNumber, reader); // 100
							result.NoteNumberElement.Add(newItem_noteNumber);
							break;
						case "adjudication":
							var newItem_adjudication = new Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent();
							Parse(newItem_adjudication, reader); // 110
							result.Adjudication.Add(newItem_adjudication);
							break;
						case "subDetail":
							var newItem_subDetail = new Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemDetailSubDetailComponent();
							Parse(newItem_subDetail, reader); // 120
							result.SubDetail.Add(newItem_subDetail);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemDetailSubDetailComponent
		public void Parse(Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemDetailSubDetailComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "productOrService":
							result.ProductOrService = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.ProductOrService as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "modifier":
							var newItem_modifier = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_modifier, reader); // 50
							result.Modifier.Add(newItem_modifier);
							break;
						case "quantity":
							result.Quantity = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Quantity as Hl7.Fhir.Model.SimpleQuantity, reader); // 60
							break;
						case "unitPrice":
							result.UnitPrice = new Hl7.Fhir.Model.Money();
							Parse(result.UnitPrice as Hl7.Fhir.Model.Money, reader); // 70
							break;
						case "factor":
							result.FactorElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.FactorElement as Hl7.Fhir.Model.FhirDecimal, reader); // 80
							break;
						case "net":
							result.Net = new Hl7.Fhir.Model.Money();
							Parse(result.Net as Hl7.Fhir.Model.Money, reader); // 90
							break;
						case "noteNumber":
							var newItem_noteNumber = new Hl7.Fhir.Model.PositiveInt();
							Parse(newItem_noteNumber, reader); // 100
							result.NoteNumberElement.Add(newItem_noteNumber);
							break;
						case "adjudication":
							var newItem_adjudication = new Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent();
							Parse(newItem_adjudication, reader); // 110
							result.Adjudication.Add(newItem_adjudication);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ExplanationOfBenefit.TotalComponent
		public void Parse(Hl7.Fhir.Model.ExplanationOfBenefit.TotalComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "category":
							result.Category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Category as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "amount":
							result.Amount = new Hl7.Fhir.Model.Money();
							Parse(result.Amount as Hl7.Fhir.Model.Money, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ExplanationOfBenefit.PaymentComponent
		public void Parse(Hl7.Fhir.Model.ExplanationOfBenefit.PaymentComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "adjustment":
							result.Adjustment = new Hl7.Fhir.Model.Money();
							Parse(result.Adjustment as Hl7.Fhir.Model.Money, reader); // 50
							break;
						case "adjustmentReason":
							result.AdjustmentReason = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.AdjustmentReason as Hl7.Fhir.Model.CodeableConcept, reader); // 60
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.Date();
							Parse(result.DateElement as Hl7.Fhir.Model.Date, reader); // 70
							break;
						case "amount":
							result.Amount = new Hl7.Fhir.Model.Money();
							Parse(result.Amount as Hl7.Fhir.Model.Money, reader); // 80
							break;
						case "identifier":
							result.Identifier = new Hl7.Fhir.Model.Identifier();
							Parse(result.Identifier as Hl7.Fhir.Model.Identifier, reader); // 90
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ExplanationOfBenefit.NoteComponent
		public void Parse(Hl7.Fhir.Model.ExplanationOfBenefit.NoteComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "number":
							result.NumberElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.NumberElement as Hl7.Fhir.Model.PositiveInt, reader); // 40
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.NoteType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.NoteType>, reader); // 50
							break;
						case "text":
							result.TextElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TextElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "language":
							result.Language = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Language as Hl7.Fhir.Model.CodeableConcept, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ExplanationOfBenefit.BenefitBalanceComponent
		public void Parse(Hl7.Fhir.Model.ExplanationOfBenefit.BenefitBalanceComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "category":
							result.Category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Category as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "excluded":
							result.ExcludedElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ExcludedElement as Hl7.Fhir.Model.FhirBoolean, reader); // 50
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						case "network":
							result.Network = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Network as Hl7.Fhir.Model.CodeableConcept, reader); // 80
							break;
						case "unit":
							result.Unit = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Unit as Hl7.Fhir.Model.CodeableConcept, reader); // 90
							break;
						case "term":
							result.Term = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Term as Hl7.Fhir.Model.CodeableConcept, reader); // 100
							break;
						case "financial":
							var newItem_financial = new Hl7.Fhir.Model.ExplanationOfBenefit.BenefitComponent();
							Parse(newItem_financial, reader); // 110
							result.Financial.Add(newItem_financial);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ExplanationOfBenefit.BenefitComponent
		public void Parse(Hl7.Fhir.Model.ExplanationOfBenefit.BenefitComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "allowedUnsignedInt":
							result.Allowed = new Hl7.Fhir.Model.UnsignedInt();
							Parse(result.Allowed as Hl7.Fhir.Model.UnsignedInt, reader); // 50
							break;
						case "allowedString":
							result.Allowed = new Hl7.Fhir.Model.FhirString();
							Parse(result.Allowed as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "allowedMoney":
							result.Allowed = new Hl7.Fhir.Model.Money();
							Parse(result.Allowed as Hl7.Fhir.Model.Money, reader); // 50
							break;
						case "usedUnsignedInt":
							result.Used = new Hl7.Fhir.Model.UnsignedInt();
							Parse(result.Used as Hl7.Fhir.Model.UnsignedInt, reader); // 60
							break;
						case "usedMoney":
							result.Used = new Hl7.Fhir.Model.Money();
							Parse(result.Used as Hl7.Fhir.Model.Money, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.FamilyMemberHistory.ConditionComponent
		public void Parse(Hl7.Fhir.Model.FamilyMemberHistory.ConditionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "outcome":
							result.Outcome = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Outcome as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "contributedToDeath":
							result.ContributedToDeathElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ContributedToDeathElement as Hl7.Fhir.Model.FhirBoolean, reader); // 60
							break;
						case "onsetAge":
							result.Onset = new Hl7.Fhir.Model.Age();
							Parse(result.Onset as Hl7.Fhir.Model.Age, reader); // 70
							break;
						case "onsetRange":
							result.Onset = new Hl7.Fhir.Model.Range();
							Parse(result.Onset as Hl7.Fhir.Model.Range, reader); // 70
							break;
						case "onsetPeriod":
							result.Onset = new Hl7.Fhir.Model.Period();
							Parse(result.Onset as Hl7.Fhir.Model.Period, reader); // 70
							break;
						case "onsetString":
							result.Onset = new Hl7.Fhir.Model.FhirString();
							Parse(result.Onset as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 80
							result.Note.Add(newItem_note);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Goal.TargetComponent
		public void Parse(Hl7.Fhir.Model.Goal.TargetComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "measure":
							result.Measure = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Measure as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "detailQuantity":
							result.Detail = new Hl7.Fhir.Model.Quantity();
							Parse(result.Detail as Hl7.Fhir.Model.Quantity, reader); // 50
							break;
						case "detailRange":
							result.Detail = new Hl7.Fhir.Model.Range();
							Parse(result.Detail as Hl7.Fhir.Model.Range, reader); // 50
							break;
						case "detailCodeableConcept":
							result.Detail = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Detail as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "detailString":
							result.Detail = new Hl7.Fhir.Model.FhirString();
							Parse(result.Detail as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "detailBoolean":
							result.Detail = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.Detail as Hl7.Fhir.Model.FhirBoolean, reader); // 50
							break;
						case "detailInteger":
							result.Detail = new Hl7.Fhir.Model.Integer();
							Parse(result.Detail as Hl7.Fhir.Model.Integer, reader); // 50
							break;
						case "detailRatio":
							result.Detail = new Hl7.Fhir.Model.Ratio();
							Parse(result.Detail as Hl7.Fhir.Model.Ratio, reader); // 50
							break;
						case "dueDate":
							result.Due = new Hl7.Fhir.Model.Date();
							Parse(result.Due as Hl7.Fhir.Model.Date, reader); // 60
							break;
						case "dueDuration":
							result.Due = new Hl7.Fhir.Model.Duration();
							Parse(result.Due as Hl7.Fhir.Model.Duration, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.GraphDefinition.LinkComponent
		public void Parse(Hl7.Fhir.Model.GraphDefinition.LinkComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "path":
							result.PathElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PathElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "sliceName":
							result.SliceNameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.SliceNameElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "min":
							result.MinElement = new Hl7.Fhir.Model.Integer();
							Parse(result.MinElement as Hl7.Fhir.Model.Integer, reader); // 60
							break;
						case "max":
							result.MaxElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.MaxElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 80
							break;
						case "target":
							var newItem_target = new Hl7.Fhir.Model.GraphDefinition.TargetComponent();
							Parse(newItem_target, reader); // 90
							result.Target.Add(newItem_target);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.GraphDefinition.TargetComponent
		public void Parse(Hl7.Fhir.Model.GraphDefinition.TargetComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ResourceType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ResourceType>, reader); // 40
							break;
						case "params":
							result.ParamsElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ParamsElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "profile":
							result.ProfileElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.ProfileElement as Hl7.Fhir.Model.Canonical, reader); // 60
							break;
						case "compartment":
							var newItem_compartment = new Hl7.Fhir.Model.GraphDefinition.CompartmentComponent();
							Parse(newItem_compartment, reader); // 70
							result.Compartment.Add(newItem_compartment);
							break;
						case "link":
							var newItem_link = new Hl7.Fhir.Model.GraphDefinition.LinkComponent();
							Parse(newItem_link, reader); // 80
							result.Link.Add(newItem_link);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.GraphDefinition.CompartmentComponent
		public void Parse(Hl7.Fhir.Model.GraphDefinition.CompartmentComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "use":
							result.UseElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.GraphDefinition.GraphCompartmentUse>();
							Parse(result.UseElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.GraphDefinition.GraphCompartmentUse>, reader); // 40
							break;
						case "code":
							result.CodeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CompartmentType>();
							Parse(result.CodeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CompartmentType>, reader); // 50
							break;
						case "rule":
							result.RuleElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.GraphDefinition.GraphCompartmentRule>();
							Parse(result.RuleElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.GraphDefinition.GraphCompartmentRule>, reader); // 60
							break;
						case "expression":
							result.ExpressionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ExpressionElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 80
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Group.CharacteristicComponent
		public void Parse(Hl7.Fhir.Model.Group.CharacteristicComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "valueCodeableConcept":
							result.Value = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Value as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "valueBoolean":
							result.Value = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.Value as Hl7.Fhir.Model.FhirBoolean, reader); // 50
							break;
						case "valueQuantity":
							result.Value = new Hl7.Fhir.Model.Quantity();
							Parse(result.Value as Hl7.Fhir.Model.Quantity, reader); // 50
							break;
						case "valueRange":
							result.Value = new Hl7.Fhir.Model.Range();
							Parse(result.Value as Hl7.Fhir.Model.Range, reader); // 50
							break;
						case "valueReference":
							result.Value = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Value as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						case "exclude":
							result.ExcludeElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ExcludeElement as Hl7.Fhir.Model.FhirBoolean, reader); // 60
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Group.MemberComponent
		public void Parse(Hl7.Fhir.Model.Group.MemberComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "entity":
							result.Entity = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Entity as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 50
							break;
						case "inactive":
							result.InactiveElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.InactiveElement as Hl7.Fhir.Model.FhirBoolean, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.HealthcareService.EligibilityComponent
		public void Parse(Hl7.Fhir.Model.HealthcareService.EligibilityComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "comment":
							result.Comment = new Hl7.Fhir.Model.Markdown();
							Parse(result.Comment as Hl7.Fhir.Model.Markdown, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.HealthcareService.AvailableTimeComponent
		public void Parse(Hl7.Fhir.Model.HealthcareService.AvailableTimeComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "daysOfWeek":
							var newItem_daysOfWeek = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DaysOfWeek>();
							Parse(newItem_daysOfWeek, reader); // 40
							result.DaysOfWeekElement.Add(newItem_daysOfWeek);
							break;
						case "allDay":
							result.AllDayElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.AllDayElement as Hl7.Fhir.Model.FhirBoolean, reader); // 50
							break;
						case "availableStartTime":
							result.AvailableStartTimeElement = new Hl7.Fhir.Model.Time();
							Parse(result.AvailableStartTimeElement as Hl7.Fhir.Model.Time, reader); // 60
							break;
						case "availableEndTime":
							result.AvailableEndTimeElement = new Hl7.Fhir.Model.Time();
							Parse(result.AvailableEndTimeElement as Hl7.Fhir.Model.Time, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.HealthcareService.NotAvailableComponent
		public void Parse(Hl7.Fhir.Model.HealthcareService.NotAvailableComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "during":
							result.During = new Hl7.Fhir.Model.Period();
							Parse(result.During as Hl7.Fhir.Model.Period, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ImagingStudy.SeriesComponent
		public void Parse(Hl7.Fhir.Model.ImagingStudy.SeriesComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "uid":
							result.UidElement = new Hl7.Fhir.Model.Id();
							Parse(result.UidElement as Hl7.Fhir.Model.Id, reader); // 40
							break;
						case "number":
							result.NumberElement = new Hl7.Fhir.Model.UnsignedInt();
							Parse(result.NumberElement as Hl7.Fhir.Model.UnsignedInt, reader); // 50
							break;
						case "modality":
							result.Modality = new Hl7.Fhir.Model.Coding();
							Parse(result.Modality as Hl7.Fhir.Model.Coding, reader); // 60
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						case "numberOfInstances":
							result.NumberOfInstancesElement = new Hl7.Fhir.Model.UnsignedInt();
							Parse(result.NumberOfInstancesElement as Hl7.Fhir.Model.UnsignedInt, reader); // 80
							break;
						case "endpoint":
							var newItem_endpoint = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_endpoint, reader); // 90
							result.Endpoint.Add(newItem_endpoint);
							break;
						case "bodySite":
							result.BodySite = new Hl7.Fhir.Model.Coding();
							Parse(result.BodySite as Hl7.Fhir.Model.Coding, reader); // 100
							break;
						case "laterality":
							result.Laterality = new Hl7.Fhir.Model.Coding();
							Parse(result.Laterality as Hl7.Fhir.Model.Coding, reader); // 110
							break;
						case "specimen":
							var newItem_specimen = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_specimen, reader); // 120
							result.Specimen.Add(newItem_specimen);
							break;
						case "started":
							result.StartedElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.StartedElement as Hl7.Fhir.Model.FhirDateTime, reader); // 130
							break;
						case "performer":
							var newItem_performer = new Hl7.Fhir.Model.ImagingStudy.PerformerComponent();
							Parse(newItem_performer, reader); // 140
							result.Performer.Add(newItem_performer);
							break;
						case "instance":
							var newItem_instance = new Hl7.Fhir.Model.ImagingStudy.InstanceComponent();
							Parse(newItem_instance, reader); // 150
							result.Instance.Add(newItem_instance);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ImagingStudy.PerformerComponent
		public void Parse(Hl7.Fhir.Model.ImagingStudy.PerformerComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "function":
							result.Function = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Function as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "actor":
							result.Actor = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Actor as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ImagingStudy.InstanceComponent
		public void Parse(Hl7.Fhir.Model.ImagingStudy.InstanceComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "uid":
							result.UidElement = new Hl7.Fhir.Model.Id();
							Parse(result.UidElement as Hl7.Fhir.Model.Id, reader); // 40
							break;
						case "sopClass":
							result.SopClass = new Hl7.Fhir.Model.Coding();
							Parse(result.SopClass as Hl7.Fhir.Model.Coding, reader); // 50
							break;
						case "number":
							result.NumberElement = new Hl7.Fhir.Model.UnsignedInt();
							Parse(result.NumberElement as Hl7.Fhir.Model.UnsignedInt, reader); // 60
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Immunization.PerformerComponent
		public void Parse(Hl7.Fhir.Model.Immunization.PerformerComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "function":
							result.Function = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Function as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "actor":
							result.Actor = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Actor as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Immunization.EducationComponent
		public void Parse(Hl7.Fhir.Model.Immunization.EducationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "documentType":
							result.DocumentTypeElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DocumentTypeElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "reference":
							result.ReferenceElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.ReferenceElement as Hl7.Fhir.Model.FhirUri, reader); // 50
							break;
						case "publicationDate":
							result.PublicationDateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.PublicationDateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 60
							break;
						case "presentationDate":
							result.PresentationDateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.PresentationDateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Immunization.ReactionComponent
		public void Parse(Hl7.Fhir.Model.Immunization.ReactionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 40
							break;
						case "detail":
							result.Detail = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Detail as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						case "reported":
							result.ReportedElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ReportedElement as Hl7.Fhir.Model.FhirBoolean, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Immunization.ProtocolAppliedComponent
		public void Parse(Hl7.Fhir.Model.Immunization.ProtocolAppliedComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "series":
							result.SeriesElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.SeriesElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "authority":
							result.Authority = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Authority as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						case "targetDisease":
							var newItem_targetDisease = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_targetDisease, reader); // 60
							result.TargetDisease.Add(newItem_targetDisease);
							break;
						case "doseNumberPositiveInt":
							result.DoseNumber = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.DoseNumber as Hl7.Fhir.Model.PositiveInt, reader); // 70
							break;
						case "doseNumberString":
							result.DoseNumber = new Hl7.Fhir.Model.FhirString();
							Parse(result.DoseNumber as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						case "seriesDosesPositiveInt":
							result.SeriesDoses = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.SeriesDoses as Hl7.Fhir.Model.PositiveInt, reader); // 80
							break;
						case "seriesDosesString":
							result.SeriesDoses = new Hl7.Fhir.Model.FhirString();
							Parse(result.SeriesDoses as Hl7.Fhir.Model.FhirString, reader); // 80
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ImmunizationRecommendation.RecommendationComponent
		public void Parse(Hl7.Fhir.Model.ImmunizationRecommendation.RecommendationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "vaccineCode":
							var newItem_vaccineCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_vaccineCode, reader); // 40
							result.VaccineCode.Add(newItem_vaccineCode);
							break;
						case "targetDisease":
							result.TargetDisease = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.TargetDisease as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "contraindicatedVaccineCode":
							var newItem_contraindicatedVaccineCode = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_contraindicatedVaccineCode, reader); // 60
							result.ContraindicatedVaccineCode.Add(newItem_contraindicatedVaccineCode);
							break;
						case "forecastStatus":
							result.ForecastStatus = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.ForecastStatus as Hl7.Fhir.Model.CodeableConcept, reader); // 70
							break;
						case "forecastReason":
							var newItem_forecastReason = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_forecastReason, reader); // 80
							result.ForecastReason.Add(newItem_forecastReason);
							break;
						case "dateCriterion":
							var newItem_dateCriterion = new Hl7.Fhir.Model.ImmunizationRecommendation.DateCriterionComponent();
							Parse(newItem_dateCriterion, reader); // 90
							result.DateCriterion.Add(newItem_dateCriterion);
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 100
							break;
						case "series":
							result.SeriesElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.SeriesElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "doseNumberPositiveInt":
							result.DoseNumber = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.DoseNumber as Hl7.Fhir.Model.PositiveInt, reader); // 120
							break;
						case "doseNumberString":
							result.DoseNumber = new Hl7.Fhir.Model.FhirString();
							Parse(result.DoseNumber as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "seriesDosesPositiveInt":
							result.SeriesDoses = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.SeriesDoses as Hl7.Fhir.Model.PositiveInt, reader); // 130
							break;
						case "seriesDosesString":
							result.SeriesDoses = new Hl7.Fhir.Model.FhirString();
							Parse(result.SeriesDoses as Hl7.Fhir.Model.FhirString, reader); // 130
							break;
						case "supportingImmunization":
							var newItem_supportingImmunization = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_supportingImmunization, reader); // 140
							result.SupportingImmunization.Add(newItem_supportingImmunization);
							break;
						case "supportingPatientInformation":
							var newItem_supportingPatientInformation = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_supportingPatientInformation, reader); // 150
							result.SupportingPatientInformation.Add(newItem_supportingPatientInformation);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ImmunizationRecommendation.DateCriterionComponent
		public void Parse(Hl7.Fhir.Model.ImmunizationRecommendation.DateCriterionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "value":
							result.ValueElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.ValueElement as Hl7.Fhir.Model.FhirDateTime, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ImplementationGuide.DependsOnComponent
		public void Parse(Hl7.Fhir.Model.ImplementationGuide.DependsOnComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "uri":
							result.UriElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.UriElement as Hl7.Fhir.Model.Canonical, reader); // 40
							break;
						case "packageId":
							result.PackageIdElement = new Hl7.Fhir.Model.Id();
							Parse(result.PackageIdElement as Hl7.Fhir.Model.Id, reader); // 50
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ImplementationGuide.GlobalComponent
		public void Parse(Hl7.Fhir.Model.ImplementationGuide.GlobalComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ResourceType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ResourceType>, reader); // 40
							break;
						case "profile":
							result.ProfileElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.ProfileElement as Hl7.Fhir.Model.Canonical, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ImplementationGuide.DefinitionComponent
		public void Parse(Hl7.Fhir.Model.ImplementationGuide.DefinitionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "grouping":
							var newItem_grouping = new Hl7.Fhir.Model.ImplementationGuide.GroupingComponent();
							Parse(newItem_grouping, reader); // 40
							result.Grouping.Add(newItem_grouping);
							break;
						case "resource":
							var newItem_resource = new Hl7.Fhir.Model.ImplementationGuide.ResourceComponent();
							Parse(newItem_resource, reader); // 50
							result.Resource.Add(newItem_resource);
							break;
						case "page":
							result.Page = new Hl7.Fhir.Model.ImplementationGuide.PageComponent();
							Parse(result.Page as Hl7.Fhir.Model.ImplementationGuide.PageComponent, reader); // 60
							break;
						case "parameter":
							var newItem_parameter = new Hl7.Fhir.Model.ImplementationGuide.ParameterComponent();
							Parse(newItem_parameter, reader); // 70
							result.Parameter.Add(newItem_parameter);
							break;
						case "template":
							var newItem_template = new Hl7.Fhir.Model.ImplementationGuide.TemplateComponent();
							Parse(newItem_template, reader); // 80
							result.Template.Add(newItem_template);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ImplementationGuide.GroupingComponent
		public void Parse(Hl7.Fhir.Model.ImplementationGuide.GroupingComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ImplementationGuide.ResourceComponent
		public void Parse(Hl7.Fhir.Model.ImplementationGuide.ResourceComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "reference":
							result.Reference = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Reference as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						case "fhirVersion":
							var newItem_fhirVersion = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FHIRVersion>();
							Parse(newItem_fhirVersion, reader); // 50
							result.FhirVersionElement.Add(newItem_fhirVersion);
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						case "exampleBoolean":
							result.Example = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.Example as Hl7.Fhir.Model.FhirBoolean, reader); // 80
							break;
						case "exampleCanonical":
							result.Example = new Hl7.Fhir.Model.Canonical();
							Parse(result.Example as Hl7.Fhir.Model.Canonical, reader); // 80
							break;
						case "groupingId":
							result.GroupingIdElement = new Hl7.Fhir.Model.Id();
							Parse(result.GroupingIdElement as Hl7.Fhir.Model.Id, reader); // 90
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ImplementationGuide.PageComponent
		public void Parse(Hl7.Fhir.Model.ImplementationGuide.PageComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "nameUrl":
							result.Name = new Hl7.Fhir.Model.FhirUrl();
							Parse(result.Name as Hl7.Fhir.Model.FhirUrl, reader); // 40
							break;
						case "nameReference":
							result.Name = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Name as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "generation":
							result.GenerationElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ImplementationGuide.GuidePageGeneration>();
							Parse(result.GenerationElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ImplementationGuide.GuidePageGeneration>, reader); // 60
							break;
						case "page":
							var newItem_page = new Hl7.Fhir.Model.ImplementationGuide.PageComponent();
							Parse(newItem_page, reader); // 70
							result.Page.Add(newItem_page);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ImplementationGuide.ParameterComponent
		public void Parse(Hl7.Fhir.Model.ImplementationGuide.ParameterComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.CodeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ImplementationGuide.GuideParameterCode>();
							Parse(result.CodeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ImplementationGuide.GuideParameterCode>, reader); // 40
							break;
						case "value":
							result.ValueElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ValueElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ImplementationGuide.TemplateComponent
		public void Parse(Hl7.Fhir.Model.ImplementationGuide.TemplateComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.CodeElement = new Hl7.Fhir.Model.Code();
							Parse(result.CodeElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "source":
							result.SourceElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.SourceElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "scope":
							result.ScopeElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ScopeElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ImplementationGuide.ManifestComponent
		public void Parse(Hl7.Fhir.Model.ImplementationGuide.ManifestComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "rendering":
							result.RenderingElement = new Hl7.Fhir.Model.FhirUrl();
							Parse(result.RenderingElement as Hl7.Fhir.Model.FhirUrl, reader); // 40
							break;
						case "resource":
							var newItem_resource = new Hl7.Fhir.Model.ImplementationGuide.ManifestResourceComponent();
							Parse(newItem_resource, reader); // 50
							result.Resource.Add(newItem_resource);
							break;
						case "page":
							var newItem_page = new Hl7.Fhir.Model.ImplementationGuide.ManifestPageComponent();
							Parse(newItem_page, reader); // 60
							result.Page.Add(newItem_page);
							break;
						case "image":
							var newItem_image = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_image, reader); // 70
							result.ImageElement.Add(newItem_image);
							break;
						case "other":
							var newItem_other = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_other, reader); // 80
							result.OtherElement.Add(newItem_other);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ImplementationGuide.ManifestResourceComponent
		public void Parse(Hl7.Fhir.Model.ImplementationGuide.ManifestResourceComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "reference":
							result.Reference = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Reference as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						case "exampleBoolean":
							result.Example = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.Example as Hl7.Fhir.Model.FhirBoolean, reader); // 50
							break;
						case "exampleCanonical":
							result.Example = new Hl7.Fhir.Model.Canonical();
							Parse(result.Example as Hl7.Fhir.Model.Canonical, reader); // 50
							break;
						case "relativePath":
							result.RelativePathElement = new Hl7.Fhir.Model.FhirUrl();
							Parse(result.RelativePathElement as Hl7.Fhir.Model.FhirUrl, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ImplementationGuide.ManifestPageComponent
		public void Parse(Hl7.Fhir.Model.ImplementationGuide.ManifestPageComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "anchor":
							var newItem_anchor = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_anchor, reader); // 60
							result.AnchorElement.Add(newItem_anchor);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.InsurancePlan.ContactComponent
		public void Parse(Hl7.Fhir.Model.InsurancePlan.ContactComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "purpose":
							result.Purpose = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Purpose as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "name":
							result.Name = new Hl7.Fhir.Model.HumanName();
							Parse(result.Name as Hl7.Fhir.Model.HumanName, reader); // 50
							break;
						case "telecom":
							var newItem_telecom = new Hl7.Fhir.Model.ContactPoint();
							Parse(newItem_telecom, reader); // 60
							result.Telecom.Add(newItem_telecom);
							break;
						case "address":
							result.Address = new Hl7.Fhir.Model.Address();
							Parse(result.Address as Hl7.Fhir.Model.Address, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.InsurancePlan.CoverageComponent
		public void Parse(Hl7.Fhir.Model.InsurancePlan.CoverageComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "network":
							var newItem_network = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_network, reader); // 50
							result.Network.Add(newItem_network);
							break;
						case "benefit":
							var newItem_benefit = new Hl7.Fhir.Model.InsurancePlan.CoverageBenefitComponent();
							Parse(newItem_benefit, reader); // 60
							result.Benefit.Add(newItem_benefit);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.InsurancePlan.CoverageBenefitComponent
		public void Parse(Hl7.Fhir.Model.InsurancePlan.CoverageBenefitComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "requirement":
							result.RequirementElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.RequirementElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "limit":
							var newItem_limit = new Hl7.Fhir.Model.InsurancePlan.LimitComponent();
							Parse(newItem_limit, reader); // 60
							result.Limit.Add(newItem_limit);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.InsurancePlan.LimitComponent
		public void Parse(Hl7.Fhir.Model.InsurancePlan.LimitComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "value":
							result.Value = new Hl7.Fhir.Model.Quantity();
							Parse(result.Value as Hl7.Fhir.Model.Quantity, reader); // 40
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.InsurancePlan.PlanComponent
		public void Parse(Hl7.Fhir.Model.InsurancePlan.PlanComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 40
							result.Identifier.Add(newItem_identifier);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "coverageArea":
							var newItem_coverageArea = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_coverageArea, reader); // 60
							result.CoverageArea.Add(newItem_coverageArea);
							break;
						case "network":
							var newItem_network = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_network, reader); // 70
							result.Network.Add(newItem_network);
							break;
						case "generalCost":
							var newItem_generalCost = new Hl7.Fhir.Model.InsurancePlan.GeneralCostComponent();
							Parse(newItem_generalCost, reader); // 80
							result.GeneralCost.Add(newItem_generalCost);
							break;
						case "specificCost":
							var newItem_specificCost = new Hl7.Fhir.Model.InsurancePlan.SpecificCostComponent();
							Parse(newItem_specificCost, reader); // 90
							result.SpecificCost.Add(newItem_specificCost);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.InsurancePlan.GeneralCostComponent
		public void Parse(Hl7.Fhir.Model.InsurancePlan.GeneralCostComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "groupSize":
							result.GroupSizeElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.GroupSizeElement as Hl7.Fhir.Model.PositiveInt, reader); // 50
							break;
						case "cost":
							result.Cost = new Hl7.Fhir.Model.Money();
							Parse(result.Cost as Hl7.Fhir.Model.Money, reader); // 60
							break;
						case "comment":
							result.CommentElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.CommentElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.InsurancePlan.SpecificCostComponent
		public void Parse(Hl7.Fhir.Model.InsurancePlan.SpecificCostComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "category":
							result.Category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Category as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "benefit":
							var newItem_benefit = new Hl7.Fhir.Model.InsurancePlan.PlanBenefitComponent();
							Parse(newItem_benefit, reader); // 50
							result.Benefit.Add(newItem_benefit);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.InsurancePlan.PlanBenefitComponent
		public void Parse(Hl7.Fhir.Model.InsurancePlan.PlanBenefitComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "cost":
							var newItem_cost = new Hl7.Fhir.Model.InsurancePlan.CostComponent();
							Parse(newItem_cost, reader); // 50
							result.Cost.Add(newItem_cost);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.InsurancePlan.CostComponent
		public void Parse(Hl7.Fhir.Model.InsurancePlan.CostComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "applicability":
							result.Applicability = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Applicability as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "qualifiers":
							var newItem_qualifiers = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_qualifiers, reader); // 60
							result.Qualifiers.Add(newItem_qualifiers);
							break;
						case "value":
							result.Value = new Hl7.Fhir.Model.Quantity();
							Parse(result.Value as Hl7.Fhir.Model.Quantity, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Invoice.ParticipantComponent
		public void Parse(Hl7.Fhir.Model.Invoice.ParticipantComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "role":
							result.Role = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Role as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "actor":
							result.Actor = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Actor as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Invoice.LineItemComponent
		public void Parse(Hl7.Fhir.Model.Invoice.LineItemComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "sequence":
							result.SequenceElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.SequenceElement as Hl7.Fhir.Model.PositiveInt, reader); // 40
							break;
						case "chargeItemReference":
							result.ChargeItem = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.ChargeItem as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						case "chargeItemCodeableConcept":
							result.ChargeItem = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.ChargeItem as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "priceComponent":
							var newItem_priceComponent = new Hl7.Fhir.Model.Invoice.PriceComponentComponent();
							Parse(newItem_priceComponent, reader); // 60
							result.PriceComponent.Add(newItem_priceComponent);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Invoice.PriceComponentComponent
		public void Parse(Hl7.Fhir.Model.Invoice.PriceComponentComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.InvoicePriceComponentType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.InvoicePriceComponentType>, reader); // 40
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "factor":
							result.FactorElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.FactorElement as Hl7.Fhir.Model.FhirDecimal, reader); // 60
							break;
						case "amount":
							result.Amount = new Hl7.Fhir.Model.Money();
							Parse(result.Amount as Hl7.Fhir.Model.Money, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Linkage.ItemComponent
		public void Parse(Hl7.Fhir.Model.Linkage.ItemComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Linkage.LinkageType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Linkage.LinkageType>, reader); // 40
							break;
						case "resource":
							result.Resource = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Resource as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.List.EntryComponent
		public void Parse(Hl7.Fhir.Model.List.EntryComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "flag":
							result.Flag = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Flag as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "deleted":
							result.DeletedElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.DeletedElement as Hl7.Fhir.Model.FhirBoolean, reader); // 50
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 60
							break;
						case "item":
							result.Item = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Item as Hl7.Fhir.Model.ResourceReference, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Location.PositionComponent
		public void Parse(Hl7.Fhir.Model.Location.PositionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "longitude":
							result.LongitudeElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.LongitudeElement as Hl7.Fhir.Model.FhirDecimal, reader); // 40
							break;
						case "latitude":
							result.LatitudeElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.LatitudeElement as Hl7.Fhir.Model.FhirDecimal, reader); // 50
							break;
						case "altitude":
							result.AltitudeElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.AltitudeElement as Hl7.Fhir.Model.FhirDecimal, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Location.HoursOfOperationComponent
		public void Parse(Hl7.Fhir.Model.Location.HoursOfOperationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "daysOfWeek":
							var newItem_daysOfWeek = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DaysOfWeek>();
							Parse(newItem_daysOfWeek, reader); // 40
							result.DaysOfWeekElement.Add(newItem_daysOfWeek);
							break;
						case "allDay":
							result.AllDayElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.AllDayElement as Hl7.Fhir.Model.FhirBoolean, reader); // 50
							break;
						case "openingTime":
							result.OpeningTimeElement = new Hl7.Fhir.Model.Time();
							Parse(result.OpeningTimeElement as Hl7.Fhir.Model.Time, reader); // 60
							break;
						case "closingTime":
							result.ClosingTimeElement = new Hl7.Fhir.Model.Time();
							Parse(result.ClosingTimeElement as Hl7.Fhir.Model.Time, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Measure.GroupComponent
		public void Parse(Hl7.Fhir.Model.Measure.GroupComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "population":
							var newItem_population = new Hl7.Fhir.Model.Measure.PopulationComponent();
							Parse(newItem_population, reader); // 60
							result.Population.Add(newItem_population);
							break;
						case "stratifier":
							var newItem_stratifier = new Hl7.Fhir.Model.Measure.StratifierComponent();
							Parse(newItem_stratifier, reader); // 70
							result.Stratifier.Add(newItem_stratifier);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Measure.PopulationComponent
		public void Parse(Hl7.Fhir.Model.Measure.PopulationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "criteria":
							result.Criteria = new Hl7.Fhir.Model.Expression();
							Parse(result.Criteria as Hl7.Fhir.Model.Expression, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Measure.StratifierComponent
		public void Parse(Hl7.Fhir.Model.Measure.StratifierComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "criteria":
							result.Criteria = new Hl7.Fhir.Model.Expression();
							Parse(result.Criteria as Hl7.Fhir.Model.Expression, reader); // 60
							break;
						case "component":
							var newItem_component = new Hl7.Fhir.Model.Measure.ComponentComponent();
							Parse(newItem_component, reader); // 70
							result.Component.Add(newItem_component);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Measure.ComponentComponent
		public void Parse(Hl7.Fhir.Model.Measure.ComponentComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "criteria":
							result.Criteria = new Hl7.Fhir.Model.Expression();
							Parse(result.Criteria as Hl7.Fhir.Model.Expression, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Measure.SupplementalDataComponent
		public void Parse(Hl7.Fhir.Model.Measure.SupplementalDataComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "usage":
							var newItem_usage = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_usage, reader); // 50
							result.Usage.Add(newItem_usage);
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "criteria":
							result.Criteria = new Hl7.Fhir.Model.Expression();
							Parse(result.Criteria as Hl7.Fhir.Model.Expression, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MeasureReport.GroupComponent
		public void Parse(Hl7.Fhir.Model.MeasureReport.GroupComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "population":
							var newItem_population = new Hl7.Fhir.Model.MeasureReport.PopulationComponent();
							Parse(newItem_population, reader); // 50
							result.Population.Add(newItem_population);
							break;
						case "measureScore":
							result.MeasureScore = new Hl7.Fhir.Model.Quantity();
							Parse(result.MeasureScore as Hl7.Fhir.Model.Quantity, reader); // 60
							break;
						case "stratifier":
							var newItem_stratifier = new Hl7.Fhir.Model.MeasureReport.StratifierComponent();
							Parse(newItem_stratifier, reader); // 70
							result.Stratifier.Add(newItem_stratifier);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MeasureReport.PopulationComponent
		public void Parse(Hl7.Fhir.Model.MeasureReport.PopulationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "count":
							result.CountElement = new Hl7.Fhir.Model.Integer();
							Parse(result.CountElement as Hl7.Fhir.Model.Integer, reader); // 50
							break;
						case "subjectResults":
							result.SubjectResults = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.SubjectResults as Hl7.Fhir.Model.ResourceReference, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MeasureReport.StratifierComponent
		public void Parse(Hl7.Fhir.Model.MeasureReport.StratifierComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							var newItem_code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_code, reader); // 40
							result.Code.Add(newItem_code);
							break;
						case "stratum":
							var newItem_stratum = new Hl7.Fhir.Model.MeasureReport.StratifierGroupComponent();
							Parse(newItem_stratum, reader); // 50
							result.Stratum.Add(newItem_stratum);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MeasureReport.StratifierGroupComponent
		public void Parse(Hl7.Fhir.Model.MeasureReport.StratifierGroupComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "value":
							result.Value = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Value as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "component":
							var newItem_component = new Hl7.Fhir.Model.MeasureReport.ComponentComponent();
							Parse(newItem_component, reader); // 50
							result.Component.Add(newItem_component);
							break;
						case "population":
							var newItem_population = new Hl7.Fhir.Model.MeasureReport.StratifierGroupPopulationComponent();
							Parse(newItem_population, reader); // 60
							result.Population.Add(newItem_population);
							break;
						case "measureScore":
							result.MeasureScore = new Hl7.Fhir.Model.Quantity();
							Parse(result.MeasureScore as Hl7.Fhir.Model.Quantity, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MeasureReport.ComponentComponent
		public void Parse(Hl7.Fhir.Model.MeasureReport.ComponentComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "value":
							result.Value = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Value as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MeasureReport.StratifierGroupPopulationComponent
		public void Parse(Hl7.Fhir.Model.MeasureReport.StratifierGroupPopulationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "count":
							result.CountElement = new Hl7.Fhir.Model.Integer();
							Parse(result.CountElement as Hl7.Fhir.Model.Integer, reader); // 50
							break;
						case "subjectResults":
							result.SubjectResults = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.SubjectResults as Hl7.Fhir.Model.ResourceReference, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Medication.IngredientComponent
		public void Parse(Hl7.Fhir.Model.Medication.IngredientComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "itemCodeableConcept":
							result.Item = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Item as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "itemReference":
							result.Item = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Item as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						case "isActive":
							result.IsActiveElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.IsActiveElement as Hl7.Fhir.Model.FhirBoolean, reader); // 50
							break;
						case "strength":
							result.Strength = new Hl7.Fhir.Model.Ratio();
							Parse(result.Strength as Hl7.Fhir.Model.Ratio, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Medication.BatchComponent
		public void Parse(Hl7.Fhir.Model.Medication.BatchComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "lotNumber":
							result.LotNumberElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.LotNumberElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "expirationDate":
							result.ExpirationDateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.ExpirationDateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicationAdministration.PerformerComponent
		public void Parse(Hl7.Fhir.Model.MedicationAdministration.PerformerComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "function":
							result.Function = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Function as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "actor":
							result.Actor = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Actor as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicationAdministration.DosageComponent
		public void Parse(Hl7.Fhir.Model.MedicationAdministration.DosageComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "text":
							result.TextElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TextElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "site":
							result.Site = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Site as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "route":
							result.Route = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Route as Hl7.Fhir.Model.CodeableConcept, reader); // 60
							break;
						case "method":
							result.Method = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Method as Hl7.Fhir.Model.CodeableConcept, reader); // 70
							break;
						case "dose":
							result.Dose = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Dose as Hl7.Fhir.Model.SimpleQuantity, reader); // 80
							break;
						case "rateRatio":
							result.Rate = new Hl7.Fhir.Model.Ratio();
							Parse(result.Rate as Hl7.Fhir.Model.Ratio, reader); // 90
							break;
						case "rateQuantity":
							result.Rate = new Hl7.Fhir.Model.Quantity();
							Parse(result.Rate as Hl7.Fhir.Model.Quantity, reader); // 90
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicationDispense.PerformerComponent
		public void Parse(Hl7.Fhir.Model.MedicationDispense.PerformerComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "function":
							result.Function = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Function as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "actor":
							result.Actor = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Actor as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicationDispense.SubstitutionComponent
		public void Parse(Hl7.Fhir.Model.MedicationDispense.SubstitutionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "wasSubstituted":
							result.WasSubstitutedElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.WasSubstitutedElement as Hl7.Fhir.Model.FhirBoolean, reader); // 40
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "reason":
							var newItem_reason = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_reason, reader); // 60
							result.Reason.Add(newItem_reason);
							break;
						case "responsibleParty":
							var newItem_responsibleParty = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_responsibleParty, reader); // 70
							result.ResponsibleParty.Add(newItem_responsibleParty);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicationKnowledge.RelatedMedicationKnowledgeComponent
		public void Parse(Hl7.Fhir.Model.MedicationKnowledge.RelatedMedicationKnowledgeComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "reference":
							var newItem_reference = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_reference, reader); // 50
							result.Reference.Add(newItem_reference);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicationKnowledge.MonographComponent
		public void Parse(Hl7.Fhir.Model.MedicationKnowledge.MonographComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "source":
							result.Source = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Source as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicationKnowledge.IngredientComponent
		public void Parse(Hl7.Fhir.Model.MedicationKnowledge.IngredientComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "itemCodeableConcept":
							result.Item = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Item as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "itemReference":
							result.Item = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Item as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						case "isActive":
							result.IsActiveElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.IsActiveElement as Hl7.Fhir.Model.FhirBoolean, reader); // 50
							break;
						case "strength":
							result.Strength = new Hl7.Fhir.Model.Ratio();
							Parse(result.Strength as Hl7.Fhir.Model.Ratio, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicationKnowledge.CostComponent
		public void Parse(Hl7.Fhir.Model.MedicationKnowledge.CostComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "source":
							result.SourceElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.SourceElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "cost":
							result.Cost = new Hl7.Fhir.Model.Money();
							Parse(result.Cost as Hl7.Fhir.Model.Money, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicationKnowledge.MonitoringProgramComponent
		public void Parse(Hl7.Fhir.Model.MedicationKnowledge.MonitoringProgramComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicationKnowledge.AdministrationGuidelinesComponent
		public void Parse(Hl7.Fhir.Model.MedicationKnowledge.AdministrationGuidelinesComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "dosage":
							var newItem_dosage = new Hl7.Fhir.Model.MedicationKnowledge.DosageComponent();
							Parse(newItem_dosage, reader); // 40
							result.Dosage.Add(newItem_dosage);
							break;
						case "indicationCodeableConcept":
							result.Indication = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Indication as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "indicationReference":
							result.Indication = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Indication as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						case "patientCharacteristics":
							var newItem_patientCharacteristics = new Hl7.Fhir.Model.MedicationKnowledge.PatientCharacteristicsComponent();
							Parse(newItem_patientCharacteristics, reader); // 60
							result.PatientCharacteristics.Add(newItem_patientCharacteristics);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicationKnowledge.DosageComponent
		public void Parse(Hl7.Fhir.Model.MedicationKnowledge.DosageComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "dosage":
							var newItem_dosage = new Hl7.Fhir.Model.Dosage();
							Parse(newItem_dosage, reader); // 50
							result.Dosage.Add(newItem_dosage);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicationKnowledge.PatientCharacteristicsComponent
		public void Parse(Hl7.Fhir.Model.MedicationKnowledge.PatientCharacteristicsComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "characteristicCodeableConcept":
							result.Characteristic = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Characteristic as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "characteristicQuantity":
							result.Characteristic = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Characteristic as Hl7.Fhir.Model.SimpleQuantity, reader); // 40
							break;
						case "value":
							var newItem_value = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_value, reader); // 50
							result.ValueElement.Add(newItem_value);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicationKnowledge.MedicineClassificationComponent
		public void Parse(Hl7.Fhir.Model.MedicationKnowledge.MedicineClassificationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "classification":
							var newItem_classification = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_classification, reader); // 50
							result.Classification.Add(newItem_classification);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicationKnowledge.PackagingComponent
		public void Parse(Hl7.Fhir.Model.MedicationKnowledge.PackagingComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "quantity":
							result.Quantity = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Quantity as Hl7.Fhir.Model.SimpleQuantity, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicationKnowledge.DrugCharacteristicComponent
		public void Parse(Hl7.Fhir.Model.MedicationKnowledge.DrugCharacteristicComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "valueCodeableConcept":
							result.Value = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Value as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "valueString":
							result.Value = new Hl7.Fhir.Model.FhirString();
							Parse(result.Value as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "valueQuantity":
							result.Value = new Hl7.Fhir.Model.Quantity();
							Parse(result.Value as Hl7.Fhir.Model.Quantity, reader); // 50
							break;
						case "valueBase64Binary":
							result.Value = new Hl7.Fhir.Model.Base64Binary();
							Parse(result.Value as Hl7.Fhir.Model.Base64Binary, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicationKnowledge.RegulatoryComponent
		public void Parse(Hl7.Fhir.Model.MedicationKnowledge.RegulatoryComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "regulatoryAuthority":
							result.RegulatoryAuthority = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.RegulatoryAuthority as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						case "substitution":
							var newItem_substitution = new Hl7.Fhir.Model.MedicationKnowledge.SubstitutionComponent();
							Parse(newItem_substitution, reader); // 50
							result.Substitution.Add(newItem_substitution);
							break;
						case "schedule":
							var newItem_schedule = new Hl7.Fhir.Model.MedicationKnowledge.ScheduleComponent();
							Parse(newItem_schedule, reader); // 60
							result.Schedule.Add(newItem_schedule);
							break;
						case "maxDispense":
							result.MaxDispense = new Hl7.Fhir.Model.MedicationKnowledge.MaxDispenseComponent();
							Parse(result.MaxDispense as Hl7.Fhir.Model.MedicationKnowledge.MaxDispenseComponent, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicationKnowledge.SubstitutionComponent
		public void Parse(Hl7.Fhir.Model.MedicationKnowledge.SubstitutionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "allowed":
							result.AllowedElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.AllowedElement as Hl7.Fhir.Model.FhirBoolean, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicationKnowledge.ScheduleComponent
		public void Parse(Hl7.Fhir.Model.MedicationKnowledge.ScheduleComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "schedule":
							result.Schedule = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Schedule as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicationKnowledge.MaxDispenseComponent
		public void Parse(Hl7.Fhir.Model.MedicationKnowledge.MaxDispenseComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "quantity":
							result.Quantity = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Quantity as Hl7.Fhir.Model.SimpleQuantity, reader); // 40
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Duration();
							Parse(result.Period as Hl7.Fhir.Model.Duration, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicationKnowledge.KineticsComponent
		public void Parse(Hl7.Fhir.Model.MedicationKnowledge.KineticsComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "areaUnderCurve":
							var newItem_areaUnderCurve = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(newItem_areaUnderCurve, reader); // 40
							result.AreaUnderCurve.Add(newItem_areaUnderCurve);
							break;
						case "lethalDose50":
							var newItem_lethalDose50 = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(newItem_lethalDose50, reader); // 50
							result.LethalDose50.Add(newItem_lethalDose50);
							break;
						case "halfLifePeriod":
							result.HalfLifePeriod = new Hl7.Fhir.Model.Duration();
							Parse(result.HalfLifePeriod as Hl7.Fhir.Model.Duration, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicationRequest.DispenseRequestComponent
		public void Parse(Hl7.Fhir.Model.MedicationRequest.DispenseRequestComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "initialFill":
							result.InitialFill = new Hl7.Fhir.Model.MedicationRequest.InitialFillComponent();
							Parse(result.InitialFill as Hl7.Fhir.Model.MedicationRequest.InitialFillComponent, reader); // 40
							break;
						case "dispenseInterval":
							result.DispenseInterval = new Hl7.Fhir.Model.Duration();
							Parse(result.DispenseInterval as Hl7.Fhir.Model.Duration, reader); // 50
							break;
						case "validityPeriod":
							result.ValidityPeriod = new Hl7.Fhir.Model.Period();
							Parse(result.ValidityPeriod as Hl7.Fhir.Model.Period, reader); // 60
							break;
						case "numberOfRepeatsAllowed":
							result.NumberOfRepeatsAllowedElement = new Hl7.Fhir.Model.UnsignedInt();
							Parse(result.NumberOfRepeatsAllowedElement as Hl7.Fhir.Model.UnsignedInt, reader); // 70
							break;
						case "quantity":
							result.Quantity = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Quantity as Hl7.Fhir.Model.SimpleQuantity, reader); // 80
							break;
						case "expectedSupplyDuration":
							result.ExpectedSupplyDuration = new Hl7.Fhir.Model.Duration();
							Parse(result.ExpectedSupplyDuration as Hl7.Fhir.Model.Duration, reader); // 90
							break;
						case "performer":
							result.Performer = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Performer as Hl7.Fhir.Model.ResourceReference, reader); // 100
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicationRequest.InitialFillComponent
		public void Parse(Hl7.Fhir.Model.MedicationRequest.InitialFillComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "quantity":
							result.Quantity = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Quantity as Hl7.Fhir.Model.SimpleQuantity, reader); // 40
							break;
						case "duration":
							result.Duration = new Hl7.Fhir.Model.Duration();
							Parse(result.Duration as Hl7.Fhir.Model.Duration, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicationRequest.SubstitutionComponent
		public void Parse(Hl7.Fhir.Model.MedicationRequest.SubstitutionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "allowedBoolean":
							result.Allowed = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.Allowed as Hl7.Fhir.Model.FhirBoolean, reader); // 40
							break;
						case "allowedCodeableConcept":
							result.Allowed = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Allowed as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "reason":
							result.Reason = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Reason as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicinalProduct.NameComponent
		public void Parse(Hl7.Fhir.Model.MedicinalProduct.NameComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "productName":
							result.ProductNameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ProductNameElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "namePart":
							var newItem_namePart = new Hl7.Fhir.Model.MedicinalProduct.NamePartComponent();
							Parse(newItem_namePart, reader); // 50
							result.NamePart.Add(newItem_namePart);
							break;
						case "countryLanguage":
							var newItem_countryLanguage = new Hl7.Fhir.Model.MedicinalProduct.CountryLanguageComponent();
							Parse(newItem_countryLanguage, reader); // 60
							result.CountryLanguage.Add(newItem_countryLanguage);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicinalProduct.NamePartComponent
		public void Parse(Hl7.Fhir.Model.MedicinalProduct.NamePartComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "part":
							result.PartElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PartElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.Coding();
							Parse(result.Type as Hl7.Fhir.Model.Coding, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicinalProduct.CountryLanguageComponent
		public void Parse(Hl7.Fhir.Model.MedicinalProduct.CountryLanguageComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "country":
							result.Country = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Country as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "jurisdiction":
							result.Jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Jurisdiction as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "language":
							result.Language = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Language as Hl7.Fhir.Model.CodeableConcept, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicinalProduct.ManufacturingBusinessOperationComponent
		public void Parse(Hl7.Fhir.Model.MedicinalProduct.ManufacturingBusinessOperationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "operationType":
							result.OperationType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.OperationType as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "authorisationReferenceNumber":
							result.AuthorisationReferenceNumber = new Hl7.Fhir.Model.Identifier();
							Parse(result.AuthorisationReferenceNumber as Hl7.Fhir.Model.Identifier, reader); // 50
							break;
						case "effectiveDate":
							result.EffectiveDateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.EffectiveDateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 60
							break;
						case "confidentialityIndicator":
							result.ConfidentialityIndicator = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.ConfidentialityIndicator as Hl7.Fhir.Model.CodeableConcept, reader); // 70
							break;
						case "manufacturer":
							var newItem_manufacturer = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_manufacturer, reader); // 80
							result.Manufacturer.Add(newItem_manufacturer);
							break;
						case "regulator":
							result.Regulator = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Regulator as Hl7.Fhir.Model.ResourceReference, reader); // 90
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicinalProduct.SpecialDesignationComponent
		public void Parse(Hl7.Fhir.Model.MedicinalProduct.SpecialDesignationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 40
							result.Identifier.Add(newItem_identifier);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "intendedUse":
							result.IntendedUse = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.IntendedUse as Hl7.Fhir.Model.CodeableConcept, reader); // 60
							break;
						case "indicationCodeableConcept":
							result.Indication = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Indication as Hl7.Fhir.Model.CodeableConcept, reader); // 70
							break;
						case "indicationReference":
							result.Indication = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Indication as Hl7.Fhir.Model.ResourceReference, reader); // 70
							break;
						case "status":
							result.Status = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Status as Hl7.Fhir.Model.CodeableConcept, reader); // 80
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 90
							break;
						case "species":
							result.Species = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Species as Hl7.Fhir.Model.CodeableConcept, reader); // 100
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicinalProductAuthorization.JurisdictionalAuthorizationComponent
		public void Parse(Hl7.Fhir.Model.MedicinalProductAuthorization.JurisdictionalAuthorizationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 40
							result.Identifier.Add(newItem_identifier);
							break;
						case "country":
							result.Country = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Country as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "jurisdiction":
							var newItem_jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_jurisdiction, reader); // 60
							result.Jurisdiction.Add(newItem_jurisdiction);
							break;
						case "legalStatusOfSupply":
							result.LegalStatusOfSupply = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.LegalStatusOfSupply as Hl7.Fhir.Model.CodeableConcept, reader); // 70
							break;
						case "validityPeriod":
							result.ValidityPeriod = new Hl7.Fhir.Model.Period();
							Parse(result.ValidityPeriod as Hl7.Fhir.Model.Period, reader); // 80
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicinalProductAuthorization.ProcedureComponent
		public void Parse(Hl7.Fhir.Model.MedicinalProductAuthorization.ProcedureComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							result.Identifier = new Hl7.Fhir.Model.Identifier();
							Parse(result.Identifier as Hl7.Fhir.Model.Identifier, reader); // 40
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "datePeriod":
							result.Date = new Hl7.Fhir.Model.Period();
							Parse(result.Date as Hl7.Fhir.Model.Period, reader); // 60
							break;
						case "dateDateTime":
							result.Date = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Date as Hl7.Fhir.Model.FhirDateTime, reader); // 60
							break;
						case "application":
							var newItem_application = new Hl7.Fhir.Model.MedicinalProductAuthorization.ProcedureComponent();
							Parse(newItem_application, reader); // 70
							result.Application.Add(newItem_application);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicinalProductContraindication.OtherTherapyComponent
		public void Parse(Hl7.Fhir.Model.MedicinalProductContraindication.OtherTherapyComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "therapyRelationshipType":
							result.TherapyRelationshipType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.TherapyRelationshipType as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "medicationCodeableConcept":
							result.Medication = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Medication as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "medicationReference":
							result.Medication = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Medication as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicinalProductIndication.OtherTherapyComponent
		public void Parse(Hl7.Fhir.Model.MedicinalProductIndication.OtherTherapyComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "therapyRelationshipType":
							result.TherapyRelationshipType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.TherapyRelationshipType as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "medicationCodeableConcept":
							result.Medication = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Medication as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "medicationReference":
							result.Medication = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Medication as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicinalProductIngredient.SpecifiedSubstanceComponent
		public void Parse(Hl7.Fhir.Model.MedicinalProductIngredient.SpecifiedSubstanceComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "group":
							result.Group = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Group as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "confidentiality":
							result.Confidentiality = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Confidentiality as Hl7.Fhir.Model.CodeableConcept, reader); // 60
							break;
						case "strength":
							var newItem_strength = new Hl7.Fhir.Model.MedicinalProductIngredient.StrengthComponent();
							Parse(newItem_strength, reader); // 70
							result.Strength.Add(newItem_strength);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicinalProductIngredient.StrengthComponent
		public void Parse(Hl7.Fhir.Model.MedicinalProductIngredient.StrengthComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "presentation":
							result.Presentation = new Hl7.Fhir.Model.Ratio();
							Parse(result.Presentation as Hl7.Fhir.Model.Ratio, reader); // 40
							break;
						case "presentationLowLimit":
							result.PresentationLowLimit = new Hl7.Fhir.Model.Ratio();
							Parse(result.PresentationLowLimit as Hl7.Fhir.Model.Ratio, reader); // 50
							break;
						case "concentration":
							result.Concentration = new Hl7.Fhir.Model.Ratio();
							Parse(result.Concentration as Hl7.Fhir.Model.Ratio, reader); // 60
							break;
						case "concentrationLowLimit":
							result.ConcentrationLowLimit = new Hl7.Fhir.Model.Ratio();
							Parse(result.ConcentrationLowLimit as Hl7.Fhir.Model.Ratio, reader); // 70
							break;
						case "measurementPoint":
							result.MeasurementPointElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.MeasurementPointElement as Hl7.Fhir.Model.FhirString, reader); // 80
							break;
						case "country":
							var newItem_country = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_country, reader); // 90
							result.Country.Add(newItem_country);
							break;
						case "referenceStrength":
							var newItem_referenceStrength = new Hl7.Fhir.Model.MedicinalProductIngredient.ReferenceStrengthComponent();
							Parse(newItem_referenceStrength, reader); // 100
							result.ReferenceStrength.Add(newItem_referenceStrength);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicinalProductIngredient.ReferenceStrengthComponent
		public void Parse(Hl7.Fhir.Model.MedicinalProductIngredient.ReferenceStrengthComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "substance":
							result.Substance = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Substance as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "strength":
							result.Strength = new Hl7.Fhir.Model.Ratio();
							Parse(result.Strength as Hl7.Fhir.Model.Ratio, reader); // 50
							break;
						case "strengthLowLimit":
							result.StrengthLowLimit = new Hl7.Fhir.Model.Ratio();
							Parse(result.StrengthLowLimit as Hl7.Fhir.Model.Ratio, reader); // 60
							break;
						case "measurementPoint":
							result.MeasurementPointElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.MeasurementPointElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						case "country":
							var newItem_country = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_country, reader); // 80
							result.Country.Add(newItem_country);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicinalProductIngredient.SubstanceComponent
		public void Parse(Hl7.Fhir.Model.MedicinalProductIngredient.SubstanceComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "strength":
							var newItem_strength = new Hl7.Fhir.Model.MedicinalProductIngredient.StrengthComponent();
							Parse(newItem_strength, reader); // 50
							result.Strength.Add(newItem_strength);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicinalProductInteraction.InteractantComponent
		public void Parse(Hl7.Fhir.Model.MedicinalProductInteraction.InteractantComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "itemReference":
							result.Item = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Item as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						case "itemCodeableConcept":
							result.Item = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Item as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicinalProductPackaged.BatchIdentifierComponent
		public void Parse(Hl7.Fhir.Model.MedicinalProductPackaged.BatchIdentifierComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "outerPackaging":
							result.OuterPackaging = new Hl7.Fhir.Model.Identifier();
							Parse(result.OuterPackaging as Hl7.Fhir.Model.Identifier, reader); // 40
							break;
						case "immediatePackaging":
							result.ImmediatePackaging = new Hl7.Fhir.Model.Identifier();
							Parse(result.ImmediatePackaging as Hl7.Fhir.Model.Identifier, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicinalProductPackaged.PackageItemComponent
		public void Parse(Hl7.Fhir.Model.MedicinalProductPackaged.PackageItemComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 40
							result.Identifier.Add(newItem_identifier);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "quantity":
							result.Quantity = new Hl7.Fhir.Model.Quantity();
							Parse(result.Quantity as Hl7.Fhir.Model.Quantity, reader); // 60
							break;
						case "material":
							var newItem_material = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_material, reader); // 70
							result.Material.Add(newItem_material);
							break;
						case "alternateMaterial":
							var newItem_alternateMaterial = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_alternateMaterial, reader); // 80
							result.AlternateMaterial.Add(newItem_alternateMaterial);
							break;
						case "device":
							var newItem_device = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_device, reader); // 90
							result.Device.Add(newItem_device);
							break;
						case "manufacturedItem":
							var newItem_manufacturedItem = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_manufacturedItem, reader); // 100
							result.ManufacturedItem.Add(newItem_manufacturedItem);
							break;
						case "packageItem":
							var newItem_packageItem = new Hl7.Fhir.Model.MedicinalProductPackaged.PackageItemComponent();
							Parse(newItem_packageItem, reader); // 110
							result.PackageItem.Add(newItem_packageItem);
							break;
						case "physicalCharacteristics":
							result.PhysicalCharacteristics = new Hl7.Fhir.Model.ProdCharacteristic();
							Parse(result.PhysicalCharacteristics as Hl7.Fhir.Model.ProdCharacteristic, reader); // 120
							break;
						case "otherCharacteristics":
							var newItem_otherCharacteristics = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_otherCharacteristics, reader); // 130
							result.OtherCharacteristics.Add(newItem_otherCharacteristics);
							break;
						case "shelfLifeStorage":
							var newItem_shelfLifeStorage = new Hl7.Fhir.Model.ProductShelfLife();
							Parse(newItem_shelfLifeStorage, reader); // 140
							result.ShelfLifeStorage.Add(newItem_shelfLifeStorage);
							break;
						case "manufacturer":
							var newItem_manufacturer = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_manufacturer, reader); // 150
							result.Manufacturer.Add(newItem_manufacturer);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicinalProductPharmaceutical.CharacteristicsComponent
		public void Parse(Hl7.Fhir.Model.MedicinalProductPharmaceutical.CharacteristicsComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "status":
							result.Status = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Status as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicinalProductPharmaceutical.RouteOfAdministrationComponent
		public void Parse(Hl7.Fhir.Model.MedicinalProductPharmaceutical.RouteOfAdministrationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "firstDose":
							result.FirstDose = new Hl7.Fhir.Model.Quantity();
							Parse(result.FirstDose as Hl7.Fhir.Model.Quantity, reader); // 50
							break;
						case "maxSingleDose":
							result.MaxSingleDose = new Hl7.Fhir.Model.Quantity();
							Parse(result.MaxSingleDose as Hl7.Fhir.Model.Quantity, reader); // 60
							break;
						case "maxDosePerDay":
							result.MaxDosePerDay = new Hl7.Fhir.Model.Quantity();
							Parse(result.MaxDosePerDay as Hl7.Fhir.Model.Quantity, reader); // 70
							break;
						case "maxDosePerTreatmentPeriod":
							result.MaxDosePerTreatmentPeriod = new Hl7.Fhir.Model.Ratio();
							Parse(result.MaxDosePerTreatmentPeriod as Hl7.Fhir.Model.Ratio, reader); // 80
							break;
						case "maxTreatmentPeriod":
							result.MaxTreatmentPeriod = new Hl7.Fhir.Model.Duration();
							Parse(result.MaxTreatmentPeriod as Hl7.Fhir.Model.Duration, reader); // 90
							break;
						case "targetSpecies":
							var newItem_targetSpecies = new Hl7.Fhir.Model.MedicinalProductPharmaceutical.TargetSpeciesComponent();
							Parse(newItem_targetSpecies, reader); // 100
							result.TargetSpecies.Add(newItem_targetSpecies);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicinalProductPharmaceutical.TargetSpeciesComponent
		public void Parse(Hl7.Fhir.Model.MedicinalProductPharmaceutical.TargetSpeciesComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "withdrawalPeriod":
							var newItem_withdrawalPeriod = new Hl7.Fhir.Model.MedicinalProductPharmaceutical.WithdrawalPeriodComponent();
							Parse(newItem_withdrawalPeriod, reader); // 50
							result.WithdrawalPeriod.Add(newItem_withdrawalPeriod);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicinalProductPharmaceutical.WithdrawalPeriodComponent
		public void Parse(Hl7.Fhir.Model.MedicinalProductPharmaceutical.WithdrawalPeriodComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "tissue":
							result.Tissue = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Tissue as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "value":
							result.Value = new Hl7.Fhir.Model.Quantity();
							Parse(result.Value as Hl7.Fhir.Model.Quantity, reader); // 50
							break;
						case "supportingInformation":
							result.SupportingInformationElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.SupportingInformationElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MessageDefinition.FocusComponent
		public void Parse(Hl7.Fhir.Model.MessageDefinition.FocusComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.CodeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ResourceType>();
							Parse(result.CodeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ResourceType>, reader); // 40
							break;
						case "profile":
							result.ProfileElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.ProfileElement as Hl7.Fhir.Model.Canonical, reader); // 50
							break;
						case "min":
							result.MinElement = new Hl7.Fhir.Model.UnsignedInt();
							Parse(result.MinElement as Hl7.Fhir.Model.UnsignedInt, reader); // 60
							break;
						case "max":
							result.MaxElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.MaxElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MessageDefinition.AllowedResponseComponent
		public void Parse(Hl7.Fhir.Model.MessageDefinition.AllowedResponseComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "message":
							result.MessageElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.MessageElement as Hl7.Fhir.Model.Canonical, reader); // 40
							break;
						case "situation":
							result.Situation = new Hl7.Fhir.Model.Markdown();
							Parse(result.Situation as Hl7.Fhir.Model.Markdown, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MessageHeader.MessageDestinationComponent
		public void Parse(Hl7.Fhir.Model.MessageHeader.MessageDestinationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "target":
							result.Target = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Target as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						case "endpoint":
							result.EndpointElement = new Hl7.Fhir.Model.FhirUrl();
							Parse(result.EndpointElement as Hl7.Fhir.Model.FhirUrl, reader); // 60
							break;
						case "receiver":
							result.Receiver = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Receiver as Hl7.Fhir.Model.ResourceReference, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MessageHeader.MessageSourceComponent
		public void Parse(Hl7.Fhir.Model.MessageHeader.MessageSourceComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "software":
							result.SoftwareElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.SoftwareElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "contact":
							result.Contact = new Hl7.Fhir.Model.ContactPoint();
							Parse(result.Contact as Hl7.Fhir.Model.ContactPoint, reader); // 70
							break;
						case "endpoint":
							result.EndpointElement = new Hl7.Fhir.Model.FhirUrl();
							Parse(result.EndpointElement as Hl7.Fhir.Model.FhirUrl, reader); // 80
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MessageHeader.ResponseComponent
		public void Parse(Hl7.Fhir.Model.MessageHeader.ResponseComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							result.IdentifierElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdentifierElement as Hl7.Fhir.Model.Id, reader); // 40
							break;
						case "code":
							result.CodeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.MessageHeader.ResponseType>();
							Parse(result.CodeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.MessageHeader.ResponseType>, reader); // 50
							break;
						case "details":
							result.Details = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Details as Hl7.Fhir.Model.ResourceReference, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MolecularSequence.ReferenceSeqComponent
		public void Parse(Hl7.Fhir.Model.MolecularSequence.ReferenceSeqComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "chromosome":
							result.Chromosome = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Chromosome as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "genomeBuild":
							result.GenomeBuildElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.GenomeBuildElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "orientation":
							result.OrientationElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.MolecularSequence.orientationType>();
							Parse(result.OrientationElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.MolecularSequence.orientationType>, reader); // 60
							break;
						case "referenceSeqId":
							result.ReferenceSeqId = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.ReferenceSeqId as Hl7.Fhir.Model.CodeableConcept, reader); // 70
							break;
						case "referenceSeqPointer":
							result.ReferenceSeqPointer = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.ReferenceSeqPointer as Hl7.Fhir.Model.ResourceReference, reader); // 80
							break;
						case "referenceSeqString":
							result.ReferenceSeqStringElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ReferenceSeqStringElement as Hl7.Fhir.Model.FhirString, reader); // 90
							break;
						case "strand":
							result.StrandElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.MolecularSequence.strandType>();
							Parse(result.StrandElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.MolecularSequence.strandType>, reader); // 100
							break;
						case "windowStart":
							result.WindowStartElement = new Hl7.Fhir.Model.Integer();
							Parse(result.WindowStartElement as Hl7.Fhir.Model.Integer, reader); // 110
							break;
						case "windowEnd":
							result.WindowEndElement = new Hl7.Fhir.Model.Integer();
							Parse(result.WindowEndElement as Hl7.Fhir.Model.Integer, reader); // 120
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MolecularSequence.VariantComponent
		public void Parse(Hl7.Fhir.Model.MolecularSequence.VariantComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "start":
							result.StartElement = new Hl7.Fhir.Model.Integer();
							Parse(result.StartElement as Hl7.Fhir.Model.Integer, reader); // 40
							break;
						case "end":
							result.EndElement = new Hl7.Fhir.Model.Integer();
							Parse(result.EndElement as Hl7.Fhir.Model.Integer, reader); // 50
							break;
						case "observedAllele":
							result.ObservedAlleleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ObservedAlleleElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "referenceAllele":
							result.ReferenceAlleleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ReferenceAlleleElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						case "cigar":
							result.CigarElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.CigarElement as Hl7.Fhir.Model.FhirString, reader); // 80
							break;
						case "variantPointer":
							result.VariantPointer = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.VariantPointer as Hl7.Fhir.Model.ResourceReference, reader); // 90
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MolecularSequence.QualityComponent
		public void Parse(Hl7.Fhir.Model.MolecularSequence.QualityComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.MolecularSequence.qualityType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.MolecularSequence.qualityType>, reader); // 40
							break;
						case "standardSequence":
							result.StandardSequence = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.StandardSequence as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "start":
							result.StartElement = new Hl7.Fhir.Model.Integer();
							Parse(result.StartElement as Hl7.Fhir.Model.Integer, reader); // 60
							break;
						case "end":
							result.EndElement = new Hl7.Fhir.Model.Integer();
							Parse(result.EndElement as Hl7.Fhir.Model.Integer, reader); // 70
							break;
						case "score":
							result.Score = new Hl7.Fhir.Model.Quantity();
							Parse(result.Score as Hl7.Fhir.Model.Quantity, reader); // 80
							break;
						case "method":
							result.Method = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Method as Hl7.Fhir.Model.CodeableConcept, reader); // 90
							break;
						case "truthTP":
							result.TruthTPElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.TruthTPElement as Hl7.Fhir.Model.FhirDecimal, reader); // 100
							break;
						case "queryTP":
							result.QueryTPElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.QueryTPElement as Hl7.Fhir.Model.FhirDecimal, reader); // 110
							break;
						case "truthFN":
							result.TruthFNElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.TruthFNElement as Hl7.Fhir.Model.FhirDecimal, reader); // 120
							break;
						case "queryFP":
							result.QueryFPElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.QueryFPElement as Hl7.Fhir.Model.FhirDecimal, reader); // 130
							break;
						case "gtFP":
							result.GtFPElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.GtFPElement as Hl7.Fhir.Model.FhirDecimal, reader); // 140
							break;
						case "precision":
							result.PrecisionElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.PrecisionElement as Hl7.Fhir.Model.FhirDecimal, reader); // 150
							break;
						case "recall":
							result.RecallElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.RecallElement as Hl7.Fhir.Model.FhirDecimal, reader); // 160
							break;
						case "fScore":
							result.FScoreElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.FScoreElement as Hl7.Fhir.Model.FhirDecimal, reader); // 170
							break;
						case "roc":
							result.Roc = new Hl7.Fhir.Model.MolecularSequence.RocComponent();
							Parse(result.Roc as Hl7.Fhir.Model.MolecularSequence.RocComponent, reader); // 180
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MolecularSequence.RocComponent
		public void Parse(Hl7.Fhir.Model.MolecularSequence.RocComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "score":
							var newItem_score = new Hl7.Fhir.Model.Integer();
							Parse(newItem_score, reader); // 40
							result.ScoreElement.Add(newItem_score);
							break;
						case "numTP":
							var newItem_numTP = new Hl7.Fhir.Model.Integer();
							Parse(newItem_numTP, reader); // 50
							result.NumTPElement.Add(newItem_numTP);
							break;
						case "numFP":
							var newItem_numFP = new Hl7.Fhir.Model.Integer();
							Parse(newItem_numFP, reader); // 60
							result.NumFPElement.Add(newItem_numFP);
							break;
						case "numFN":
							var newItem_numFN = new Hl7.Fhir.Model.Integer();
							Parse(newItem_numFN, reader); // 70
							result.NumFNElement.Add(newItem_numFN);
							break;
						case "precision":
							var newItem_precision = new Hl7.Fhir.Model.FhirDecimal();
							Parse(newItem_precision, reader); // 80
							result.PrecisionElement.Add(newItem_precision);
							break;
						case "sensitivity":
							var newItem_sensitivity = new Hl7.Fhir.Model.FhirDecimal();
							Parse(newItem_sensitivity, reader); // 90
							result.SensitivityElement.Add(newItem_sensitivity);
							break;
						case "fMeasure":
							var newItem_fMeasure = new Hl7.Fhir.Model.FhirDecimal();
							Parse(newItem_fMeasure, reader); // 100
							result.FMeasureElement.Add(newItem_fMeasure);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MolecularSequence.RepositoryComponent
		public void Parse(Hl7.Fhir.Model.MolecularSequence.RepositoryComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.MolecularSequence.repositoryType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.MolecularSequence.repositoryType>, reader); // 40
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUri, reader); // 50
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "datasetId":
							result.DatasetIdElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DatasetIdElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						case "variantsetId":
							result.VariantsetIdElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VariantsetIdElement as Hl7.Fhir.Model.FhirString, reader); // 80
							break;
						case "readsetId":
							result.ReadsetIdElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ReadsetIdElement as Hl7.Fhir.Model.FhirString, reader); // 90
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MolecularSequence.StructureVariantComponent
		public void Parse(Hl7.Fhir.Model.MolecularSequence.StructureVariantComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "variantType":
							result.VariantType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.VariantType as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "exact":
							result.ExactElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ExactElement as Hl7.Fhir.Model.FhirBoolean, reader); // 50
							break;
						case "length":
							result.LengthElement = new Hl7.Fhir.Model.Integer();
							Parse(result.LengthElement as Hl7.Fhir.Model.Integer, reader); // 60
							break;
						case "outer":
							result.Outer = new Hl7.Fhir.Model.MolecularSequence.OuterComponent();
							Parse(result.Outer as Hl7.Fhir.Model.MolecularSequence.OuterComponent, reader); // 70
							break;
						case "inner":
							result.Inner = new Hl7.Fhir.Model.MolecularSequence.InnerComponent();
							Parse(result.Inner as Hl7.Fhir.Model.MolecularSequence.InnerComponent, reader); // 80
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MolecularSequence.OuterComponent
		public void Parse(Hl7.Fhir.Model.MolecularSequence.OuterComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "start":
							result.StartElement = new Hl7.Fhir.Model.Integer();
							Parse(result.StartElement as Hl7.Fhir.Model.Integer, reader); // 40
							break;
						case "end":
							result.EndElement = new Hl7.Fhir.Model.Integer();
							Parse(result.EndElement as Hl7.Fhir.Model.Integer, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MolecularSequence.InnerComponent
		public void Parse(Hl7.Fhir.Model.MolecularSequence.InnerComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "start":
							result.StartElement = new Hl7.Fhir.Model.Integer();
							Parse(result.StartElement as Hl7.Fhir.Model.Integer, reader); // 40
							break;
						case "end":
							result.EndElement = new Hl7.Fhir.Model.Integer();
							Parse(result.EndElement as Hl7.Fhir.Model.Integer, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.NamingSystem.UniqueIdComponent
		public void Parse(Hl7.Fhir.Model.NamingSystem.UniqueIdComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.NamingSystem.NamingSystemIdentifierType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.NamingSystem.NamingSystemIdentifierType>, reader); // 40
							break;
						case "value":
							result.ValueElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ValueElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "preferred":
							result.PreferredElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.PreferredElement as Hl7.Fhir.Model.FhirBoolean, reader); // 60
							break;
						case "comment":
							result.CommentElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.CommentElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 80
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.NutritionOrder.OralDietComponent
		public void Parse(Hl7.Fhir.Model.NutritionOrder.OralDietComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							var newItem_type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_type, reader); // 40
							result.Type.Add(newItem_type);
							break;
						case "schedule":
							var newItem_schedule = new Hl7.Fhir.Model.Timing();
							Parse(newItem_schedule, reader); // 50
							result.Schedule.Add(newItem_schedule);
							break;
						case "nutrient":
							var newItem_nutrient = new Hl7.Fhir.Model.NutritionOrder.NutrientComponent();
							Parse(newItem_nutrient, reader); // 60
							result.Nutrient.Add(newItem_nutrient);
							break;
						case "texture":
							var newItem_texture = new Hl7.Fhir.Model.NutritionOrder.TextureComponent();
							Parse(newItem_texture, reader); // 70
							result.Texture.Add(newItem_texture);
							break;
						case "fluidConsistencyType":
							var newItem_fluidConsistencyType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_fluidConsistencyType, reader); // 80
							result.FluidConsistencyType.Add(newItem_fluidConsistencyType);
							break;
						case "instruction":
							result.InstructionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.InstructionElement as Hl7.Fhir.Model.FhirString, reader); // 90
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.NutritionOrder.NutrientComponent
		public void Parse(Hl7.Fhir.Model.NutritionOrder.NutrientComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "modifier":
							result.Modifier = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Modifier as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "amount":
							result.Amount = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Amount as Hl7.Fhir.Model.SimpleQuantity, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.NutritionOrder.TextureComponent
		public void Parse(Hl7.Fhir.Model.NutritionOrder.TextureComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "modifier":
							result.Modifier = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Modifier as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "foodType":
							result.FoodType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.FoodType as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.NutritionOrder.SupplementComponent
		public void Parse(Hl7.Fhir.Model.NutritionOrder.SupplementComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "productName":
							result.ProductNameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ProductNameElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "schedule":
							var newItem_schedule = new Hl7.Fhir.Model.Timing();
							Parse(newItem_schedule, reader); // 60
							result.Schedule.Add(newItem_schedule);
							break;
						case "quantity":
							result.Quantity = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Quantity as Hl7.Fhir.Model.SimpleQuantity, reader); // 70
							break;
						case "instruction":
							result.InstructionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.InstructionElement as Hl7.Fhir.Model.FhirString, reader); // 80
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.NutritionOrder.EnteralFormulaComponent
		public void Parse(Hl7.Fhir.Model.NutritionOrder.EnteralFormulaComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "baseFormulaType":
							result.BaseFormulaType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.BaseFormulaType as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "baseFormulaProductName":
							result.BaseFormulaProductNameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.BaseFormulaProductNameElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "additiveType":
							result.AdditiveType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.AdditiveType as Hl7.Fhir.Model.CodeableConcept, reader); // 60
							break;
						case "additiveProductName":
							result.AdditiveProductNameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.AdditiveProductNameElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						case "caloricDensity":
							result.CaloricDensity = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.CaloricDensity as Hl7.Fhir.Model.SimpleQuantity, reader); // 80
							break;
						case "routeofAdministration":
							result.RouteofAdministration = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.RouteofAdministration as Hl7.Fhir.Model.CodeableConcept, reader); // 90
							break;
						case "administration":
							var newItem_administration = new Hl7.Fhir.Model.NutritionOrder.AdministrationComponent();
							Parse(newItem_administration, reader); // 100
							result.Administration.Add(newItem_administration);
							break;
						case "maxVolumeToDeliver":
							result.MaxVolumeToDeliver = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.MaxVolumeToDeliver as Hl7.Fhir.Model.SimpleQuantity, reader); // 110
							break;
						case "administrationInstruction":
							result.AdministrationInstructionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.AdministrationInstructionElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.NutritionOrder.AdministrationComponent
		public void Parse(Hl7.Fhir.Model.NutritionOrder.AdministrationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "schedule":
							result.Schedule = new Hl7.Fhir.Model.Timing();
							Parse(result.Schedule as Hl7.Fhir.Model.Timing, reader); // 40
							break;
						case "quantity":
							result.Quantity = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Quantity as Hl7.Fhir.Model.SimpleQuantity, reader); // 50
							break;
						case "rateQuantity":
							result.Rate = new Hl7.Fhir.Model.Quantity();
							Parse(result.Rate as Hl7.Fhir.Model.Quantity, reader); // 60
							break;
						case "rateRatio":
							result.Rate = new Hl7.Fhir.Model.Ratio();
							Parse(result.Rate as Hl7.Fhir.Model.Ratio, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Observation.ReferenceRangeComponent
		public void Parse(Hl7.Fhir.Model.Observation.ReferenceRangeComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "low":
							result.Low = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Low as Hl7.Fhir.Model.SimpleQuantity, reader); // 40
							break;
						case "high":
							result.High = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.High as Hl7.Fhir.Model.SimpleQuantity, reader); // 50
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 60
							break;
						case "appliesTo":
							var newItem_appliesTo = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_appliesTo, reader); // 70
							result.AppliesTo.Add(newItem_appliesTo);
							break;
						case "age":
							result.Age = new Hl7.Fhir.Model.Range();
							Parse(result.Age as Hl7.Fhir.Model.Range, reader); // 80
							break;
						case "text":
							result.TextElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TextElement as Hl7.Fhir.Model.FhirString, reader); // 90
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Observation.ComponentComponent
		public void Parse(Hl7.Fhir.Model.Observation.ComponentComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "valueQuantity":
							result.Value = new Hl7.Fhir.Model.Quantity();
							Parse(result.Value as Hl7.Fhir.Model.Quantity, reader); // 50
							break;
						case "valueCodeableConcept":
							result.Value = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Value as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "valueString":
							result.Value = new Hl7.Fhir.Model.FhirString();
							Parse(result.Value as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "valueBoolean":
							result.Value = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.Value as Hl7.Fhir.Model.FhirBoolean, reader); // 50
							break;
						case "valueInteger":
							result.Value = new Hl7.Fhir.Model.Integer();
							Parse(result.Value as Hl7.Fhir.Model.Integer, reader); // 50
							break;
						case "valueRange":
							result.Value = new Hl7.Fhir.Model.Range();
							Parse(result.Value as Hl7.Fhir.Model.Range, reader); // 50
							break;
						case "valueRatio":
							result.Value = new Hl7.Fhir.Model.Ratio();
							Parse(result.Value as Hl7.Fhir.Model.Ratio, reader); // 50
							break;
						case "valueSampledData":
							result.Value = new Hl7.Fhir.Model.SampledData();
							Parse(result.Value as Hl7.Fhir.Model.SampledData, reader); // 50
							break;
						case "valueTime":
							result.Value = new Hl7.Fhir.Model.Time();
							Parse(result.Value as Hl7.Fhir.Model.Time, reader); // 50
							break;
						case "valueDateTime":
							result.Value = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Value as Hl7.Fhir.Model.FhirDateTime, reader); // 50
							break;
						case "valuePeriod":
							result.Value = new Hl7.Fhir.Model.Period();
							Parse(result.Value as Hl7.Fhir.Model.Period, reader); // 50
							break;
						case "dataAbsentReason":
							result.DataAbsentReason = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.DataAbsentReason as Hl7.Fhir.Model.CodeableConcept, reader); // 60
							break;
						case "interpretation":
							var newItem_interpretation = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_interpretation, reader); // 70
							result.Interpretation.Add(newItem_interpretation);
							break;
						case "referenceRange":
							var newItem_referenceRange = new Hl7.Fhir.Model.Observation.ReferenceRangeComponent();
							Parse(newItem_referenceRange, reader); // 80
							result.ReferenceRange.Add(newItem_referenceRange);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ObservationDefinition.QuantitativeDetailsComponent
		public void Parse(Hl7.Fhir.Model.ObservationDefinition.QuantitativeDetailsComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "customaryUnit":
							result.CustomaryUnit = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.CustomaryUnit as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "unit":
							result.Unit = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Unit as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "conversionFactor":
							result.ConversionFactorElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.ConversionFactorElement as Hl7.Fhir.Model.FhirDecimal, reader); // 60
							break;
						case "decimalPrecision":
							result.DecimalPrecisionElement = new Hl7.Fhir.Model.Integer();
							Parse(result.DecimalPrecisionElement as Hl7.Fhir.Model.Integer, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ObservationDefinition.QualifiedIntervalComponent
		public void Parse(Hl7.Fhir.Model.ObservationDefinition.QualifiedIntervalComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "category":
							result.CategoryElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ObservationDefinition.ObservationRangeCategory>();
							Parse(result.CategoryElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ObservationDefinition.ObservationRangeCategory>, reader); // 40
							break;
						case "range":
							result.Range = new Hl7.Fhir.Model.Range();
							Parse(result.Range as Hl7.Fhir.Model.Range, reader); // 50
							break;
						case "context":
							result.Context = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Context as Hl7.Fhir.Model.CodeableConcept, reader); // 60
							break;
						case "appliesTo":
							var newItem_appliesTo = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_appliesTo, reader); // 70
							result.AppliesTo.Add(newItem_appliesTo);
							break;
						case "gender":
							result.GenderElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.AdministrativeGender>();
							Parse(result.GenderElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.AdministrativeGender>, reader); // 80
							break;
						case "age":
							result.Age = new Hl7.Fhir.Model.Range();
							Parse(result.Age as Hl7.Fhir.Model.Range, reader); // 90
							break;
						case "gestationalAge":
							result.GestationalAge = new Hl7.Fhir.Model.Range();
							Parse(result.GestationalAge as Hl7.Fhir.Model.Range, reader); // 100
							break;
						case "condition":
							result.ConditionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ConditionElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.OperationDefinition.ParameterComponent
		public void Parse(Hl7.Fhir.Model.OperationDefinition.ParameterComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.Code();
							Parse(result.NameElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "use":
							result.UseElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.OperationParameterUse>();
							Parse(result.UseElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.OperationParameterUse>, reader); // 50
							break;
						case "min":
							result.MinElement = new Hl7.Fhir.Model.Integer();
							Parse(result.MinElement as Hl7.Fhir.Model.Integer, reader); // 60
							break;
						case "max":
							result.MaxElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.MaxElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						case "documentation":
							result.DocumentationElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DocumentationElement as Hl7.Fhir.Model.FhirString, reader); // 80
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FHIRAllTypes>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FHIRAllTypes>, reader); // 90
							break;
						case "targetProfile":
							var newItem_targetProfile = new Hl7.Fhir.Model.Canonical();
							Parse(newItem_targetProfile, reader); // 100
							result.TargetProfileElement.Add(newItem_targetProfile);
							break;
						case "searchType":
							result.SearchTypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.SearchParamType>();
							Parse(result.SearchTypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.SearchParamType>, reader); // 110
							break;
						case "binding":
							result.Binding = new Hl7.Fhir.Model.OperationDefinition.BindingComponent();
							Parse(result.Binding as Hl7.Fhir.Model.OperationDefinition.BindingComponent, reader); // 120
							break;
						case "referencedFrom":
							var newItem_referencedFrom = new Hl7.Fhir.Model.OperationDefinition.ReferencedFromComponent();
							Parse(newItem_referencedFrom, reader); // 130
							result.ReferencedFrom.Add(newItem_referencedFrom);
							break;
						case "part":
							var newItem_part = new Hl7.Fhir.Model.OperationDefinition.ParameterComponent();
							Parse(newItem_part, reader); // 140
							result.Part.Add(newItem_part);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.OperationDefinition.BindingComponent
		public void Parse(Hl7.Fhir.Model.OperationDefinition.BindingComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "strength":
							result.StrengthElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.BindingStrength>();
							Parse(result.StrengthElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.BindingStrength>, reader); // 40
							break;
						case "valueSet":
							result.ValueSetElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.ValueSetElement as Hl7.Fhir.Model.Canonical, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.OperationDefinition.ReferencedFromComponent
		public void Parse(Hl7.Fhir.Model.OperationDefinition.ReferencedFromComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "source":
							result.SourceElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.SourceElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "sourceId":
							result.SourceIdElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.SourceIdElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.OperationDefinition.OverloadComponent
		public void Parse(Hl7.Fhir.Model.OperationDefinition.OverloadComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "parameterName":
							var newItem_parameterName = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_parameterName, reader); // 40
							result.ParameterNameElement.Add(newItem_parameterName);
							break;
						case "comment":
							result.CommentElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.CommentElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.OperationOutcome.IssueComponent
		public void Parse(Hl7.Fhir.Model.OperationOutcome.IssueComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "severity":
							result.SeverityElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.OperationOutcome.IssueSeverity>();
							Parse(result.SeverityElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.OperationOutcome.IssueSeverity>, reader); // 40
							break;
						case "code":
							result.CodeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.OperationOutcome.IssueType>();
							Parse(result.CodeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.OperationOutcome.IssueType>, reader); // 50
							break;
						case "details":
							result.Details = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Details as Hl7.Fhir.Model.CodeableConcept, reader); // 60
							break;
						case "diagnostics":
							result.DiagnosticsElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DiagnosticsElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						case "location":
							var newItem_location = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_location, reader); // 80
							result.LocationElement.Add(newItem_location);
							break;
						case "expression":
							var newItem_expression = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_expression, reader); // 90
							result.ExpressionElement.Add(newItem_expression);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Organization.ContactComponent
		public void Parse(Hl7.Fhir.Model.Organization.ContactComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "purpose":
							result.Purpose = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Purpose as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "name":
							result.Name = new Hl7.Fhir.Model.HumanName();
							Parse(result.Name as Hl7.Fhir.Model.HumanName, reader); // 50
							break;
						case "telecom":
							var newItem_telecom = new Hl7.Fhir.Model.ContactPoint();
							Parse(newItem_telecom, reader); // 60
							result.Telecom.Add(newItem_telecom);
							break;
						case "address":
							result.Address = new Hl7.Fhir.Model.Address();
							Parse(result.Address as Hl7.Fhir.Model.Address, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Parameters.ParameterComponent
		public void Parse(Hl7.Fhir.Model.Parameters.ParameterComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "valueBase64Binary":
							result.Value = new Hl7.Fhir.Model.Base64Binary();
							Parse(result.Value as Hl7.Fhir.Model.Base64Binary, reader); // 50
							break;
						case "valueBoolean":
							result.Value = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.Value as Hl7.Fhir.Model.FhirBoolean, reader); // 50
							break;
						case "valueCanonical":
							result.Value = new Hl7.Fhir.Model.Canonical();
							Parse(result.Value as Hl7.Fhir.Model.Canonical, reader); // 50
							break;
						case "valueCode":
							result.Value = new Hl7.Fhir.Model.Code();
							Parse(result.Value as Hl7.Fhir.Model.Code, reader); // 50
							break;
						case "valueDate":
							result.Value = new Hl7.Fhir.Model.Date();
							Parse(result.Value as Hl7.Fhir.Model.Date, reader); // 50
							break;
						case "valueDateTime":
							result.Value = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Value as Hl7.Fhir.Model.FhirDateTime, reader); // 50
							break;
						case "valueDecimal":
							result.Value = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.Value as Hl7.Fhir.Model.FhirDecimal, reader); // 50
							break;
						case "valueId":
							result.Value = new Hl7.Fhir.Model.Id();
							Parse(result.Value as Hl7.Fhir.Model.Id, reader); // 50
							break;
						case "valueInstant":
							result.Value = new Hl7.Fhir.Model.Instant();
							Parse(result.Value as Hl7.Fhir.Model.Instant, reader); // 50
							break;
						case "valueInteger":
							result.Value = new Hl7.Fhir.Model.Integer();
							Parse(result.Value as Hl7.Fhir.Model.Integer, reader); // 50
							break;
						case "valueMarkdown":
							result.Value = new Hl7.Fhir.Model.Markdown();
							Parse(result.Value as Hl7.Fhir.Model.Markdown, reader); // 50
							break;
						case "valueOid":
							result.Value = new Hl7.Fhir.Model.Oid();
							Parse(result.Value as Hl7.Fhir.Model.Oid, reader); // 50
							break;
						case "valuePositiveInt":
							result.Value = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.Value as Hl7.Fhir.Model.PositiveInt, reader); // 50
							break;
						case "valueString":
							result.Value = new Hl7.Fhir.Model.FhirString();
							Parse(result.Value as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "valueTime":
							result.Value = new Hl7.Fhir.Model.Time();
							Parse(result.Value as Hl7.Fhir.Model.Time, reader); // 50
							break;
						case "valueUnsignedInt":
							result.Value = new Hl7.Fhir.Model.UnsignedInt();
							Parse(result.Value as Hl7.Fhir.Model.UnsignedInt, reader); // 50
							break;
						case "valueUri":
							result.Value = new Hl7.Fhir.Model.FhirUri();
							Parse(result.Value as Hl7.Fhir.Model.FhirUri, reader); // 50
							break;
						case "valueUrl":
							result.Value = new Hl7.Fhir.Model.FhirUrl();
							Parse(result.Value as Hl7.Fhir.Model.FhirUrl, reader); // 50
							break;
						case "valueUuid":
							result.Value = new Hl7.Fhir.Model.Uuid();
							Parse(result.Value as Hl7.Fhir.Model.Uuid, reader); // 50
							break;
						case "valueAddress":
							result.Value = new Hl7.Fhir.Model.Address();
							Parse(result.Value as Hl7.Fhir.Model.Address, reader); // 50
							break;
						case "valueAge":
							result.Value = new Hl7.Fhir.Model.Age();
							Parse(result.Value as Hl7.Fhir.Model.Age, reader); // 50
							break;
						case "valueAnnotation":
							result.Value = new Hl7.Fhir.Model.Annotation();
							Parse(result.Value as Hl7.Fhir.Model.Annotation, reader); // 50
							break;
						case "valueAttachment":
							result.Value = new Hl7.Fhir.Model.Attachment();
							Parse(result.Value as Hl7.Fhir.Model.Attachment, reader); // 50
							break;
						case "valueCodeableConcept":
							result.Value = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Value as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "valueCoding":
							result.Value = new Hl7.Fhir.Model.Coding();
							Parse(result.Value as Hl7.Fhir.Model.Coding, reader); // 50
							break;
						case "valueContactPoint":
							result.Value = new Hl7.Fhir.Model.ContactPoint();
							Parse(result.Value as Hl7.Fhir.Model.ContactPoint, reader); // 50
							break;
						case "valueCount":
							result.Value = new Hl7.Fhir.Model.Count();
							Parse(result.Value as Hl7.Fhir.Model.Count, reader); // 50
							break;
						case "valueDistance":
							result.Value = new Hl7.Fhir.Model.Distance();
							Parse(result.Value as Hl7.Fhir.Model.Distance, reader); // 50
							break;
						case "valueDuration":
							result.Value = new Hl7.Fhir.Model.Duration();
							Parse(result.Value as Hl7.Fhir.Model.Duration, reader); // 50
							break;
						case "valueHumanName":
							result.Value = new Hl7.Fhir.Model.HumanName();
							Parse(result.Value as Hl7.Fhir.Model.HumanName, reader); // 50
							break;
						case "valueIdentifier":
							result.Value = new Hl7.Fhir.Model.Identifier();
							Parse(result.Value as Hl7.Fhir.Model.Identifier, reader); // 50
							break;
						case "valueMoney":
							result.Value = new Hl7.Fhir.Model.Money();
							Parse(result.Value as Hl7.Fhir.Model.Money, reader); // 50
							break;
						case "valuePeriod":
							result.Value = new Hl7.Fhir.Model.Period();
							Parse(result.Value as Hl7.Fhir.Model.Period, reader); // 50
							break;
						case "valueQuantity":
							result.Value = new Hl7.Fhir.Model.Quantity();
							Parse(result.Value as Hl7.Fhir.Model.Quantity, reader); // 50
							break;
						case "valueRange":
							result.Value = new Hl7.Fhir.Model.Range();
							Parse(result.Value as Hl7.Fhir.Model.Range, reader); // 50
							break;
						case "valueRatio":
							result.Value = new Hl7.Fhir.Model.Ratio();
							Parse(result.Value as Hl7.Fhir.Model.Ratio, reader); // 50
							break;
						case "valueReference":
							result.Value = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Value as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						case "valueSampledData":
							result.Value = new Hl7.Fhir.Model.SampledData();
							Parse(result.Value as Hl7.Fhir.Model.SampledData, reader); // 50
							break;
						case "valueSignature":
							result.Value = new Hl7.Fhir.Model.Signature();
							Parse(result.Value as Hl7.Fhir.Model.Signature, reader); // 50
							break;
						case "valueTiming":
							result.Value = new Hl7.Fhir.Model.Timing();
							Parse(result.Value as Hl7.Fhir.Model.Timing, reader); // 50
							break;
						case "valueContactDetail":
							result.Value = new Hl7.Fhir.Model.ContactDetail();
							Parse(result.Value as Hl7.Fhir.Model.ContactDetail, reader); // 50
							break;
						case "valueContributor":
							result.Value = new Hl7.Fhir.Model.Contributor();
							Parse(result.Value as Hl7.Fhir.Model.Contributor, reader); // 50
							break;
						case "valueDataRequirement":
							result.Value = new Hl7.Fhir.Model.DataRequirement();
							Parse(result.Value as Hl7.Fhir.Model.DataRequirement, reader); // 50
							break;
						case "valueExpression":
							result.Value = new Hl7.Fhir.Model.Expression();
							Parse(result.Value as Hl7.Fhir.Model.Expression, reader); // 50
							break;
						case "valueParameterDefinition":
							result.Value = new Hl7.Fhir.Model.ParameterDefinition();
							Parse(result.Value as Hl7.Fhir.Model.ParameterDefinition, reader); // 50
							break;
						case "valueRelatedArtifact":
							result.Value = new Hl7.Fhir.Model.RelatedArtifact();
							Parse(result.Value as Hl7.Fhir.Model.RelatedArtifact, reader); // 50
							break;
						case "valueTriggerDefinition":
							result.Value = new Hl7.Fhir.Model.TriggerDefinition();
							Parse(result.Value as Hl7.Fhir.Model.TriggerDefinition, reader); // 50
							break;
						case "valueUsageContext":
							result.Value = new Hl7.Fhir.Model.UsageContext();
							Parse(result.Value as Hl7.Fhir.Model.UsageContext, reader); // 50
							break;
						case "valueDosage":
							result.Value = new Hl7.Fhir.Model.Dosage();
							Parse(result.Value as Hl7.Fhir.Model.Dosage, reader); // 50
							break;
						case "valueMeta":
							result.Value = new Hl7.Fhir.Model.Meta();
							Parse(result.Value as Hl7.Fhir.Model.Meta, reader); // 50
							break;
						case "resource":
							// FirstChildOf(reader); // 60
							var ResourceResource = Parse(reader);
							result.Resource = ResourceResource;
							reader.Read();
							break;
						case "part":
							var newItem_part = new Hl7.Fhir.Model.Parameters.ParameterComponent();
							Parse(newItem_part, reader); // 70
							result.Part.Add(newItem_part);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Patient.ContactComponent
		public void Parse(Hl7.Fhir.Model.Patient.ContactComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "relationship":
							var newItem_relationship = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_relationship, reader); // 40
							result.Relationship.Add(newItem_relationship);
							break;
						case "name":
							result.Name = new Hl7.Fhir.Model.HumanName();
							Parse(result.Name as Hl7.Fhir.Model.HumanName, reader); // 50
							break;
						case "telecom":
							var newItem_telecom = new Hl7.Fhir.Model.ContactPoint();
							Parse(newItem_telecom, reader); // 60
							result.Telecom.Add(newItem_telecom);
							break;
						case "address":
							result.Address = new Hl7.Fhir.Model.Address();
							Parse(result.Address as Hl7.Fhir.Model.Address, reader); // 70
							break;
						case "gender":
							result.GenderElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.AdministrativeGender>();
							Parse(result.GenderElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.AdministrativeGender>, reader); // 80
							break;
						case "organization":
							result.Organization = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Organization as Hl7.Fhir.Model.ResourceReference, reader); // 90
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 100
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Patient.CommunicationComponent
		public void Parse(Hl7.Fhir.Model.Patient.CommunicationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "language":
							result.Language = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Language as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "preferred":
							result.PreferredElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.PreferredElement as Hl7.Fhir.Model.FhirBoolean, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Patient.LinkComponent
		public void Parse(Hl7.Fhir.Model.Patient.LinkComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "other":
							result.Other = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Other as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Patient.LinkType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Patient.LinkType>, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.PaymentReconciliation.DetailsComponent
		public void Parse(Hl7.Fhir.Model.PaymentReconciliation.DetailsComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							result.Identifier = new Hl7.Fhir.Model.Identifier();
							Parse(result.Identifier as Hl7.Fhir.Model.Identifier, reader); // 40
							break;
						case "predecessor":
							result.Predecessor = new Hl7.Fhir.Model.Identifier();
							Parse(result.Predecessor as Hl7.Fhir.Model.Identifier, reader); // 50
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 60
							break;
						case "request":
							result.Request = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Request as Hl7.Fhir.Model.ResourceReference, reader); // 70
							break;
						case "submitter":
							result.Submitter = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Submitter as Hl7.Fhir.Model.ResourceReference, reader); // 80
							break;
						case "response":
							result.Response = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Response as Hl7.Fhir.Model.ResourceReference, reader); // 90
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.Date();
							Parse(result.DateElement as Hl7.Fhir.Model.Date, reader); // 100
							break;
						case "responsible":
							result.Responsible = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Responsible as Hl7.Fhir.Model.ResourceReference, reader); // 110
							break;
						case "payee":
							result.Payee = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Payee as Hl7.Fhir.Model.ResourceReference, reader); // 120
							break;
						case "amount":
							result.Amount = new Hl7.Fhir.Model.Money();
							Parse(result.Amount as Hl7.Fhir.Model.Money, reader); // 130
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.PaymentReconciliation.NotesComponent
		public void Parse(Hl7.Fhir.Model.PaymentReconciliation.NotesComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.NoteType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.NoteType>, reader); // 40
							break;
						case "text":
							result.TextElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TextElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Person.LinkComponent
		public void Parse(Hl7.Fhir.Model.Person.LinkComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "target":
							result.Target = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Target as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						case "assurance":
							result.AssuranceElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Person.IdentityAssuranceLevel>();
							Parse(result.AssuranceElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Person.IdentityAssuranceLevel>, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.PlanDefinition.GoalComponent
		public void Parse(Hl7.Fhir.Model.PlanDefinition.GoalComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "category":
							result.Category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Category as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "description":
							result.Description = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Description as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "priority":
							result.Priority = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Priority as Hl7.Fhir.Model.CodeableConcept, reader); // 60
							break;
						case "start":
							result.Start = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Start as Hl7.Fhir.Model.CodeableConcept, reader); // 70
							break;
						case "addresses":
							var newItem_addresses = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_addresses, reader); // 80
							result.Addresses.Add(newItem_addresses);
							break;
						case "documentation":
							var newItem_documentation = new Hl7.Fhir.Model.RelatedArtifact();
							Parse(newItem_documentation, reader); // 90
							result.Documentation.Add(newItem_documentation);
							break;
						case "target":
							var newItem_target = new Hl7.Fhir.Model.PlanDefinition.TargetComponent();
							Parse(newItem_target, reader); // 100
							result.Target.Add(newItem_target);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.PlanDefinition.TargetComponent
		public void Parse(Hl7.Fhir.Model.PlanDefinition.TargetComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "measure":
							result.Measure = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Measure as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "detailQuantity":
							result.Detail = new Hl7.Fhir.Model.Quantity();
							Parse(result.Detail as Hl7.Fhir.Model.Quantity, reader); // 50
							break;
						case "detailRange":
							result.Detail = new Hl7.Fhir.Model.Range();
							Parse(result.Detail as Hl7.Fhir.Model.Range, reader); // 50
							break;
						case "detailCodeableConcept":
							result.Detail = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Detail as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "due":
							result.Due = new Hl7.Fhir.Model.Duration();
							Parse(result.Due as Hl7.Fhir.Model.Duration, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.PlanDefinition.ActionComponent
		public void Parse(Hl7.Fhir.Model.PlanDefinition.ActionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "prefix":
							result.PrefixElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PrefixElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "textEquivalent":
							result.TextEquivalentElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TextEquivalentElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						case "priority":
							result.PriorityElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestPriority>();
							Parse(result.PriorityElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestPriority>, reader); // 80
							break;
						case "code":
							var newItem_code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_code, reader); // 90
							result.Code.Add(newItem_code);
							break;
						case "reason":
							var newItem_reason = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_reason, reader); // 100
							result.Reason.Add(newItem_reason);
							break;
						case "documentation":
							var newItem_documentation = new Hl7.Fhir.Model.RelatedArtifact();
							Parse(newItem_documentation, reader); // 110
							result.Documentation.Add(newItem_documentation);
							break;
						case "goalId":
							var newItem_goalId = new Hl7.Fhir.Model.Id();
							Parse(newItem_goalId, reader); // 120
							result.GoalIdElement.Add(newItem_goalId);
							break;
						case "subjectCodeableConcept":
							result.Subject = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Subject as Hl7.Fhir.Model.CodeableConcept, reader); // 130
							break;
						case "subjectReference":
							result.Subject = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Subject as Hl7.Fhir.Model.ResourceReference, reader); // 130
							break;
						case "trigger":
							var newItem_trigger = new Hl7.Fhir.Model.TriggerDefinition();
							Parse(newItem_trigger, reader); // 140
							result.Trigger.Add(newItem_trigger);
							break;
						case "condition":
							var newItem_condition = new Hl7.Fhir.Model.PlanDefinition.ConditionComponent();
							Parse(newItem_condition, reader); // 150
							result.Condition.Add(newItem_condition);
							break;
						case "input":
							var newItem_input = new Hl7.Fhir.Model.DataRequirement();
							Parse(newItem_input, reader); // 160
							result.Input.Add(newItem_input);
							break;
						case "output":
							var newItem_output = new Hl7.Fhir.Model.DataRequirement();
							Parse(newItem_output, reader); // 170
							result.Output.Add(newItem_output);
							break;
						case "relatedAction":
							var newItem_relatedAction = new Hl7.Fhir.Model.PlanDefinition.RelatedActionComponent();
							Parse(newItem_relatedAction, reader); // 180
							result.RelatedAction.Add(newItem_relatedAction);
							break;
						case "timingDateTime":
							result.Timing = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Timing as Hl7.Fhir.Model.FhirDateTime, reader); // 190
							break;
						case "timingAge":
							result.Timing = new Hl7.Fhir.Model.Age();
							Parse(result.Timing as Hl7.Fhir.Model.Age, reader); // 190
							break;
						case "timingPeriod":
							result.Timing = new Hl7.Fhir.Model.Period();
							Parse(result.Timing as Hl7.Fhir.Model.Period, reader); // 190
							break;
						case "timingDuration":
							result.Timing = new Hl7.Fhir.Model.Duration();
							Parse(result.Timing as Hl7.Fhir.Model.Duration, reader); // 190
							break;
						case "timingRange":
							result.Timing = new Hl7.Fhir.Model.Range();
							Parse(result.Timing as Hl7.Fhir.Model.Range, reader); // 190
							break;
						case "timingTiming":
							result.Timing = new Hl7.Fhir.Model.Timing();
							Parse(result.Timing as Hl7.Fhir.Model.Timing, reader); // 190
							break;
						case "participant":
							var newItem_participant = new Hl7.Fhir.Model.PlanDefinition.ParticipantComponent();
							Parse(newItem_participant, reader); // 200
							result.Participant.Add(newItem_participant);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 210
							break;
						case "groupingBehavior":
							result.GroupingBehaviorElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ActionGroupingBehavior>();
							Parse(result.GroupingBehaviorElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ActionGroupingBehavior>, reader); // 220
							break;
						case "selectionBehavior":
							result.SelectionBehaviorElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ActionSelectionBehavior>();
							Parse(result.SelectionBehaviorElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ActionSelectionBehavior>, reader); // 230
							break;
						case "requiredBehavior":
							result.RequiredBehaviorElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ActionRequiredBehavior>();
							Parse(result.RequiredBehaviorElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ActionRequiredBehavior>, reader); // 240
							break;
						case "precheckBehavior":
							result.PrecheckBehaviorElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ActionPrecheckBehavior>();
							Parse(result.PrecheckBehaviorElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ActionPrecheckBehavior>, reader); // 250
							break;
						case "cardinalityBehavior":
							result.CardinalityBehaviorElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ActionCardinalityBehavior>();
							Parse(result.CardinalityBehaviorElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ActionCardinalityBehavior>, reader); // 260
							break;
						case "definitionCanonical":
							result.Definition = new Hl7.Fhir.Model.Canonical();
							Parse(result.Definition as Hl7.Fhir.Model.Canonical, reader); // 270
							break;
						case "definitionUri":
							result.Definition = new Hl7.Fhir.Model.FhirUri();
							Parse(result.Definition as Hl7.Fhir.Model.FhirUri, reader); // 270
							break;
						case "transform":
							result.TransformElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.TransformElement as Hl7.Fhir.Model.Canonical, reader); // 280
							break;
						case "dynamicValue":
							var newItem_dynamicValue = new Hl7.Fhir.Model.PlanDefinition.DynamicValueComponent();
							Parse(newItem_dynamicValue, reader); // 290
							result.DynamicValue.Add(newItem_dynamicValue);
							break;
						case "action":
							var newItem_action = new Hl7.Fhir.Model.PlanDefinition.ActionComponent();
							Parse(newItem_action, reader); // 300
							result.Action.Add(newItem_action);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.PlanDefinition.ConditionComponent
		public void Parse(Hl7.Fhir.Model.PlanDefinition.ConditionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "kind":
							result.KindElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ActionConditionKind>();
							Parse(result.KindElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ActionConditionKind>, reader); // 40
							break;
						case "expression":
							result.Expression = new Hl7.Fhir.Model.Expression();
							Parse(result.Expression as Hl7.Fhir.Model.Expression, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.PlanDefinition.RelatedActionComponent
		public void Parse(Hl7.Fhir.Model.PlanDefinition.RelatedActionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "actionId":
							result.ActionIdElement = new Hl7.Fhir.Model.Id();
							Parse(result.ActionIdElement as Hl7.Fhir.Model.Id, reader); // 40
							break;
						case "relationship":
							result.RelationshipElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ActionRelationshipType>();
							Parse(result.RelationshipElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ActionRelationshipType>, reader); // 50
							break;
						case "offsetDuration":
							result.Offset = new Hl7.Fhir.Model.Duration();
							Parse(result.Offset as Hl7.Fhir.Model.Duration, reader); // 60
							break;
						case "offsetRange":
							result.Offset = new Hl7.Fhir.Model.Range();
							Parse(result.Offset as Hl7.Fhir.Model.Range, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.PlanDefinition.ParticipantComponent
		public void Parse(Hl7.Fhir.Model.PlanDefinition.ParticipantComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ActionParticipantType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ActionParticipantType>, reader); // 40
							break;
						case "role":
							result.Role = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Role as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.PlanDefinition.DynamicValueComponent
		public void Parse(Hl7.Fhir.Model.PlanDefinition.DynamicValueComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "path":
							result.PathElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PathElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "expression":
							result.Expression = new Hl7.Fhir.Model.Expression();
							Parse(result.Expression as Hl7.Fhir.Model.Expression, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Practitioner.QualificationComponent
		public void Parse(Hl7.Fhir.Model.Practitioner.QualificationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 40
							result.Identifier.Add(newItem_identifier);
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 60
							break;
						case "issuer":
							result.Issuer = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Issuer as Hl7.Fhir.Model.ResourceReference, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.PractitionerRole.AvailableTimeComponent
		public void Parse(Hl7.Fhir.Model.PractitionerRole.AvailableTimeComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "daysOfWeek":
							var newItem_daysOfWeek = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DaysOfWeek>();
							Parse(newItem_daysOfWeek, reader); // 40
							result.DaysOfWeekElement.Add(newItem_daysOfWeek);
							break;
						case "allDay":
							result.AllDayElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.AllDayElement as Hl7.Fhir.Model.FhirBoolean, reader); // 50
							break;
						case "availableStartTime":
							result.AvailableStartTimeElement = new Hl7.Fhir.Model.Time();
							Parse(result.AvailableStartTimeElement as Hl7.Fhir.Model.Time, reader); // 60
							break;
						case "availableEndTime":
							result.AvailableEndTimeElement = new Hl7.Fhir.Model.Time();
							Parse(result.AvailableEndTimeElement as Hl7.Fhir.Model.Time, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.PractitionerRole.NotAvailableComponent
		public void Parse(Hl7.Fhir.Model.PractitionerRole.NotAvailableComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "during":
							result.During = new Hl7.Fhir.Model.Period();
							Parse(result.During as Hl7.Fhir.Model.Period, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Procedure.PerformerComponent
		public void Parse(Hl7.Fhir.Model.Procedure.PerformerComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "function":
							result.Function = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Function as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "actor":
							result.Actor = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Actor as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						case "onBehalfOf":
							result.OnBehalfOf = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.OnBehalfOf as Hl7.Fhir.Model.ResourceReference, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Procedure.FocalDeviceComponent
		public void Parse(Hl7.Fhir.Model.Procedure.FocalDeviceComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "action":
							result.Action = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Action as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "manipulated":
							result.Manipulated = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Manipulated as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Provenance.AgentComponent
		public void Parse(Hl7.Fhir.Model.Provenance.AgentComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "role":
							var newItem_role = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_role, reader); // 50
							result.Role.Add(newItem_role);
							break;
						case "who":
							result.Who = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Who as Hl7.Fhir.Model.ResourceReference, reader); // 60
							break;
						case "onBehalfOf":
							result.OnBehalfOf = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.OnBehalfOf as Hl7.Fhir.Model.ResourceReference, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Provenance.EntityComponent
		public void Parse(Hl7.Fhir.Model.Provenance.EntityComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "role":
							result.RoleElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Provenance.ProvenanceEntityRole>();
							Parse(result.RoleElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Provenance.ProvenanceEntityRole>, reader); // 40
							break;
						case "what":
							result.What = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.What as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						case "agent":
							var newItem_agent = new Hl7.Fhir.Model.Provenance.AgentComponent();
							Parse(newItem_agent, reader); // 60
							result.Agent.Add(newItem_agent);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Questionnaire.ItemComponent
		public void Parse(Hl7.Fhir.Model.Questionnaire.ItemComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "linkId":
							result.LinkIdElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.LinkIdElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "definition":
							result.DefinitionElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.DefinitionElement as Hl7.Fhir.Model.FhirUri, reader); // 50
							break;
						case "code":
							var newItem_code = new Hl7.Fhir.Model.Coding();
							Parse(newItem_code, reader); // 60
							result.Code.Add(newItem_code);
							break;
						case "prefix":
							result.PrefixElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PrefixElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						case "text":
							result.TextElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TextElement as Hl7.Fhir.Model.FhirString, reader); // 80
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Questionnaire.QuestionnaireItemType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Questionnaire.QuestionnaireItemType>, reader); // 90
							break;
						case "enableWhen":
							var newItem_enableWhen = new Hl7.Fhir.Model.Questionnaire.EnableWhenComponent();
							Parse(newItem_enableWhen, reader); // 100
							result.EnableWhen.Add(newItem_enableWhen);
							break;
						case "enableBehavior":
							result.EnableBehaviorElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Questionnaire.EnableWhenBehavior>();
							Parse(result.EnableBehaviorElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Questionnaire.EnableWhenBehavior>, reader); // 110
							break;
						case "required":
							result.RequiredElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.RequiredElement as Hl7.Fhir.Model.FhirBoolean, reader); // 120
							break;
						case "repeats":
							result.RepeatsElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.RepeatsElement as Hl7.Fhir.Model.FhirBoolean, reader); // 130
							break;
						case "readOnly":
							result.ReadOnlyElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ReadOnlyElement as Hl7.Fhir.Model.FhirBoolean, reader); // 140
							break;
						case "maxLength":
							result.MaxLengthElement = new Hl7.Fhir.Model.Integer();
							Parse(result.MaxLengthElement as Hl7.Fhir.Model.Integer, reader); // 150
							break;
						case "answerValueSet":
							result.AnswerValueSetElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.AnswerValueSetElement as Hl7.Fhir.Model.Canonical, reader); // 160
							break;
						case "answerOption":
							var newItem_answerOption = new Hl7.Fhir.Model.Questionnaire.AnswerOptionComponent();
							Parse(newItem_answerOption, reader); // 170
							result.AnswerOption.Add(newItem_answerOption);
							break;
						case "initial":
							var newItem_initial = new Hl7.Fhir.Model.Questionnaire.InitialComponent();
							Parse(newItem_initial, reader); // 180
							result.Initial.Add(newItem_initial);
							break;
						case "item":
							var newItem_item = new Hl7.Fhir.Model.Questionnaire.ItemComponent();
							Parse(newItem_item, reader); // 190
							result.Item.Add(newItem_item);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Questionnaire.EnableWhenComponent
		public void Parse(Hl7.Fhir.Model.Questionnaire.EnableWhenComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "question":
							result.QuestionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.QuestionElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "operator":
							result.OperatorElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Questionnaire.QuestionnaireItemOperator>();
							Parse(result.OperatorElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Questionnaire.QuestionnaireItemOperator>, reader); // 50
							break;
						case "answerBoolean":
							result.Answer = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.Answer as Hl7.Fhir.Model.FhirBoolean, reader); // 60
							break;
						case "answerDecimal":
							result.Answer = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.Answer as Hl7.Fhir.Model.FhirDecimal, reader); // 60
							break;
						case "answerInteger":
							result.Answer = new Hl7.Fhir.Model.Integer();
							Parse(result.Answer as Hl7.Fhir.Model.Integer, reader); // 60
							break;
						case "answerDate":
							result.Answer = new Hl7.Fhir.Model.Date();
							Parse(result.Answer as Hl7.Fhir.Model.Date, reader); // 60
							break;
						case "answerDateTime":
							result.Answer = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Answer as Hl7.Fhir.Model.FhirDateTime, reader); // 60
							break;
						case "answerTime":
							result.Answer = new Hl7.Fhir.Model.Time();
							Parse(result.Answer as Hl7.Fhir.Model.Time, reader); // 60
							break;
						case "answerString":
							result.Answer = new Hl7.Fhir.Model.FhirString();
							Parse(result.Answer as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "answerCoding":
							result.Answer = new Hl7.Fhir.Model.Coding();
							Parse(result.Answer as Hl7.Fhir.Model.Coding, reader); // 60
							break;
						case "answerQuantity":
							result.Answer = new Hl7.Fhir.Model.Quantity();
							Parse(result.Answer as Hl7.Fhir.Model.Quantity, reader); // 60
							break;
						case "answerReference":
							result.Answer = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Answer as Hl7.Fhir.Model.ResourceReference, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Questionnaire.AnswerOptionComponent
		public void Parse(Hl7.Fhir.Model.Questionnaire.AnswerOptionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "valueInteger":
							result.Value = new Hl7.Fhir.Model.Integer();
							Parse(result.Value as Hl7.Fhir.Model.Integer, reader); // 40
							break;
						case "valueDate":
							result.Value = new Hl7.Fhir.Model.Date();
							Parse(result.Value as Hl7.Fhir.Model.Date, reader); // 40
							break;
						case "valueTime":
							result.Value = new Hl7.Fhir.Model.Time();
							Parse(result.Value as Hl7.Fhir.Model.Time, reader); // 40
							break;
						case "valueString":
							result.Value = new Hl7.Fhir.Model.FhirString();
							Parse(result.Value as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "valueCoding":
							result.Value = new Hl7.Fhir.Model.Coding();
							Parse(result.Value as Hl7.Fhir.Model.Coding, reader); // 40
							break;
						case "valueReference":
							result.Value = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Value as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						case "initialSelected":
							result.InitialSelectedElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.InitialSelectedElement as Hl7.Fhir.Model.FhirBoolean, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Questionnaire.InitialComponent
		public void Parse(Hl7.Fhir.Model.Questionnaire.InitialComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "valueBoolean":
							result.Value = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.Value as Hl7.Fhir.Model.FhirBoolean, reader); // 40
							break;
						case "valueDecimal":
							result.Value = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.Value as Hl7.Fhir.Model.FhirDecimal, reader); // 40
							break;
						case "valueInteger":
							result.Value = new Hl7.Fhir.Model.Integer();
							Parse(result.Value as Hl7.Fhir.Model.Integer, reader); // 40
							break;
						case "valueDate":
							result.Value = new Hl7.Fhir.Model.Date();
							Parse(result.Value as Hl7.Fhir.Model.Date, reader); // 40
							break;
						case "valueDateTime":
							result.Value = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Value as Hl7.Fhir.Model.FhirDateTime, reader); // 40
							break;
						case "valueTime":
							result.Value = new Hl7.Fhir.Model.Time();
							Parse(result.Value as Hl7.Fhir.Model.Time, reader); // 40
							break;
						case "valueString":
							result.Value = new Hl7.Fhir.Model.FhirString();
							Parse(result.Value as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "valueUri":
							result.Value = new Hl7.Fhir.Model.FhirUri();
							Parse(result.Value as Hl7.Fhir.Model.FhirUri, reader); // 40
							break;
						case "valueAttachment":
							result.Value = new Hl7.Fhir.Model.Attachment();
							Parse(result.Value as Hl7.Fhir.Model.Attachment, reader); // 40
							break;
						case "valueCoding":
							result.Value = new Hl7.Fhir.Model.Coding();
							Parse(result.Value as Hl7.Fhir.Model.Coding, reader); // 40
							break;
						case "valueQuantity":
							result.Value = new Hl7.Fhir.Model.Quantity();
							Parse(result.Value as Hl7.Fhir.Model.Quantity, reader); // 40
							break;
						case "valueReference":
							result.Value = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Value as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.QuestionnaireResponse.ItemComponent
		public void Parse(Hl7.Fhir.Model.QuestionnaireResponse.ItemComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "linkId":
							result.LinkIdElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.LinkIdElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "definition":
							result.DefinitionElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.DefinitionElement as Hl7.Fhir.Model.FhirUri, reader); // 50
							break;
						case "text":
							result.TextElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TextElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "answer":
							var newItem_answer = new Hl7.Fhir.Model.QuestionnaireResponse.AnswerComponent();
							Parse(newItem_answer, reader); // 70
							result.Answer.Add(newItem_answer);
							break;
						case "item":
							var newItem_item = new Hl7.Fhir.Model.QuestionnaireResponse.ItemComponent();
							Parse(newItem_item, reader); // 80
							result.Item.Add(newItem_item);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.QuestionnaireResponse.AnswerComponent
		public void Parse(Hl7.Fhir.Model.QuestionnaireResponse.AnswerComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "valueBoolean":
							result.Value = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.Value as Hl7.Fhir.Model.FhirBoolean, reader); // 40
							break;
						case "valueDecimal":
							result.Value = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.Value as Hl7.Fhir.Model.FhirDecimal, reader); // 40
							break;
						case "valueInteger":
							result.Value = new Hl7.Fhir.Model.Integer();
							Parse(result.Value as Hl7.Fhir.Model.Integer, reader); // 40
							break;
						case "valueDate":
							result.Value = new Hl7.Fhir.Model.Date();
							Parse(result.Value as Hl7.Fhir.Model.Date, reader); // 40
							break;
						case "valueDateTime":
							result.Value = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Value as Hl7.Fhir.Model.FhirDateTime, reader); // 40
							break;
						case "valueTime":
							result.Value = new Hl7.Fhir.Model.Time();
							Parse(result.Value as Hl7.Fhir.Model.Time, reader); // 40
							break;
						case "valueString":
							result.Value = new Hl7.Fhir.Model.FhirString();
							Parse(result.Value as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "valueUri":
							result.Value = new Hl7.Fhir.Model.FhirUri();
							Parse(result.Value as Hl7.Fhir.Model.FhirUri, reader); // 40
							break;
						case "valueAttachment":
							result.Value = new Hl7.Fhir.Model.Attachment();
							Parse(result.Value as Hl7.Fhir.Model.Attachment, reader); // 40
							break;
						case "valueCoding":
							result.Value = new Hl7.Fhir.Model.Coding();
							Parse(result.Value as Hl7.Fhir.Model.Coding, reader); // 40
							break;
						case "valueQuantity":
							result.Value = new Hl7.Fhir.Model.Quantity();
							Parse(result.Value as Hl7.Fhir.Model.Quantity, reader); // 40
							break;
						case "valueReference":
							result.Value = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Value as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						case "item":
							var newItem_item = new Hl7.Fhir.Model.QuestionnaireResponse.ItemComponent();
							Parse(newItem_item, reader); // 50
							result.Item.Add(newItem_item);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.RelatedPerson.CommunicationComponent
		public void Parse(Hl7.Fhir.Model.RelatedPerson.CommunicationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "language":
							result.Language = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Language as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "preferred":
							result.PreferredElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.PreferredElement as Hl7.Fhir.Model.FhirBoolean, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.RequestGroup.ActionComponent
		public void Parse(Hl7.Fhir.Model.RequestGroup.ActionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "prefix":
							result.PrefixElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PrefixElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "title":
							result.TitleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TitleElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "textEquivalent":
							result.TextEquivalentElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TextEquivalentElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						case "priority":
							result.PriorityElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestPriority>();
							Parse(result.PriorityElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.RequestPriority>, reader); // 80
							break;
						case "code":
							var newItem_code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_code, reader); // 90
							result.Code.Add(newItem_code);
							break;
						case "documentation":
							var newItem_documentation = new Hl7.Fhir.Model.RelatedArtifact();
							Parse(newItem_documentation, reader); // 100
							result.Documentation.Add(newItem_documentation);
							break;
						case "condition":
							var newItem_condition = new Hl7.Fhir.Model.RequestGroup.ConditionComponent();
							Parse(newItem_condition, reader); // 110
							result.Condition.Add(newItem_condition);
							break;
						case "relatedAction":
							var newItem_relatedAction = new Hl7.Fhir.Model.RequestGroup.RelatedActionComponent();
							Parse(newItem_relatedAction, reader); // 120
							result.RelatedAction.Add(newItem_relatedAction);
							break;
						case "timingDateTime":
							result.Timing = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Timing as Hl7.Fhir.Model.FhirDateTime, reader); // 130
							break;
						case "timingAge":
							result.Timing = new Hl7.Fhir.Model.Age();
							Parse(result.Timing as Hl7.Fhir.Model.Age, reader); // 130
							break;
						case "timingPeriod":
							result.Timing = new Hl7.Fhir.Model.Period();
							Parse(result.Timing as Hl7.Fhir.Model.Period, reader); // 130
							break;
						case "timingDuration":
							result.Timing = new Hl7.Fhir.Model.Duration();
							Parse(result.Timing as Hl7.Fhir.Model.Duration, reader); // 130
							break;
						case "timingRange":
							result.Timing = new Hl7.Fhir.Model.Range();
							Parse(result.Timing as Hl7.Fhir.Model.Range, reader); // 130
							break;
						case "timingTiming":
							result.Timing = new Hl7.Fhir.Model.Timing();
							Parse(result.Timing as Hl7.Fhir.Model.Timing, reader); // 130
							break;
						case "participant":
							var newItem_participant = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_participant, reader); // 140
							result.Participant.Add(newItem_participant);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 150
							break;
						case "groupingBehavior":
							result.GroupingBehaviorElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ActionGroupingBehavior>();
							Parse(result.GroupingBehaviorElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ActionGroupingBehavior>, reader); // 160
							break;
						case "selectionBehavior":
							result.SelectionBehaviorElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ActionSelectionBehavior>();
							Parse(result.SelectionBehaviorElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ActionSelectionBehavior>, reader); // 170
							break;
						case "requiredBehavior":
							result.RequiredBehaviorElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ActionRequiredBehavior>();
							Parse(result.RequiredBehaviorElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ActionRequiredBehavior>, reader); // 180
							break;
						case "precheckBehavior":
							result.PrecheckBehaviorElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ActionPrecheckBehavior>();
							Parse(result.PrecheckBehaviorElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ActionPrecheckBehavior>, reader); // 190
							break;
						case "cardinalityBehavior":
							result.CardinalityBehaviorElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ActionCardinalityBehavior>();
							Parse(result.CardinalityBehaviorElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ActionCardinalityBehavior>, reader); // 200
							break;
						case "resource":
							result.Resource = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Resource as Hl7.Fhir.Model.ResourceReference, reader); // 210
							break;
						case "action":
							var newItem_action = new Hl7.Fhir.Model.RequestGroup.ActionComponent();
							Parse(newItem_action, reader); // 220
							result.Action.Add(newItem_action);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.RequestGroup.ConditionComponent
		public void Parse(Hl7.Fhir.Model.RequestGroup.ConditionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "kind":
							result.KindElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ActionConditionKind>();
							Parse(result.KindElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ActionConditionKind>, reader); // 40
							break;
						case "expression":
							result.Expression = new Hl7.Fhir.Model.Expression();
							Parse(result.Expression as Hl7.Fhir.Model.Expression, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.RequestGroup.RelatedActionComponent
		public void Parse(Hl7.Fhir.Model.RequestGroup.RelatedActionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "actionId":
							result.ActionIdElement = new Hl7.Fhir.Model.Id();
							Parse(result.ActionIdElement as Hl7.Fhir.Model.Id, reader); // 40
							break;
						case "relationship":
							result.RelationshipElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ActionRelationshipType>();
							Parse(result.RelationshipElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ActionRelationshipType>, reader); // 50
							break;
						case "offsetDuration":
							result.Offset = new Hl7.Fhir.Model.Duration();
							Parse(result.Offset as Hl7.Fhir.Model.Duration, reader); // 60
							break;
						case "offsetRange":
							result.Offset = new Hl7.Fhir.Model.Range();
							Parse(result.Offset as Hl7.Fhir.Model.Range, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ResearchElementDefinition.CharacteristicComponent
		public void Parse(Hl7.Fhir.Model.ResearchElementDefinition.CharacteristicComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "definitionCodeableConcept":
							result.Definition = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Definition as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "definitionCanonical":
							result.Definition = new Hl7.Fhir.Model.Canonical();
							Parse(result.Definition as Hl7.Fhir.Model.Canonical, reader); // 40
							break;
						case "definitionExpression":
							result.Definition = new Hl7.Fhir.Model.Expression();
							Parse(result.Definition as Hl7.Fhir.Model.Expression, reader); // 40
							break;
						case "definitionDataRequirement":
							result.Definition = new Hl7.Fhir.Model.DataRequirement();
							Parse(result.Definition as Hl7.Fhir.Model.DataRequirement, reader); // 40
							break;
						case "usageContext":
							var newItem_usageContext = new Hl7.Fhir.Model.UsageContext();
							Parse(newItem_usageContext, reader); // 50
							result.UsageContext.Add(newItem_usageContext);
							break;
						case "exclude":
							result.ExcludeElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ExcludeElement as Hl7.Fhir.Model.FhirBoolean, reader); // 60
							break;
						case "unitOfMeasure":
							result.UnitOfMeasure = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.UnitOfMeasure as Hl7.Fhir.Model.CodeableConcept, reader); // 70
							break;
						case "studyEffectiveDescription":
							result.StudyEffectiveDescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.StudyEffectiveDescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 80
							break;
						case "studyEffectiveDateTime":
							result.StudyEffective = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.StudyEffective as Hl7.Fhir.Model.FhirDateTime, reader); // 90
							break;
						case "studyEffectivePeriod":
							result.StudyEffective = new Hl7.Fhir.Model.Period();
							Parse(result.StudyEffective as Hl7.Fhir.Model.Period, reader); // 90
							break;
						case "studyEffectiveDuration":
							result.StudyEffective = new Hl7.Fhir.Model.Duration();
							Parse(result.StudyEffective as Hl7.Fhir.Model.Duration, reader); // 90
							break;
						case "studyEffectiveTiming":
							result.StudyEffective = new Hl7.Fhir.Model.Timing();
							Parse(result.StudyEffective as Hl7.Fhir.Model.Timing, reader); // 90
							break;
						case "studyEffectiveTimeFromStart":
							result.StudyEffectiveTimeFromStart = new Hl7.Fhir.Model.Duration();
							Parse(result.StudyEffectiveTimeFromStart as Hl7.Fhir.Model.Duration, reader); // 100
							break;
						case "studyEffectiveGroupMeasure":
							result.StudyEffectiveGroupMeasureElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.GroupMeasure>();
							Parse(result.StudyEffectiveGroupMeasureElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.GroupMeasure>, reader); // 110
							break;
						case "participantEffectiveDescription":
							result.ParticipantEffectiveDescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ParticipantEffectiveDescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "participantEffectiveDateTime":
							result.ParticipantEffective = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.ParticipantEffective as Hl7.Fhir.Model.FhirDateTime, reader); // 130
							break;
						case "participantEffectivePeriod":
							result.ParticipantEffective = new Hl7.Fhir.Model.Period();
							Parse(result.ParticipantEffective as Hl7.Fhir.Model.Period, reader); // 130
							break;
						case "participantEffectiveDuration":
							result.ParticipantEffective = new Hl7.Fhir.Model.Duration();
							Parse(result.ParticipantEffective as Hl7.Fhir.Model.Duration, reader); // 130
							break;
						case "participantEffectiveTiming":
							result.ParticipantEffective = new Hl7.Fhir.Model.Timing();
							Parse(result.ParticipantEffective as Hl7.Fhir.Model.Timing, reader); // 130
							break;
						case "participantEffectiveTimeFromStart":
							result.ParticipantEffectiveTimeFromStart = new Hl7.Fhir.Model.Duration();
							Parse(result.ParticipantEffectiveTimeFromStart as Hl7.Fhir.Model.Duration, reader); // 140
							break;
						case "participantEffectiveGroupMeasure":
							result.ParticipantEffectiveGroupMeasureElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.GroupMeasure>();
							Parse(result.ParticipantEffectiveGroupMeasureElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.GroupMeasure>, reader); // 150
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ResearchStudy.ArmComponent
		public void Parse(Hl7.Fhir.Model.ResearchStudy.ArmComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ResearchStudy.ObjectiveComponent
		public void Parse(Hl7.Fhir.Model.ResearchStudy.ObjectiveComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.RiskAssessment.PredictionComponent
		public void Parse(Hl7.Fhir.Model.RiskAssessment.PredictionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "outcome":
							result.Outcome = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Outcome as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "probabilityDecimal":
							result.Probability = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.Probability as Hl7.Fhir.Model.FhirDecimal, reader); // 50
							break;
						case "probabilityRange":
							result.Probability = new Hl7.Fhir.Model.Range();
							Parse(result.Probability as Hl7.Fhir.Model.Range, reader); // 50
							break;
						case "qualitativeRisk":
							result.QualitativeRisk = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.QualitativeRisk as Hl7.Fhir.Model.CodeableConcept, reader); // 60
							break;
						case "relativeRisk":
							result.RelativeRiskElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.RelativeRiskElement as Hl7.Fhir.Model.FhirDecimal, reader); // 70
							break;
						case "whenPeriod":
							result.When = new Hl7.Fhir.Model.Period();
							Parse(result.When as Hl7.Fhir.Model.Period, reader); // 80
							break;
						case "whenRange":
							result.When = new Hl7.Fhir.Model.Range();
							Parse(result.When as Hl7.Fhir.Model.Range, reader); // 80
							break;
						case "rationale":
							result.RationaleElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.RationaleElement as Hl7.Fhir.Model.FhirString, reader); // 90
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.RiskEvidenceSynthesis.SampleSizeComponent
		public void Parse(Hl7.Fhir.Model.RiskEvidenceSynthesis.SampleSizeComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "numberOfStudies":
							result.NumberOfStudiesElement = new Hl7.Fhir.Model.Integer();
							Parse(result.NumberOfStudiesElement as Hl7.Fhir.Model.Integer, reader); // 50
							break;
						case "numberOfParticipants":
							result.NumberOfParticipantsElement = new Hl7.Fhir.Model.Integer();
							Parse(result.NumberOfParticipantsElement as Hl7.Fhir.Model.Integer, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.RiskEvidenceSynthesis.RiskEstimateComponent
		public void Parse(Hl7.Fhir.Model.RiskEvidenceSynthesis.RiskEstimateComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "value":
							result.ValueElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.ValueElement as Hl7.Fhir.Model.FhirDecimal, reader); // 60
							break;
						case "unitOfMeasure":
							result.UnitOfMeasure = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.UnitOfMeasure as Hl7.Fhir.Model.CodeableConcept, reader); // 70
							break;
						case "denominatorCount":
							result.DenominatorCountElement = new Hl7.Fhir.Model.Integer();
							Parse(result.DenominatorCountElement as Hl7.Fhir.Model.Integer, reader); // 80
							break;
						case "numeratorCount":
							result.NumeratorCountElement = new Hl7.Fhir.Model.Integer();
							Parse(result.NumeratorCountElement as Hl7.Fhir.Model.Integer, reader); // 90
							break;
						case "precisionEstimate":
							var newItem_precisionEstimate = new Hl7.Fhir.Model.RiskEvidenceSynthesis.PrecisionEstimateComponent();
							Parse(newItem_precisionEstimate, reader); // 100
							result.PrecisionEstimate.Add(newItem_precisionEstimate);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.RiskEvidenceSynthesis.PrecisionEstimateComponent
		public void Parse(Hl7.Fhir.Model.RiskEvidenceSynthesis.PrecisionEstimateComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "level":
							result.LevelElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.LevelElement as Hl7.Fhir.Model.FhirDecimal, reader); // 50
							break;
						case "from":
							result.FromElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.FromElement as Hl7.Fhir.Model.FhirDecimal, reader); // 60
							break;
						case "to":
							result.ToElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.ToElement as Hl7.Fhir.Model.FhirDecimal, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.RiskEvidenceSynthesis.CertaintyComponent
		public void Parse(Hl7.Fhir.Model.RiskEvidenceSynthesis.CertaintyComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "rating":
							var newItem_rating = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_rating, reader); // 40
							result.Rating.Add(newItem_rating);
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 50
							result.Note.Add(newItem_note);
							break;
						case "certaintySubcomponent":
							var newItem_certaintySubcomponent = new Hl7.Fhir.Model.RiskEvidenceSynthesis.CertaintySubcomponentComponent();
							Parse(newItem_certaintySubcomponent, reader); // 60
							result.CertaintySubcomponent.Add(newItem_certaintySubcomponent);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.RiskEvidenceSynthesis.CertaintySubcomponentComponent
		public void Parse(Hl7.Fhir.Model.RiskEvidenceSynthesis.CertaintySubcomponentComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "rating":
							var newItem_rating = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_rating, reader); // 50
							result.Rating.Add(newItem_rating);
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 60
							result.Note.Add(newItem_note);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SearchParameter.ComponentComponent
		public void Parse(Hl7.Fhir.Model.SearchParameter.ComponentComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "definition":
							result.DefinitionElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.DefinitionElement as Hl7.Fhir.Model.Canonical, reader); // 40
							break;
						case "expression":
							result.ExpressionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ExpressionElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Specimen.CollectionComponent
		public void Parse(Hl7.Fhir.Model.Specimen.CollectionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "collector":
							result.Collector = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Collector as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						case "collectedDateTime":
							result.Collected = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Collected as Hl7.Fhir.Model.FhirDateTime, reader); // 50
							break;
						case "collectedPeriod":
							result.Collected = new Hl7.Fhir.Model.Period();
							Parse(result.Collected as Hl7.Fhir.Model.Period, reader); // 50
							break;
						case "duration":
							result.Duration = new Hl7.Fhir.Model.Duration();
							Parse(result.Duration as Hl7.Fhir.Model.Duration, reader); // 60
							break;
						case "quantity":
							result.Quantity = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Quantity as Hl7.Fhir.Model.SimpleQuantity, reader); // 70
							break;
						case "method":
							result.Method = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Method as Hl7.Fhir.Model.CodeableConcept, reader); // 80
							break;
						case "bodySite":
							result.BodySite = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.BodySite as Hl7.Fhir.Model.CodeableConcept, reader); // 90
							break;
						case "fastingStatusCodeableConcept":
							result.FastingStatus = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.FastingStatus as Hl7.Fhir.Model.CodeableConcept, reader); // 100
							break;
						case "fastingStatusDuration":
							result.FastingStatus = new Hl7.Fhir.Model.Duration();
							Parse(result.FastingStatus as Hl7.Fhir.Model.Duration, reader); // 100
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Specimen.ProcessingComponent
		public void Parse(Hl7.Fhir.Model.Specimen.ProcessingComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "procedure":
							result.Procedure = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Procedure as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "additive":
							var newItem_additive = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_additive, reader); // 60
							result.Additive.Add(newItem_additive);
							break;
						case "timeDateTime":
							result.Time = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Time as Hl7.Fhir.Model.FhirDateTime, reader); // 70
							break;
						case "timePeriod":
							result.Time = new Hl7.Fhir.Model.Period();
							Parse(result.Time as Hl7.Fhir.Model.Period, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Specimen.ContainerComponent
		public void Parse(Hl7.Fhir.Model.Specimen.ContainerComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							var newItem_identifier = new Hl7.Fhir.Model.Identifier();
							Parse(newItem_identifier, reader); // 40
							result.Identifier.Add(newItem_identifier);
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 60
							break;
						case "capacity":
							result.Capacity = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Capacity as Hl7.Fhir.Model.SimpleQuantity, reader); // 70
							break;
						case "specimenQuantity":
							result.SpecimenQuantity = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.SpecimenQuantity as Hl7.Fhir.Model.SimpleQuantity, reader); // 80
							break;
						case "additiveCodeableConcept":
							result.Additive = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Additive as Hl7.Fhir.Model.CodeableConcept, reader); // 90
							break;
						case "additiveReference":
							result.Additive = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Additive as Hl7.Fhir.Model.ResourceReference, reader); // 90
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SpecimenDefinition.TypeTestedComponent
		public void Parse(Hl7.Fhir.Model.SpecimenDefinition.TypeTestedComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "isDerived":
							result.IsDerivedElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.IsDerivedElement as Hl7.Fhir.Model.FhirBoolean, reader); // 40
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "preference":
							result.PreferenceElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.SpecimenDefinition.SpecimenContainedPreference>();
							Parse(result.PreferenceElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.SpecimenDefinition.SpecimenContainedPreference>, reader); // 60
							break;
						case "container":
							result.Container = new Hl7.Fhir.Model.SpecimenDefinition.ContainerComponent();
							Parse(result.Container as Hl7.Fhir.Model.SpecimenDefinition.ContainerComponent, reader); // 70
							break;
						case "requirement":
							result.RequirementElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.RequirementElement as Hl7.Fhir.Model.FhirString, reader); // 80
							break;
						case "retentionTime":
							result.RetentionTime = new Hl7.Fhir.Model.Duration();
							Parse(result.RetentionTime as Hl7.Fhir.Model.Duration, reader); // 90
							break;
						case "rejectionCriterion":
							var newItem_rejectionCriterion = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_rejectionCriterion, reader); // 100
							result.RejectionCriterion.Add(newItem_rejectionCriterion);
							break;
						case "handling":
							var newItem_handling = new Hl7.Fhir.Model.SpecimenDefinition.HandlingComponent();
							Parse(newItem_handling, reader); // 110
							result.Handling.Add(newItem_handling);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SpecimenDefinition.ContainerComponent
		public void Parse(Hl7.Fhir.Model.SpecimenDefinition.ContainerComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "material":
							result.Material = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Material as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "cap":
							result.Cap = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Cap as Hl7.Fhir.Model.CodeableConcept, reader); // 60
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						case "capacity":
							result.Capacity = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Capacity as Hl7.Fhir.Model.SimpleQuantity, reader); // 80
							break;
						case "minimumVolumeQuantity":
							result.MinimumVolume = new Hl7.Fhir.Model.Quantity();
							Parse(result.MinimumVolume as Hl7.Fhir.Model.Quantity, reader); // 90
							break;
						case "minimumVolumeString":
							result.MinimumVolume = new Hl7.Fhir.Model.FhirString();
							Parse(result.MinimumVolume as Hl7.Fhir.Model.FhirString, reader); // 90
							break;
						case "additive":
							var newItem_additive = new Hl7.Fhir.Model.SpecimenDefinition.AdditiveComponent();
							Parse(newItem_additive, reader); // 100
							result.Additive.Add(newItem_additive);
							break;
						case "preparation":
							result.PreparationElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PreparationElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SpecimenDefinition.AdditiveComponent
		public void Parse(Hl7.Fhir.Model.SpecimenDefinition.AdditiveComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "additiveCodeableConcept":
							result.Additive = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Additive as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "additiveReference":
							result.Additive = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Additive as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SpecimenDefinition.HandlingComponent
		public void Parse(Hl7.Fhir.Model.SpecimenDefinition.HandlingComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "temperatureQualifier":
							result.TemperatureQualifier = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.TemperatureQualifier as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "temperatureRange":
							result.TemperatureRange = new Hl7.Fhir.Model.Range();
							Parse(result.TemperatureRange as Hl7.Fhir.Model.Range, reader); // 50
							break;
						case "maxDuration":
							result.MaxDuration = new Hl7.Fhir.Model.Duration();
							Parse(result.MaxDuration as Hl7.Fhir.Model.Duration, reader); // 60
							break;
						case "instruction":
							result.InstructionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.InstructionElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.StructureDefinition.MappingComponent
		public void Parse(Hl7.Fhir.Model.StructureDefinition.MappingComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identity":
							result.IdentityElement = new Hl7.Fhir.Model.Id();
							Parse(result.IdentityElement as Hl7.Fhir.Model.Id, reader); // 40
							break;
						case "uri":
							result.UriElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UriElement as Hl7.Fhir.Model.FhirUri, reader); // 50
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "comment":
							result.CommentElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.CommentElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.StructureDefinition.ContextComponent
		public void Parse(Hl7.Fhir.Model.StructureDefinition.ContextComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.StructureDefinition.ExtensionContextType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.StructureDefinition.ExtensionContextType>, reader); // 40
							break;
						case "expression":
							result.ExpressionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ExpressionElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.StructureDefinition.SnapshotComponent
		public void Parse(Hl7.Fhir.Model.StructureDefinition.SnapshotComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "element":
							var newItem_element = new Hl7.Fhir.Model.ElementDefinition();
							Parse(newItem_element, reader); // 40
							result.Element.Add(newItem_element);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.StructureDefinition.DifferentialComponent
		public void Parse(Hl7.Fhir.Model.StructureDefinition.DifferentialComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "element":
							var newItem_element = new Hl7.Fhir.Model.ElementDefinition();
							Parse(newItem_element, reader); // 40
							result.Element.Add(newItem_element);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.StructureMap.StructureComponent
		public void Parse(Hl7.Fhir.Model.StructureMap.StructureComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.UrlElement as Hl7.Fhir.Model.Canonical, reader); // 40
							break;
						case "mode":
							result.ModeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.StructureMap.StructureMapModelMode>();
							Parse(result.ModeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.StructureMap.StructureMapModelMode>, reader); // 50
							break;
						case "alias":
							result.AliasElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.AliasElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "documentation":
							result.DocumentationElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DocumentationElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.StructureMap.GroupComponent
		public void Parse(Hl7.Fhir.Model.StructureMap.GroupComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.Id();
							Parse(result.NameElement as Hl7.Fhir.Model.Id, reader); // 40
							break;
						case "extends":
							result.ExtendsElement = new Hl7.Fhir.Model.Id();
							Parse(result.ExtendsElement as Hl7.Fhir.Model.Id, reader); // 50
							break;
						case "typeMode":
							result.TypeModeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.StructureMap.StructureMapGroupTypeMode>();
							Parse(result.TypeModeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.StructureMap.StructureMapGroupTypeMode>, reader); // 60
							break;
						case "documentation":
							result.DocumentationElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DocumentationElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						case "input":
							var newItem_input = new Hl7.Fhir.Model.StructureMap.InputComponent();
							Parse(newItem_input, reader); // 80
							result.Input.Add(newItem_input);
							break;
						case "rule":
							var newItem_rule = new Hl7.Fhir.Model.StructureMap.RuleComponent();
							Parse(newItem_rule, reader); // 90
							result.Rule.Add(newItem_rule);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.StructureMap.InputComponent
		public void Parse(Hl7.Fhir.Model.StructureMap.InputComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.Id();
							Parse(result.NameElement as Hl7.Fhir.Model.Id, reader); // 40
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TypeElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "mode":
							result.ModeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.StructureMap.StructureMapInputMode>();
							Parse(result.ModeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.StructureMap.StructureMapInputMode>, reader); // 60
							break;
						case "documentation":
							result.DocumentationElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DocumentationElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.StructureMap.RuleComponent
		public void Parse(Hl7.Fhir.Model.StructureMap.RuleComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.Id();
							Parse(result.NameElement as Hl7.Fhir.Model.Id, reader); // 40
							break;
						case "source":
							var newItem_source = new Hl7.Fhir.Model.StructureMap.SourceComponent();
							Parse(newItem_source, reader); // 50
							result.Source.Add(newItem_source);
							break;
						case "target":
							var newItem_target = new Hl7.Fhir.Model.StructureMap.TargetComponent();
							Parse(newItem_target, reader); // 60
							result.Target.Add(newItem_target);
							break;
						case "rule":
							var newItem_rule = new Hl7.Fhir.Model.StructureMap.RuleComponent();
							Parse(newItem_rule, reader); // 70
							result.Rule.Add(newItem_rule);
							break;
						case "dependent":
							var newItem_dependent = new Hl7.Fhir.Model.StructureMap.DependentComponent();
							Parse(newItem_dependent, reader); // 80
							result.Dependent.Add(newItem_dependent);
							break;
						case "documentation":
							result.DocumentationElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DocumentationElement as Hl7.Fhir.Model.FhirString, reader); // 90
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.StructureMap.SourceComponent
		public void Parse(Hl7.Fhir.Model.StructureMap.SourceComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "context":
							result.ContextElement = new Hl7.Fhir.Model.Id();
							Parse(result.ContextElement as Hl7.Fhir.Model.Id, reader); // 40
							break;
						case "min":
							result.MinElement = new Hl7.Fhir.Model.Integer();
							Parse(result.MinElement as Hl7.Fhir.Model.Integer, reader); // 50
							break;
						case "max":
							result.MaxElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.MaxElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.TypeElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						case "defaultValueBase64Binary":
							result.DefaultValue = new Hl7.Fhir.Model.Base64Binary();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Base64Binary, reader); // 80
							break;
						case "defaultValueBoolean":
							result.DefaultValue = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.DefaultValue as Hl7.Fhir.Model.FhirBoolean, reader); // 80
							break;
						case "defaultValueCanonical":
							result.DefaultValue = new Hl7.Fhir.Model.Canonical();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Canonical, reader); // 80
							break;
						case "defaultValueCode":
							result.DefaultValue = new Hl7.Fhir.Model.Code();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Code, reader); // 80
							break;
						case "defaultValueDate":
							result.DefaultValue = new Hl7.Fhir.Model.Date();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Date, reader); // 80
							break;
						case "defaultValueDateTime":
							result.DefaultValue = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DefaultValue as Hl7.Fhir.Model.FhirDateTime, reader); // 80
							break;
						case "defaultValueDecimal":
							result.DefaultValue = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.DefaultValue as Hl7.Fhir.Model.FhirDecimal, reader); // 80
							break;
						case "defaultValueId":
							result.DefaultValue = new Hl7.Fhir.Model.Id();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Id, reader); // 80
							break;
						case "defaultValueInstant":
							result.DefaultValue = new Hl7.Fhir.Model.Instant();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Instant, reader); // 80
							break;
						case "defaultValueInteger":
							result.DefaultValue = new Hl7.Fhir.Model.Integer();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Integer, reader); // 80
							break;
						case "defaultValueMarkdown":
							result.DefaultValue = new Hl7.Fhir.Model.Markdown();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Markdown, reader); // 80
							break;
						case "defaultValueOid":
							result.DefaultValue = new Hl7.Fhir.Model.Oid();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Oid, reader); // 80
							break;
						case "defaultValuePositiveInt":
							result.DefaultValue = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.DefaultValue as Hl7.Fhir.Model.PositiveInt, reader); // 80
							break;
						case "defaultValueString":
							result.DefaultValue = new Hl7.Fhir.Model.FhirString();
							Parse(result.DefaultValue as Hl7.Fhir.Model.FhirString, reader); // 80
							break;
						case "defaultValueTime":
							result.DefaultValue = new Hl7.Fhir.Model.Time();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Time, reader); // 80
							break;
						case "defaultValueUnsignedInt":
							result.DefaultValue = new Hl7.Fhir.Model.UnsignedInt();
							Parse(result.DefaultValue as Hl7.Fhir.Model.UnsignedInt, reader); // 80
							break;
						case "defaultValueUri":
							result.DefaultValue = new Hl7.Fhir.Model.FhirUri();
							Parse(result.DefaultValue as Hl7.Fhir.Model.FhirUri, reader); // 80
							break;
						case "defaultValueUrl":
							result.DefaultValue = new Hl7.Fhir.Model.FhirUrl();
							Parse(result.DefaultValue as Hl7.Fhir.Model.FhirUrl, reader); // 80
							break;
						case "defaultValueUuid":
							result.DefaultValue = new Hl7.Fhir.Model.Uuid();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Uuid, reader); // 80
							break;
						case "defaultValueAddress":
							result.DefaultValue = new Hl7.Fhir.Model.Address();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Address, reader); // 80
							break;
						case "defaultValueAge":
							result.DefaultValue = new Hl7.Fhir.Model.Age();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Age, reader); // 80
							break;
						case "defaultValueAnnotation":
							result.DefaultValue = new Hl7.Fhir.Model.Annotation();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Annotation, reader); // 80
							break;
						case "defaultValueAttachment":
							result.DefaultValue = new Hl7.Fhir.Model.Attachment();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Attachment, reader); // 80
							break;
						case "defaultValueCodeableConcept":
							result.DefaultValue = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.DefaultValue as Hl7.Fhir.Model.CodeableConcept, reader); // 80
							break;
						case "defaultValueCoding":
							result.DefaultValue = new Hl7.Fhir.Model.Coding();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Coding, reader); // 80
							break;
						case "defaultValueContactPoint":
							result.DefaultValue = new Hl7.Fhir.Model.ContactPoint();
							Parse(result.DefaultValue as Hl7.Fhir.Model.ContactPoint, reader); // 80
							break;
						case "defaultValueCount":
							result.DefaultValue = new Hl7.Fhir.Model.Count();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Count, reader); // 80
							break;
						case "defaultValueDistance":
							result.DefaultValue = new Hl7.Fhir.Model.Distance();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Distance, reader); // 80
							break;
						case "defaultValueDuration":
							result.DefaultValue = new Hl7.Fhir.Model.Duration();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Duration, reader); // 80
							break;
						case "defaultValueHumanName":
							result.DefaultValue = new Hl7.Fhir.Model.HumanName();
							Parse(result.DefaultValue as Hl7.Fhir.Model.HumanName, reader); // 80
							break;
						case "defaultValueIdentifier":
							result.DefaultValue = new Hl7.Fhir.Model.Identifier();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Identifier, reader); // 80
							break;
						case "defaultValueMoney":
							result.DefaultValue = new Hl7.Fhir.Model.Money();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Money, reader); // 80
							break;
						case "defaultValuePeriod":
							result.DefaultValue = new Hl7.Fhir.Model.Period();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Period, reader); // 80
							break;
						case "defaultValueQuantity":
							result.DefaultValue = new Hl7.Fhir.Model.Quantity();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Quantity, reader); // 80
							break;
						case "defaultValueRange":
							result.DefaultValue = new Hl7.Fhir.Model.Range();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Range, reader); // 80
							break;
						case "defaultValueRatio":
							result.DefaultValue = new Hl7.Fhir.Model.Ratio();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Ratio, reader); // 80
							break;
						case "defaultValueReference":
							result.DefaultValue = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.DefaultValue as Hl7.Fhir.Model.ResourceReference, reader); // 80
							break;
						case "defaultValueSampledData":
							result.DefaultValue = new Hl7.Fhir.Model.SampledData();
							Parse(result.DefaultValue as Hl7.Fhir.Model.SampledData, reader); // 80
							break;
						case "defaultValueSignature":
							result.DefaultValue = new Hl7.Fhir.Model.Signature();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Signature, reader); // 80
							break;
						case "defaultValueTiming":
							result.DefaultValue = new Hl7.Fhir.Model.Timing();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Timing, reader); // 80
							break;
						case "defaultValueContactDetail":
							result.DefaultValue = new Hl7.Fhir.Model.ContactDetail();
							Parse(result.DefaultValue as Hl7.Fhir.Model.ContactDetail, reader); // 80
							break;
						case "defaultValueContributor":
							result.DefaultValue = new Hl7.Fhir.Model.Contributor();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Contributor, reader); // 80
							break;
						case "defaultValueDataRequirement":
							result.DefaultValue = new Hl7.Fhir.Model.DataRequirement();
							Parse(result.DefaultValue as Hl7.Fhir.Model.DataRequirement, reader); // 80
							break;
						case "defaultValueExpression":
							result.DefaultValue = new Hl7.Fhir.Model.Expression();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Expression, reader); // 80
							break;
						case "defaultValueParameterDefinition":
							result.DefaultValue = new Hl7.Fhir.Model.ParameterDefinition();
							Parse(result.DefaultValue as Hl7.Fhir.Model.ParameterDefinition, reader); // 80
							break;
						case "defaultValueRelatedArtifact":
							result.DefaultValue = new Hl7.Fhir.Model.RelatedArtifact();
							Parse(result.DefaultValue as Hl7.Fhir.Model.RelatedArtifact, reader); // 80
							break;
						case "defaultValueTriggerDefinition":
							result.DefaultValue = new Hl7.Fhir.Model.TriggerDefinition();
							Parse(result.DefaultValue as Hl7.Fhir.Model.TriggerDefinition, reader); // 80
							break;
						case "defaultValueUsageContext":
							result.DefaultValue = new Hl7.Fhir.Model.UsageContext();
							Parse(result.DefaultValue as Hl7.Fhir.Model.UsageContext, reader); // 80
							break;
						case "defaultValueDosage":
							result.DefaultValue = new Hl7.Fhir.Model.Dosage();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Dosage, reader); // 80
							break;
						case "defaultValueMeta":
							result.DefaultValue = new Hl7.Fhir.Model.Meta();
							Parse(result.DefaultValue as Hl7.Fhir.Model.Meta, reader); // 80
							break;
						case "element":
							result.ElementElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ElementElement as Hl7.Fhir.Model.FhirString, reader); // 90
							break;
						case "listMode":
							result.ListModeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.StructureMap.StructureMapSourceListMode>();
							Parse(result.ListModeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.StructureMap.StructureMapSourceListMode>, reader); // 100
							break;
						case "variable":
							result.VariableElement = new Hl7.Fhir.Model.Id();
							Parse(result.VariableElement as Hl7.Fhir.Model.Id, reader); // 110
							break;
						case "condition":
							result.ConditionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ConditionElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "check":
							result.CheckElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.CheckElement as Hl7.Fhir.Model.FhirString, reader); // 130
							break;
						case "logMessage":
							result.LogMessageElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.LogMessageElement as Hl7.Fhir.Model.FhirString, reader); // 140
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.StructureMap.TargetComponent
		public void Parse(Hl7.Fhir.Model.StructureMap.TargetComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "context":
							result.ContextElement = new Hl7.Fhir.Model.Id();
							Parse(result.ContextElement as Hl7.Fhir.Model.Id, reader); // 40
							break;
						case "contextType":
							result.ContextTypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.StructureMap.StructureMapContextType>();
							Parse(result.ContextTypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.StructureMap.StructureMapContextType>, reader); // 50
							break;
						case "element":
							result.ElementElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ElementElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "variable":
							result.VariableElement = new Hl7.Fhir.Model.Id();
							Parse(result.VariableElement as Hl7.Fhir.Model.Id, reader); // 70
							break;
						case "listMode":
							var newItem_listMode = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.StructureMap.StructureMapTargetListMode>();
							Parse(newItem_listMode, reader); // 80
							result.ListModeElement.Add(newItem_listMode);
							break;
						case "listRuleId":
							result.ListRuleIdElement = new Hl7.Fhir.Model.Id();
							Parse(result.ListRuleIdElement as Hl7.Fhir.Model.Id, reader); // 90
							break;
						case "transform":
							result.TransformElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.StructureMap.StructureMapTransform>();
							Parse(result.TransformElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.StructureMap.StructureMapTransform>, reader); // 100
							break;
						case "parameter":
							var newItem_parameter = new Hl7.Fhir.Model.StructureMap.ParameterComponent();
							Parse(newItem_parameter, reader); // 110
							result.Parameter.Add(newItem_parameter);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.StructureMap.ParameterComponent
		public void Parse(Hl7.Fhir.Model.StructureMap.ParameterComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "valueId":
							result.Value = new Hl7.Fhir.Model.Id();
							Parse(result.Value as Hl7.Fhir.Model.Id, reader); // 40
							break;
						case "valueString":
							result.Value = new Hl7.Fhir.Model.FhirString();
							Parse(result.Value as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "valueBoolean":
							result.Value = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.Value as Hl7.Fhir.Model.FhirBoolean, reader); // 40
							break;
						case "valueInteger":
							result.Value = new Hl7.Fhir.Model.Integer();
							Parse(result.Value as Hl7.Fhir.Model.Integer, reader); // 40
							break;
						case "valueDecimal":
							result.Value = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.Value as Hl7.Fhir.Model.FhirDecimal, reader); // 40
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.StructureMap.DependentComponent
		public void Parse(Hl7.Fhir.Model.StructureMap.DependentComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.Id();
							Parse(result.NameElement as Hl7.Fhir.Model.Id, reader); // 40
							break;
						case "variable":
							var newItem_variable = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_variable, reader); // 50
							result.VariableElement.Add(newItem_variable);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Subscription.ChannelComponent
		public void Parse(Hl7.Fhir.Model.Subscription.ChannelComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Subscription.SubscriptionChannelType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Subscription.SubscriptionChannelType>, reader); // 40
							break;
						case "endpoint":
							result.EndpointElement = new Hl7.Fhir.Model.FhirUrl();
							Parse(result.EndpointElement as Hl7.Fhir.Model.FhirUrl, reader); // 50
							break;
						case "payload":
							result.PayloadElement = new Hl7.Fhir.Model.Code();
							Parse(result.PayloadElement as Hl7.Fhir.Model.Code, reader); // 60
							break;
						case "header":
							var newItem_header = new Hl7.Fhir.Model.FhirString();
							Parse(newItem_header, reader); // 70
							result.HeaderElement.Add(newItem_header);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Substance.InstanceComponent
		public void Parse(Hl7.Fhir.Model.Substance.InstanceComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							result.Identifier = new Hl7.Fhir.Model.Identifier();
							Parse(result.Identifier as Hl7.Fhir.Model.Identifier, reader); // 40
							break;
						case "expiry":
							result.ExpiryElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.ExpiryElement as Hl7.Fhir.Model.FhirDateTime, reader); // 50
							break;
						case "quantity":
							result.Quantity = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Quantity as Hl7.Fhir.Model.SimpleQuantity, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Substance.IngredientComponent
		public void Parse(Hl7.Fhir.Model.Substance.IngredientComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "quantity":
							result.Quantity = new Hl7.Fhir.Model.Ratio();
							Parse(result.Quantity as Hl7.Fhir.Model.Ratio, reader); // 40
							break;
						case "substanceCodeableConcept":
							result.Substance = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Substance as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "substanceReference":
							result.Substance = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Substance as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SubstanceNucleicAcid.SubunitComponent
		public void Parse(Hl7.Fhir.Model.SubstanceNucleicAcid.SubunitComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "subunit":
							result.SubunitElement = new Hl7.Fhir.Model.Integer();
							Parse(result.SubunitElement as Hl7.Fhir.Model.Integer, reader); // 40
							break;
						case "sequence":
							result.SequenceElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.SequenceElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "length":
							result.LengthElement = new Hl7.Fhir.Model.Integer();
							Parse(result.LengthElement as Hl7.Fhir.Model.Integer, reader); // 60
							break;
						case "sequenceAttachment":
							result.SequenceAttachment = new Hl7.Fhir.Model.Attachment();
							Parse(result.SequenceAttachment as Hl7.Fhir.Model.Attachment, reader); // 70
							break;
						case "fivePrime":
							result.FivePrime = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.FivePrime as Hl7.Fhir.Model.CodeableConcept, reader); // 80
							break;
						case "threePrime":
							result.ThreePrime = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.ThreePrime as Hl7.Fhir.Model.CodeableConcept, reader); // 90
							break;
						case "linkage":
							var newItem_linkage = new Hl7.Fhir.Model.SubstanceNucleicAcid.LinkageComponent();
							Parse(newItem_linkage, reader); // 100
							result.Linkage.Add(newItem_linkage);
							break;
						case "sugar":
							var newItem_sugar = new Hl7.Fhir.Model.SubstanceNucleicAcid.SugarComponent();
							Parse(newItem_sugar, reader); // 110
							result.Sugar.Add(newItem_sugar);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SubstanceNucleicAcid.LinkageComponent
		public void Parse(Hl7.Fhir.Model.SubstanceNucleicAcid.LinkageComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "connectivity":
							result.ConnectivityElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ConnectivityElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "identifier":
							result.Identifier = new Hl7.Fhir.Model.Identifier();
							Parse(result.Identifier as Hl7.Fhir.Model.Identifier, reader); // 50
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "residueSite":
							result.ResidueSiteElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ResidueSiteElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SubstanceNucleicAcid.SugarComponent
		public void Parse(Hl7.Fhir.Model.SubstanceNucleicAcid.SugarComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							result.Identifier = new Hl7.Fhir.Model.Identifier();
							Parse(result.Identifier as Hl7.Fhir.Model.Identifier, reader); // 40
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "residueSite":
							result.ResidueSiteElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ResidueSiteElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SubstancePolymer.MonomerSetComponent
		public void Parse(Hl7.Fhir.Model.SubstancePolymer.MonomerSetComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "ratioType":
							result.RatioType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.RatioType as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "startingMaterial":
							var newItem_startingMaterial = new Hl7.Fhir.Model.SubstancePolymer.StartingMaterialComponent();
							Parse(newItem_startingMaterial, reader); // 50
							result.StartingMaterial.Add(newItem_startingMaterial);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SubstancePolymer.StartingMaterialComponent
		public void Parse(Hl7.Fhir.Model.SubstancePolymer.StartingMaterialComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "material":
							result.Material = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Material as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "isDefining":
							result.IsDefiningElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.IsDefiningElement as Hl7.Fhir.Model.FhirBoolean, reader); // 60
							break;
						case "amount":
							result.Amount = new Hl7.Fhir.Model.SubstanceAmount();
							Parse(result.Amount as Hl7.Fhir.Model.SubstanceAmount, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SubstancePolymer.RepeatComponent
		public void Parse(Hl7.Fhir.Model.SubstancePolymer.RepeatComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "numberOfUnits":
							result.NumberOfUnitsElement = new Hl7.Fhir.Model.Integer();
							Parse(result.NumberOfUnitsElement as Hl7.Fhir.Model.Integer, reader); // 40
							break;
						case "averageMolecularFormula":
							result.AverageMolecularFormulaElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.AverageMolecularFormulaElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "repeatUnitAmountType":
							result.RepeatUnitAmountType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.RepeatUnitAmountType as Hl7.Fhir.Model.CodeableConcept, reader); // 60
							break;
						case "repeatUnit":
							var newItem_repeatUnit = new Hl7.Fhir.Model.SubstancePolymer.RepeatUnitComponent();
							Parse(newItem_repeatUnit, reader); // 70
							result.RepeatUnit.Add(newItem_repeatUnit);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SubstancePolymer.RepeatUnitComponent
		public void Parse(Hl7.Fhir.Model.SubstancePolymer.RepeatUnitComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "orientationOfPolymerisation":
							result.OrientationOfPolymerisation = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.OrientationOfPolymerisation as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "repeatUnit":
							result.RepeatUnitElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.RepeatUnitElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "amount":
							result.Amount = new Hl7.Fhir.Model.SubstanceAmount();
							Parse(result.Amount as Hl7.Fhir.Model.SubstanceAmount, reader); // 60
							break;
						case "degreeOfPolymerisation":
							var newItem_degreeOfPolymerisation = new Hl7.Fhir.Model.SubstancePolymer.DegreeOfPolymerisationComponent();
							Parse(newItem_degreeOfPolymerisation, reader); // 70
							result.DegreeOfPolymerisation.Add(newItem_degreeOfPolymerisation);
							break;
						case "structuralRepresentation":
							var newItem_structuralRepresentation = new Hl7.Fhir.Model.SubstancePolymer.StructuralRepresentationComponent();
							Parse(newItem_structuralRepresentation, reader); // 80
							result.StructuralRepresentation.Add(newItem_structuralRepresentation);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SubstancePolymer.DegreeOfPolymerisationComponent
		public void Parse(Hl7.Fhir.Model.SubstancePolymer.DegreeOfPolymerisationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "degree":
							result.Degree = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Degree as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "amount":
							result.Amount = new Hl7.Fhir.Model.SubstanceAmount();
							Parse(result.Amount as Hl7.Fhir.Model.SubstanceAmount, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SubstancePolymer.StructuralRepresentationComponent
		public void Parse(Hl7.Fhir.Model.SubstancePolymer.StructuralRepresentationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "representation":
							result.RepresentationElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.RepresentationElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "attachment":
							result.Attachment = new Hl7.Fhir.Model.Attachment();
							Parse(result.Attachment as Hl7.Fhir.Model.Attachment, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SubstanceProtein.SubunitComponent
		public void Parse(Hl7.Fhir.Model.SubstanceProtein.SubunitComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "subunit":
							result.SubunitElement = new Hl7.Fhir.Model.Integer();
							Parse(result.SubunitElement as Hl7.Fhir.Model.Integer, reader); // 40
							break;
						case "sequence":
							result.SequenceElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.SequenceElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "length":
							result.LengthElement = new Hl7.Fhir.Model.Integer();
							Parse(result.LengthElement as Hl7.Fhir.Model.Integer, reader); // 60
							break;
						case "sequenceAttachment":
							result.SequenceAttachment = new Hl7.Fhir.Model.Attachment();
							Parse(result.SequenceAttachment as Hl7.Fhir.Model.Attachment, reader); // 70
							break;
						case "nTerminalModificationId":
							result.NTerminalModificationId = new Hl7.Fhir.Model.Identifier();
							Parse(result.NTerminalModificationId as Hl7.Fhir.Model.Identifier, reader); // 80
							break;
						case "nTerminalModification":
							result.NTerminalModificationElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NTerminalModificationElement as Hl7.Fhir.Model.FhirString, reader); // 90
							break;
						case "cTerminalModificationId":
							result.CTerminalModificationId = new Hl7.Fhir.Model.Identifier();
							Parse(result.CTerminalModificationId as Hl7.Fhir.Model.Identifier, reader); // 100
							break;
						case "cTerminalModification":
							result.CTerminalModificationElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.CTerminalModificationElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SubstanceReferenceInformation.GeneComponent
		public void Parse(Hl7.Fhir.Model.SubstanceReferenceInformation.GeneComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "geneSequenceOrigin":
							result.GeneSequenceOrigin = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.GeneSequenceOrigin as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "gene":
							result.Gene = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Gene as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "source":
							var newItem_source = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_source, reader); // 60
							result.Source.Add(newItem_source);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SubstanceReferenceInformation.GeneElementComponent
		public void Parse(Hl7.Fhir.Model.SubstanceReferenceInformation.GeneElementComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "element":
							result.Element = new Hl7.Fhir.Model.Identifier();
							Parse(result.Element as Hl7.Fhir.Model.Identifier, reader); // 50
							break;
						case "source":
							var newItem_source = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_source, reader); // 60
							result.Source.Add(newItem_source);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SubstanceReferenceInformation.ClassificationComponent
		public void Parse(Hl7.Fhir.Model.SubstanceReferenceInformation.ClassificationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "domain":
							result.Domain = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Domain as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "classification":
							result.Classification = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Classification as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "subtype":
							var newItem_subtype = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_subtype, reader); // 60
							result.Subtype.Add(newItem_subtype);
							break;
						case "source":
							var newItem_source = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_source, reader); // 70
							result.Source.Add(newItem_source);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SubstanceReferenceInformation.TargetComponent
		public void Parse(Hl7.Fhir.Model.SubstanceReferenceInformation.TargetComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "target":
							result.Target = new Hl7.Fhir.Model.Identifier();
							Parse(result.Target as Hl7.Fhir.Model.Identifier, reader); // 40
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "interaction":
							result.Interaction = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Interaction as Hl7.Fhir.Model.CodeableConcept, reader); // 60
							break;
						case "organism":
							result.Organism = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Organism as Hl7.Fhir.Model.CodeableConcept, reader); // 70
							break;
						case "organismType":
							result.OrganismType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.OrganismType as Hl7.Fhir.Model.CodeableConcept, reader); // 80
							break;
						case "amountQuantity":
							result.Amount = new Hl7.Fhir.Model.Quantity();
							Parse(result.Amount as Hl7.Fhir.Model.Quantity, reader); // 90
							break;
						case "amountRange":
							result.Amount = new Hl7.Fhir.Model.Range();
							Parse(result.Amount as Hl7.Fhir.Model.Range, reader); // 90
							break;
						case "amountString":
							result.Amount = new Hl7.Fhir.Model.FhirString();
							Parse(result.Amount as Hl7.Fhir.Model.FhirString, reader); // 90
							break;
						case "amountType":
							result.AmountType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.AmountType as Hl7.Fhir.Model.CodeableConcept, reader); // 100
							break;
						case "source":
							var newItem_source = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_source, reader); // 110
							result.Source.Add(newItem_source);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SubstanceSourceMaterial.FractionDescriptionComponent
		public void Parse(Hl7.Fhir.Model.SubstanceSourceMaterial.FractionDescriptionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "fraction":
							result.FractionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.FractionElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "materialType":
							result.MaterialType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.MaterialType as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SubstanceSourceMaterial.OrganismComponent
		public void Parse(Hl7.Fhir.Model.SubstanceSourceMaterial.OrganismComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "family":
							result.Family = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Family as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "genus":
							result.Genus = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Genus as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "species":
							result.Species = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Species as Hl7.Fhir.Model.CodeableConcept, reader); // 60
							break;
						case "intraspecificType":
							result.IntraspecificType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.IntraspecificType as Hl7.Fhir.Model.CodeableConcept, reader); // 70
							break;
						case "intraspecificDescription":
							result.IntraspecificDescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.IntraspecificDescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 80
							break;
						case "author":
							var newItem_author = new Hl7.Fhir.Model.SubstanceSourceMaterial.AuthorComponent();
							Parse(newItem_author, reader); // 90
							result.Author.Add(newItem_author);
							break;
						case "hybrid":
							result.Hybrid = new Hl7.Fhir.Model.SubstanceSourceMaterial.HybridComponent();
							Parse(result.Hybrid as Hl7.Fhir.Model.SubstanceSourceMaterial.HybridComponent, reader); // 100
							break;
						case "organismGeneral":
							result.OrganismGeneral = new Hl7.Fhir.Model.SubstanceSourceMaterial.OrganismGeneralComponent();
							Parse(result.OrganismGeneral as Hl7.Fhir.Model.SubstanceSourceMaterial.OrganismGeneralComponent, reader); // 110
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SubstanceSourceMaterial.AuthorComponent
		public void Parse(Hl7.Fhir.Model.SubstanceSourceMaterial.AuthorComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "authorType":
							result.AuthorType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.AuthorType as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "authorDescription":
							result.AuthorDescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.AuthorDescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SubstanceSourceMaterial.HybridComponent
		public void Parse(Hl7.Fhir.Model.SubstanceSourceMaterial.HybridComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "maternalOrganismId":
							result.MaternalOrganismIdElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.MaternalOrganismIdElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "maternalOrganismName":
							result.MaternalOrganismNameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.MaternalOrganismNameElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "paternalOrganismId":
							result.PaternalOrganismIdElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PaternalOrganismIdElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "paternalOrganismName":
							result.PaternalOrganismNameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PaternalOrganismNameElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						case "hybridType":
							result.HybridType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.HybridType as Hl7.Fhir.Model.CodeableConcept, reader); // 80
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SubstanceSourceMaterial.OrganismGeneralComponent
		public void Parse(Hl7.Fhir.Model.SubstanceSourceMaterial.OrganismGeneralComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "kingdom":
							result.Kingdom = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Kingdom as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "phylum":
							result.Phylum = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Phylum as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "class":
							result.Class = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Class as Hl7.Fhir.Model.CodeableConcept, reader); // 60
							break;
						case "order":
							result.Order = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Order as Hl7.Fhir.Model.CodeableConcept, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SubstanceSourceMaterial.PartDescriptionComponent
		public void Parse(Hl7.Fhir.Model.SubstanceSourceMaterial.PartDescriptionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "part":
							result.Part = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Part as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "partLocation":
							result.PartLocation = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.PartLocation as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SubstanceSpecification.MoietyComponent
		public void Parse(Hl7.Fhir.Model.SubstanceSpecification.MoietyComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "role":
							result.Role = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Role as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "identifier":
							result.Identifier = new Hl7.Fhir.Model.Identifier();
							Parse(result.Identifier as Hl7.Fhir.Model.Identifier, reader); // 50
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "stereochemistry":
							result.Stereochemistry = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Stereochemistry as Hl7.Fhir.Model.CodeableConcept, reader); // 70
							break;
						case "opticalActivity":
							result.OpticalActivity = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.OpticalActivity as Hl7.Fhir.Model.CodeableConcept, reader); // 80
							break;
						case "molecularFormula":
							result.MolecularFormulaElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.MolecularFormulaElement as Hl7.Fhir.Model.FhirString, reader); // 90
							break;
						case "amountQuantity":
							result.Amount = new Hl7.Fhir.Model.Quantity();
							Parse(result.Amount as Hl7.Fhir.Model.Quantity, reader); // 100
							break;
						case "amountString":
							result.Amount = new Hl7.Fhir.Model.FhirString();
							Parse(result.Amount as Hl7.Fhir.Model.FhirString, reader); // 100
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SubstanceSpecification.PropertyComponent
		public void Parse(Hl7.Fhir.Model.SubstanceSpecification.PropertyComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "category":
							result.Category = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Category as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "parameters":
							result.ParametersElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ParametersElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "definingSubstanceReference":
							result.DefiningSubstance = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.DefiningSubstance as Hl7.Fhir.Model.ResourceReference, reader); // 70
							break;
						case "definingSubstanceCodeableConcept":
							result.DefiningSubstance = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.DefiningSubstance as Hl7.Fhir.Model.CodeableConcept, reader); // 70
							break;
						case "amountQuantity":
							result.Amount = new Hl7.Fhir.Model.Quantity();
							Parse(result.Amount as Hl7.Fhir.Model.Quantity, reader); // 80
							break;
						case "amountString":
							result.Amount = new Hl7.Fhir.Model.FhirString();
							Parse(result.Amount as Hl7.Fhir.Model.FhirString, reader); // 80
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SubstanceSpecification.StructureComponent
		public void Parse(Hl7.Fhir.Model.SubstanceSpecification.StructureComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "stereochemistry":
							result.Stereochemistry = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Stereochemistry as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "opticalActivity":
							result.OpticalActivity = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.OpticalActivity as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "molecularFormula":
							result.MolecularFormulaElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.MolecularFormulaElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "molecularFormulaByMoiety":
							result.MolecularFormulaByMoietyElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.MolecularFormulaByMoietyElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						case "isotope":
							var newItem_isotope = new Hl7.Fhir.Model.SubstanceSpecification.IsotopeComponent();
							Parse(newItem_isotope, reader); // 80
							result.Isotope.Add(newItem_isotope);
							break;
						case "molecularWeight":
							result.MolecularWeight = new Hl7.Fhir.Model.SubstanceSpecification.MolecularWeightComponent();
							Parse(result.MolecularWeight as Hl7.Fhir.Model.SubstanceSpecification.MolecularWeightComponent, reader); // 90
							break;
						case "source":
							var newItem_source = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_source, reader); // 100
							result.Source.Add(newItem_source);
							break;
						case "representation":
							var newItem_representation = new Hl7.Fhir.Model.SubstanceSpecification.RepresentationComponent();
							Parse(newItem_representation, reader); // 110
							result.Representation.Add(newItem_representation);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SubstanceSpecification.IsotopeComponent
		public void Parse(Hl7.Fhir.Model.SubstanceSpecification.IsotopeComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							result.Identifier = new Hl7.Fhir.Model.Identifier();
							Parse(result.Identifier as Hl7.Fhir.Model.Identifier, reader); // 40
							break;
						case "name":
							result.Name = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Name as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "substitution":
							result.Substitution = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Substitution as Hl7.Fhir.Model.CodeableConcept, reader); // 60
							break;
						case "halfLife":
							result.HalfLife = new Hl7.Fhir.Model.Quantity();
							Parse(result.HalfLife as Hl7.Fhir.Model.Quantity, reader); // 70
							break;
						case "molecularWeight":
							result.MolecularWeight = new Hl7.Fhir.Model.SubstanceSpecification.MolecularWeightComponent();
							Parse(result.MolecularWeight as Hl7.Fhir.Model.SubstanceSpecification.MolecularWeightComponent, reader); // 80
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SubstanceSpecification.MolecularWeightComponent
		public void Parse(Hl7.Fhir.Model.SubstanceSpecification.MolecularWeightComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "method":
							result.Method = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Method as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "amount":
							result.Amount = new Hl7.Fhir.Model.Quantity();
							Parse(result.Amount as Hl7.Fhir.Model.Quantity, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SubstanceSpecification.RepresentationComponent
		public void Parse(Hl7.Fhir.Model.SubstanceSpecification.RepresentationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "representation":
							result.RepresentationElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.RepresentationElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "attachment":
							result.Attachment = new Hl7.Fhir.Model.Attachment();
							Parse(result.Attachment as Hl7.Fhir.Model.Attachment, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SubstanceSpecification.CodeComponent
		public void Parse(Hl7.Fhir.Model.SubstanceSpecification.CodeComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "status":
							result.Status = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Status as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "statusDate":
							result.StatusDateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.StatusDateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 60
							break;
						case "comment":
							result.CommentElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.CommentElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						case "source":
							var newItem_source = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_source, reader); // 80
							result.Source.Add(newItem_source);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SubstanceSpecification.NameComponent
		public void Parse(Hl7.Fhir.Model.SubstanceSpecification.NameComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "status":
							result.Status = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Status as Hl7.Fhir.Model.CodeableConcept, reader); // 60
							break;
						case "preferred":
							result.PreferredElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.PreferredElement as Hl7.Fhir.Model.FhirBoolean, reader); // 70
							break;
						case "language":
							var newItem_language = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_language, reader); // 80
							result.Language.Add(newItem_language);
							break;
						case "domain":
							var newItem_domain = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_domain, reader); // 90
							result.Domain.Add(newItem_domain);
							break;
						case "jurisdiction":
							var newItem_jurisdiction = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_jurisdiction, reader); // 100
							result.Jurisdiction.Add(newItem_jurisdiction);
							break;
						case "synonym":
							var newItem_synonym = new Hl7.Fhir.Model.SubstanceSpecification.NameComponent();
							Parse(newItem_synonym, reader); // 110
							result.Synonym.Add(newItem_synonym);
							break;
						case "translation":
							var newItem_translation = new Hl7.Fhir.Model.SubstanceSpecification.NameComponent();
							Parse(newItem_translation, reader); // 120
							result.Translation.Add(newItem_translation);
							break;
						case "official":
							var newItem_official = new Hl7.Fhir.Model.SubstanceSpecification.OfficialComponent();
							Parse(newItem_official, reader); // 130
							result.Official.Add(newItem_official);
							break;
						case "source":
							var newItem_source = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_source, reader); // 140
							result.Source.Add(newItem_source);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SubstanceSpecification.OfficialComponent
		public void Parse(Hl7.Fhir.Model.SubstanceSpecification.OfficialComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "authority":
							result.Authority = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Authority as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "status":
							result.Status = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Status as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.DateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SubstanceSpecification.RelationshipComponent
		public void Parse(Hl7.Fhir.Model.SubstanceSpecification.RelationshipComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "substanceReference":
							result.Substance = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Substance as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						case "substanceCodeableConcept":
							result.Substance = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Substance as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "relationship":
							result.Relationship = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Relationship as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "isDefining":
							result.IsDefiningElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.IsDefiningElement as Hl7.Fhir.Model.FhirBoolean, reader); // 60
							break;
						case "amountQuantity":
							result.Amount = new Hl7.Fhir.Model.Quantity();
							Parse(result.Amount as Hl7.Fhir.Model.Quantity, reader); // 70
							break;
						case "amountRange":
							result.Amount = new Hl7.Fhir.Model.Range();
							Parse(result.Amount as Hl7.Fhir.Model.Range, reader); // 70
							break;
						case "amountRatio":
							result.Amount = new Hl7.Fhir.Model.Ratio();
							Parse(result.Amount as Hl7.Fhir.Model.Ratio, reader); // 70
							break;
						case "amountString":
							result.Amount = new Hl7.Fhir.Model.FhirString();
							Parse(result.Amount as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						case "amountRatioLowLimit":
							result.AmountRatioLowLimit = new Hl7.Fhir.Model.Ratio();
							Parse(result.AmountRatioLowLimit as Hl7.Fhir.Model.Ratio, reader); // 80
							break;
						case "amountType":
							result.AmountType = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.AmountType as Hl7.Fhir.Model.CodeableConcept, reader); // 90
							break;
						case "source":
							var newItem_source = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_source, reader); // 100
							result.Source.Add(newItem_source);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SupplyDelivery.SuppliedItemComponent
		public void Parse(Hl7.Fhir.Model.SupplyDelivery.SuppliedItemComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "quantity":
							result.Quantity = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Quantity as Hl7.Fhir.Model.SimpleQuantity, reader); // 40
							break;
						case "itemCodeableConcept":
							result.Item = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Item as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "itemReference":
							result.Item = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Item as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SupplyRequest.ParameterComponent
		public void Parse(Hl7.Fhir.Model.SupplyRequest.ParameterComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.Code = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Code as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "valueCodeableConcept":
							result.Value = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Value as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "valueQuantity":
							result.Value = new Hl7.Fhir.Model.Quantity();
							Parse(result.Value as Hl7.Fhir.Model.Quantity, reader); // 50
							break;
						case "valueRange":
							result.Value = new Hl7.Fhir.Model.Range();
							Parse(result.Value as Hl7.Fhir.Model.Range, reader); // 50
							break;
						case "valueBoolean":
							result.Value = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.Value as Hl7.Fhir.Model.FhirBoolean, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Task.RestrictionComponent
		public void Parse(Hl7.Fhir.Model.Task.RestrictionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "repetitions":
							result.RepetitionsElement = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.RepetitionsElement as Hl7.Fhir.Model.PositiveInt, reader); // 40
							break;
						case "period":
							result.Period = new Hl7.Fhir.Model.Period();
							Parse(result.Period as Hl7.Fhir.Model.Period, reader); // 50
							break;
						case "recipient":
							var newItem_recipient = new Hl7.Fhir.Model.ResourceReference();
							Parse(newItem_recipient, reader); // 60
							result.Recipient.Add(newItem_recipient);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Task.ParameterComponent
		public void Parse(Hl7.Fhir.Model.Task.ParameterComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "valueBase64Binary":
							result.Value = new Hl7.Fhir.Model.Base64Binary();
							Parse(result.Value as Hl7.Fhir.Model.Base64Binary, reader); // 50
							break;
						case "valueBoolean":
							result.Value = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.Value as Hl7.Fhir.Model.FhirBoolean, reader); // 50
							break;
						case "valueCanonical":
							result.Value = new Hl7.Fhir.Model.Canonical();
							Parse(result.Value as Hl7.Fhir.Model.Canonical, reader); // 50
							break;
						case "valueCode":
							result.Value = new Hl7.Fhir.Model.Code();
							Parse(result.Value as Hl7.Fhir.Model.Code, reader); // 50
							break;
						case "valueDate":
							result.Value = new Hl7.Fhir.Model.Date();
							Parse(result.Value as Hl7.Fhir.Model.Date, reader); // 50
							break;
						case "valueDateTime":
							result.Value = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Value as Hl7.Fhir.Model.FhirDateTime, reader); // 50
							break;
						case "valueDecimal":
							result.Value = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.Value as Hl7.Fhir.Model.FhirDecimal, reader); // 50
							break;
						case "valueId":
							result.Value = new Hl7.Fhir.Model.Id();
							Parse(result.Value as Hl7.Fhir.Model.Id, reader); // 50
							break;
						case "valueInstant":
							result.Value = new Hl7.Fhir.Model.Instant();
							Parse(result.Value as Hl7.Fhir.Model.Instant, reader); // 50
							break;
						case "valueInteger":
							result.Value = new Hl7.Fhir.Model.Integer();
							Parse(result.Value as Hl7.Fhir.Model.Integer, reader); // 50
							break;
						case "valueMarkdown":
							result.Value = new Hl7.Fhir.Model.Markdown();
							Parse(result.Value as Hl7.Fhir.Model.Markdown, reader); // 50
							break;
						case "valueOid":
							result.Value = new Hl7.Fhir.Model.Oid();
							Parse(result.Value as Hl7.Fhir.Model.Oid, reader); // 50
							break;
						case "valuePositiveInt":
							result.Value = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.Value as Hl7.Fhir.Model.PositiveInt, reader); // 50
							break;
						case "valueString":
							result.Value = new Hl7.Fhir.Model.FhirString();
							Parse(result.Value as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "valueTime":
							result.Value = new Hl7.Fhir.Model.Time();
							Parse(result.Value as Hl7.Fhir.Model.Time, reader); // 50
							break;
						case "valueUnsignedInt":
							result.Value = new Hl7.Fhir.Model.UnsignedInt();
							Parse(result.Value as Hl7.Fhir.Model.UnsignedInt, reader); // 50
							break;
						case "valueUri":
							result.Value = new Hl7.Fhir.Model.FhirUri();
							Parse(result.Value as Hl7.Fhir.Model.FhirUri, reader); // 50
							break;
						case "valueUrl":
							result.Value = new Hl7.Fhir.Model.FhirUrl();
							Parse(result.Value as Hl7.Fhir.Model.FhirUrl, reader); // 50
							break;
						case "valueUuid":
							result.Value = new Hl7.Fhir.Model.Uuid();
							Parse(result.Value as Hl7.Fhir.Model.Uuid, reader); // 50
							break;
						case "valueAddress":
							result.Value = new Hl7.Fhir.Model.Address();
							Parse(result.Value as Hl7.Fhir.Model.Address, reader); // 50
							break;
						case "valueAge":
							result.Value = new Hl7.Fhir.Model.Age();
							Parse(result.Value as Hl7.Fhir.Model.Age, reader); // 50
							break;
						case "valueAnnotation":
							result.Value = new Hl7.Fhir.Model.Annotation();
							Parse(result.Value as Hl7.Fhir.Model.Annotation, reader); // 50
							break;
						case "valueAttachment":
							result.Value = new Hl7.Fhir.Model.Attachment();
							Parse(result.Value as Hl7.Fhir.Model.Attachment, reader); // 50
							break;
						case "valueCodeableConcept":
							result.Value = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Value as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "valueCoding":
							result.Value = new Hl7.Fhir.Model.Coding();
							Parse(result.Value as Hl7.Fhir.Model.Coding, reader); // 50
							break;
						case "valueContactPoint":
							result.Value = new Hl7.Fhir.Model.ContactPoint();
							Parse(result.Value as Hl7.Fhir.Model.ContactPoint, reader); // 50
							break;
						case "valueCount":
							result.Value = new Hl7.Fhir.Model.Count();
							Parse(result.Value as Hl7.Fhir.Model.Count, reader); // 50
							break;
						case "valueDistance":
							result.Value = new Hl7.Fhir.Model.Distance();
							Parse(result.Value as Hl7.Fhir.Model.Distance, reader); // 50
							break;
						case "valueDuration":
							result.Value = new Hl7.Fhir.Model.Duration();
							Parse(result.Value as Hl7.Fhir.Model.Duration, reader); // 50
							break;
						case "valueHumanName":
							result.Value = new Hl7.Fhir.Model.HumanName();
							Parse(result.Value as Hl7.Fhir.Model.HumanName, reader); // 50
							break;
						case "valueIdentifier":
							result.Value = new Hl7.Fhir.Model.Identifier();
							Parse(result.Value as Hl7.Fhir.Model.Identifier, reader); // 50
							break;
						case "valueMoney":
							result.Value = new Hl7.Fhir.Model.Money();
							Parse(result.Value as Hl7.Fhir.Model.Money, reader); // 50
							break;
						case "valuePeriod":
							result.Value = new Hl7.Fhir.Model.Period();
							Parse(result.Value as Hl7.Fhir.Model.Period, reader); // 50
							break;
						case "valueQuantity":
							result.Value = new Hl7.Fhir.Model.Quantity();
							Parse(result.Value as Hl7.Fhir.Model.Quantity, reader); // 50
							break;
						case "valueRange":
							result.Value = new Hl7.Fhir.Model.Range();
							Parse(result.Value as Hl7.Fhir.Model.Range, reader); // 50
							break;
						case "valueRatio":
							result.Value = new Hl7.Fhir.Model.Ratio();
							Parse(result.Value as Hl7.Fhir.Model.Ratio, reader); // 50
							break;
						case "valueReference":
							result.Value = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Value as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						case "valueSampledData":
							result.Value = new Hl7.Fhir.Model.SampledData();
							Parse(result.Value as Hl7.Fhir.Model.SampledData, reader); // 50
							break;
						case "valueSignature":
							result.Value = new Hl7.Fhir.Model.Signature();
							Parse(result.Value as Hl7.Fhir.Model.Signature, reader); // 50
							break;
						case "valueTiming":
							result.Value = new Hl7.Fhir.Model.Timing();
							Parse(result.Value as Hl7.Fhir.Model.Timing, reader); // 50
							break;
						case "valueContactDetail":
							result.Value = new Hl7.Fhir.Model.ContactDetail();
							Parse(result.Value as Hl7.Fhir.Model.ContactDetail, reader); // 50
							break;
						case "valueContributor":
							result.Value = new Hl7.Fhir.Model.Contributor();
							Parse(result.Value as Hl7.Fhir.Model.Contributor, reader); // 50
							break;
						case "valueDataRequirement":
							result.Value = new Hl7.Fhir.Model.DataRequirement();
							Parse(result.Value as Hl7.Fhir.Model.DataRequirement, reader); // 50
							break;
						case "valueExpression":
							result.Value = new Hl7.Fhir.Model.Expression();
							Parse(result.Value as Hl7.Fhir.Model.Expression, reader); // 50
							break;
						case "valueParameterDefinition":
							result.Value = new Hl7.Fhir.Model.ParameterDefinition();
							Parse(result.Value as Hl7.Fhir.Model.ParameterDefinition, reader); // 50
							break;
						case "valueRelatedArtifact":
							result.Value = new Hl7.Fhir.Model.RelatedArtifact();
							Parse(result.Value as Hl7.Fhir.Model.RelatedArtifact, reader); // 50
							break;
						case "valueTriggerDefinition":
							result.Value = new Hl7.Fhir.Model.TriggerDefinition();
							Parse(result.Value as Hl7.Fhir.Model.TriggerDefinition, reader); // 50
							break;
						case "valueUsageContext":
							result.Value = new Hl7.Fhir.Model.UsageContext();
							Parse(result.Value as Hl7.Fhir.Model.UsageContext, reader); // 50
							break;
						case "valueDosage":
							result.Value = new Hl7.Fhir.Model.Dosage();
							Parse(result.Value as Hl7.Fhir.Model.Dosage, reader); // 50
							break;
						case "valueMeta":
							result.Value = new Hl7.Fhir.Model.Meta();
							Parse(result.Value as Hl7.Fhir.Model.Meta, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Task.OutputComponent
		public void Parse(Hl7.Fhir.Model.Task.OutputComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Type as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "valueBase64Binary":
							result.Value = new Hl7.Fhir.Model.Base64Binary();
							Parse(result.Value as Hl7.Fhir.Model.Base64Binary, reader); // 50
							break;
						case "valueBoolean":
							result.Value = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.Value as Hl7.Fhir.Model.FhirBoolean, reader); // 50
							break;
						case "valueCanonical":
							result.Value = new Hl7.Fhir.Model.Canonical();
							Parse(result.Value as Hl7.Fhir.Model.Canonical, reader); // 50
							break;
						case "valueCode":
							result.Value = new Hl7.Fhir.Model.Code();
							Parse(result.Value as Hl7.Fhir.Model.Code, reader); // 50
							break;
						case "valueDate":
							result.Value = new Hl7.Fhir.Model.Date();
							Parse(result.Value as Hl7.Fhir.Model.Date, reader); // 50
							break;
						case "valueDateTime":
							result.Value = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Value as Hl7.Fhir.Model.FhirDateTime, reader); // 50
							break;
						case "valueDecimal":
							result.Value = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.Value as Hl7.Fhir.Model.FhirDecimal, reader); // 50
							break;
						case "valueId":
							result.Value = new Hl7.Fhir.Model.Id();
							Parse(result.Value as Hl7.Fhir.Model.Id, reader); // 50
							break;
						case "valueInstant":
							result.Value = new Hl7.Fhir.Model.Instant();
							Parse(result.Value as Hl7.Fhir.Model.Instant, reader); // 50
							break;
						case "valueInteger":
							result.Value = new Hl7.Fhir.Model.Integer();
							Parse(result.Value as Hl7.Fhir.Model.Integer, reader); // 50
							break;
						case "valueMarkdown":
							result.Value = new Hl7.Fhir.Model.Markdown();
							Parse(result.Value as Hl7.Fhir.Model.Markdown, reader); // 50
							break;
						case "valueOid":
							result.Value = new Hl7.Fhir.Model.Oid();
							Parse(result.Value as Hl7.Fhir.Model.Oid, reader); // 50
							break;
						case "valuePositiveInt":
							result.Value = new Hl7.Fhir.Model.PositiveInt();
							Parse(result.Value as Hl7.Fhir.Model.PositiveInt, reader); // 50
							break;
						case "valueString":
							result.Value = new Hl7.Fhir.Model.FhirString();
							Parse(result.Value as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "valueTime":
							result.Value = new Hl7.Fhir.Model.Time();
							Parse(result.Value as Hl7.Fhir.Model.Time, reader); // 50
							break;
						case "valueUnsignedInt":
							result.Value = new Hl7.Fhir.Model.UnsignedInt();
							Parse(result.Value as Hl7.Fhir.Model.UnsignedInt, reader); // 50
							break;
						case "valueUri":
							result.Value = new Hl7.Fhir.Model.FhirUri();
							Parse(result.Value as Hl7.Fhir.Model.FhirUri, reader); // 50
							break;
						case "valueUrl":
							result.Value = new Hl7.Fhir.Model.FhirUrl();
							Parse(result.Value as Hl7.Fhir.Model.FhirUrl, reader); // 50
							break;
						case "valueUuid":
							result.Value = new Hl7.Fhir.Model.Uuid();
							Parse(result.Value as Hl7.Fhir.Model.Uuid, reader); // 50
							break;
						case "valueAddress":
							result.Value = new Hl7.Fhir.Model.Address();
							Parse(result.Value as Hl7.Fhir.Model.Address, reader); // 50
							break;
						case "valueAge":
							result.Value = new Hl7.Fhir.Model.Age();
							Parse(result.Value as Hl7.Fhir.Model.Age, reader); // 50
							break;
						case "valueAnnotation":
							result.Value = new Hl7.Fhir.Model.Annotation();
							Parse(result.Value as Hl7.Fhir.Model.Annotation, reader); // 50
							break;
						case "valueAttachment":
							result.Value = new Hl7.Fhir.Model.Attachment();
							Parse(result.Value as Hl7.Fhir.Model.Attachment, reader); // 50
							break;
						case "valueCodeableConcept":
							result.Value = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Value as Hl7.Fhir.Model.CodeableConcept, reader); // 50
							break;
						case "valueCoding":
							result.Value = new Hl7.Fhir.Model.Coding();
							Parse(result.Value as Hl7.Fhir.Model.Coding, reader); // 50
							break;
						case "valueContactPoint":
							result.Value = new Hl7.Fhir.Model.ContactPoint();
							Parse(result.Value as Hl7.Fhir.Model.ContactPoint, reader); // 50
							break;
						case "valueCount":
							result.Value = new Hl7.Fhir.Model.Count();
							Parse(result.Value as Hl7.Fhir.Model.Count, reader); // 50
							break;
						case "valueDistance":
							result.Value = new Hl7.Fhir.Model.Distance();
							Parse(result.Value as Hl7.Fhir.Model.Distance, reader); // 50
							break;
						case "valueDuration":
							result.Value = new Hl7.Fhir.Model.Duration();
							Parse(result.Value as Hl7.Fhir.Model.Duration, reader); // 50
							break;
						case "valueHumanName":
							result.Value = new Hl7.Fhir.Model.HumanName();
							Parse(result.Value as Hl7.Fhir.Model.HumanName, reader); // 50
							break;
						case "valueIdentifier":
							result.Value = new Hl7.Fhir.Model.Identifier();
							Parse(result.Value as Hl7.Fhir.Model.Identifier, reader); // 50
							break;
						case "valueMoney":
							result.Value = new Hl7.Fhir.Model.Money();
							Parse(result.Value as Hl7.Fhir.Model.Money, reader); // 50
							break;
						case "valuePeriod":
							result.Value = new Hl7.Fhir.Model.Period();
							Parse(result.Value as Hl7.Fhir.Model.Period, reader); // 50
							break;
						case "valueQuantity":
							result.Value = new Hl7.Fhir.Model.Quantity();
							Parse(result.Value as Hl7.Fhir.Model.Quantity, reader); // 50
							break;
						case "valueRange":
							result.Value = new Hl7.Fhir.Model.Range();
							Parse(result.Value as Hl7.Fhir.Model.Range, reader); // 50
							break;
						case "valueRatio":
							result.Value = new Hl7.Fhir.Model.Ratio();
							Parse(result.Value as Hl7.Fhir.Model.Ratio, reader); // 50
							break;
						case "valueReference":
							result.Value = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Value as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						case "valueSampledData":
							result.Value = new Hl7.Fhir.Model.SampledData();
							Parse(result.Value as Hl7.Fhir.Model.SampledData, reader); // 50
							break;
						case "valueSignature":
							result.Value = new Hl7.Fhir.Model.Signature();
							Parse(result.Value as Hl7.Fhir.Model.Signature, reader); // 50
							break;
						case "valueTiming":
							result.Value = new Hl7.Fhir.Model.Timing();
							Parse(result.Value as Hl7.Fhir.Model.Timing, reader); // 50
							break;
						case "valueContactDetail":
							result.Value = new Hl7.Fhir.Model.ContactDetail();
							Parse(result.Value as Hl7.Fhir.Model.ContactDetail, reader); // 50
							break;
						case "valueContributor":
							result.Value = new Hl7.Fhir.Model.Contributor();
							Parse(result.Value as Hl7.Fhir.Model.Contributor, reader); // 50
							break;
						case "valueDataRequirement":
							result.Value = new Hl7.Fhir.Model.DataRequirement();
							Parse(result.Value as Hl7.Fhir.Model.DataRequirement, reader); // 50
							break;
						case "valueExpression":
							result.Value = new Hl7.Fhir.Model.Expression();
							Parse(result.Value as Hl7.Fhir.Model.Expression, reader); // 50
							break;
						case "valueParameterDefinition":
							result.Value = new Hl7.Fhir.Model.ParameterDefinition();
							Parse(result.Value as Hl7.Fhir.Model.ParameterDefinition, reader); // 50
							break;
						case "valueRelatedArtifact":
							result.Value = new Hl7.Fhir.Model.RelatedArtifact();
							Parse(result.Value as Hl7.Fhir.Model.RelatedArtifact, reader); // 50
							break;
						case "valueTriggerDefinition":
							result.Value = new Hl7.Fhir.Model.TriggerDefinition();
							Parse(result.Value as Hl7.Fhir.Model.TriggerDefinition, reader); // 50
							break;
						case "valueUsageContext":
							result.Value = new Hl7.Fhir.Model.UsageContext();
							Parse(result.Value as Hl7.Fhir.Model.UsageContext, reader); // 50
							break;
						case "valueDosage":
							result.Value = new Hl7.Fhir.Model.Dosage();
							Parse(result.Value as Hl7.Fhir.Model.Dosage, reader); // 50
							break;
						case "valueMeta":
							result.Value = new Hl7.Fhir.Model.Meta();
							Parse(result.Value as Hl7.Fhir.Model.Meta, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TerminologyCapabilities.SoftwareComponent
		public void Parse(Hl7.Fhir.Model.TerminologyCapabilities.SoftwareComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TerminologyCapabilities.ImplementationComponent
		public void Parse(Hl7.Fhir.Model.TerminologyCapabilities.ImplementationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUrl();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUrl, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TerminologyCapabilities.CodeSystemComponent
		public void Parse(Hl7.Fhir.Model.TerminologyCapabilities.CodeSystemComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "uri":
							result.UriElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.UriElement as Hl7.Fhir.Model.Canonical, reader); // 40
							break;
						case "version":
							var newItem_version = new Hl7.Fhir.Model.TerminologyCapabilities.VersionComponent();
							Parse(newItem_version, reader); // 50
							result.Version.Add(newItem_version);
							break;
						case "subsumption":
							result.SubsumptionElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.SubsumptionElement as Hl7.Fhir.Model.FhirBoolean, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TerminologyCapabilities.VersionComponent
		public void Parse(Hl7.Fhir.Model.TerminologyCapabilities.VersionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.CodeElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.CodeElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "isDefault":
							result.IsDefaultElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.IsDefaultElement as Hl7.Fhir.Model.FhirBoolean, reader); // 50
							break;
						case "compositional":
							result.CompositionalElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.CompositionalElement as Hl7.Fhir.Model.FhirBoolean, reader); // 60
							break;
						case "language":
							var newItem_language = new Hl7.Fhir.Model.Code();
							Parse(newItem_language, reader); // 70
							result.LanguageElement.Add(newItem_language);
							break;
						case "filter":
							var newItem_filter = new Hl7.Fhir.Model.TerminologyCapabilities.FilterComponent();
							Parse(newItem_filter, reader); // 80
							result.Filter.Add(newItem_filter);
							break;
						case "property":
							var newItem_property = new Hl7.Fhir.Model.Code();
							Parse(newItem_property, reader); // 90
							result.PropertyElement.Add(newItem_property);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TerminologyCapabilities.FilterComponent
		public void Parse(Hl7.Fhir.Model.TerminologyCapabilities.FilterComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.CodeElement = new Hl7.Fhir.Model.Code();
							Parse(result.CodeElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "op":
							var newItem_op = new Hl7.Fhir.Model.Code();
							Parse(newItem_op, reader); // 50
							result.OpElement.Add(newItem_op);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TerminologyCapabilities.ExpansionComponent
		public void Parse(Hl7.Fhir.Model.TerminologyCapabilities.ExpansionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "hierarchical":
							result.HierarchicalElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.HierarchicalElement as Hl7.Fhir.Model.FhirBoolean, reader); // 40
							break;
						case "paging":
							result.PagingElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.PagingElement as Hl7.Fhir.Model.FhirBoolean, reader); // 50
							break;
						case "incomplete":
							result.IncompleteElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.IncompleteElement as Hl7.Fhir.Model.FhirBoolean, reader); // 60
							break;
						case "parameter":
							var newItem_parameter = new Hl7.Fhir.Model.TerminologyCapabilities.ParameterComponent();
							Parse(newItem_parameter, reader); // 70
							result.Parameter.Add(newItem_parameter);
							break;
						case "textFilter":
							result.TextFilter = new Hl7.Fhir.Model.Markdown();
							Parse(result.TextFilter as Hl7.Fhir.Model.Markdown, reader); // 80
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TerminologyCapabilities.ParameterComponent
		public void Parse(Hl7.Fhir.Model.TerminologyCapabilities.ParameterComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.Code();
							Parse(result.NameElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "documentation":
							result.DocumentationElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DocumentationElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TerminologyCapabilities.ValidateCodeComponent
		public void Parse(Hl7.Fhir.Model.TerminologyCapabilities.ValidateCodeComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "translations":
							result.TranslationsElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.TranslationsElement as Hl7.Fhir.Model.FhirBoolean, reader); // 40
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TerminologyCapabilities.TranslationComponent
		public void Parse(Hl7.Fhir.Model.TerminologyCapabilities.TranslationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "needsMap":
							result.NeedsMapElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.NeedsMapElement as Hl7.Fhir.Model.FhirBoolean, reader); // 40
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TerminologyCapabilities.ClosureComponent
		public void Parse(Hl7.Fhir.Model.TerminologyCapabilities.ClosureComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "translation":
							result.TranslationElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.TranslationElement as Hl7.Fhir.Model.FhirBoolean, reader); // 40
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TestReport.ParticipantComponent
		public void Parse(Hl7.Fhir.Model.TestReport.ParticipantComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.TypeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.TestReport.TestReportParticipantType>();
							Parse(result.TypeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.TestReport.TestReportParticipantType>, reader); // 40
							break;
						case "uri":
							result.UriElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UriElement as Hl7.Fhir.Model.FhirUri, reader); // 50
							break;
						case "display":
							result.DisplayElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DisplayElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TestReport.SetupComponent
		public void Parse(Hl7.Fhir.Model.TestReport.SetupComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "action":
							var newItem_action = new Hl7.Fhir.Model.TestReport.SetupActionComponent();
							Parse(newItem_action, reader); // 40
							result.Action.Add(newItem_action);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TestReport.SetupActionComponent
		public void Parse(Hl7.Fhir.Model.TestReport.SetupActionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "operation":
							result.Operation = new Hl7.Fhir.Model.TestReport.OperationComponent();
							Parse(result.Operation as Hl7.Fhir.Model.TestReport.OperationComponent, reader); // 40
							break;
						case "assert":
							result.Assert = new Hl7.Fhir.Model.TestReport.AssertComponent();
							Parse(result.Assert as Hl7.Fhir.Model.TestReport.AssertComponent, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TestReport.OperationComponent
		public void Parse(Hl7.Fhir.Model.TestReport.OperationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "result":
							result.ResultElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.TestReport.TestReportActionResult>();
							Parse(result.ResultElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.TestReport.TestReportActionResult>, reader); // 40
							break;
						case "message":
							result.Message = new Hl7.Fhir.Model.Markdown();
							Parse(result.Message as Hl7.Fhir.Model.Markdown, reader); // 50
							break;
						case "detail":
							result.DetailElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.DetailElement as Hl7.Fhir.Model.FhirUri, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TestReport.AssertComponent
		public void Parse(Hl7.Fhir.Model.TestReport.AssertComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "result":
							result.ResultElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.TestReport.TestReportActionResult>();
							Parse(result.ResultElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.TestReport.TestReportActionResult>, reader); // 40
							break;
						case "message":
							result.Message = new Hl7.Fhir.Model.Markdown();
							Parse(result.Message as Hl7.Fhir.Model.Markdown, reader); // 50
							break;
						case "detail":
							result.DetailElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DetailElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TestReport.TestComponent
		public void Parse(Hl7.Fhir.Model.TestReport.TestComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "action":
							var newItem_action = new Hl7.Fhir.Model.TestReport.TestActionComponent();
							Parse(newItem_action, reader); // 60
							result.Action.Add(newItem_action);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TestReport.TestActionComponent
		public void Parse(Hl7.Fhir.Model.TestReport.TestActionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "operation":
							result.Operation = new Hl7.Fhir.Model.TestReport.OperationComponent();
							Parse(result.Operation as Hl7.Fhir.Model.TestReport.OperationComponent, reader); // 40
							break;
						case "assert":
							result.Assert = new Hl7.Fhir.Model.TestReport.AssertComponent();
							Parse(result.Assert as Hl7.Fhir.Model.TestReport.AssertComponent, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TestReport.TeardownComponent
		public void Parse(Hl7.Fhir.Model.TestReport.TeardownComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "action":
							var newItem_action = new Hl7.Fhir.Model.TestReport.TeardownActionComponent();
							Parse(newItem_action, reader); // 40
							result.Action.Add(newItem_action);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TestReport.TeardownActionComponent
		public void Parse(Hl7.Fhir.Model.TestReport.TeardownActionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "operation":
							result.Operation = new Hl7.Fhir.Model.TestReport.OperationComponent();
							Parse(result.Operation as Hl7.Fhir.Model.TestReport.OperationComponent, reader); // 40
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TestScript.OriginComponent
		public void Parse(Hl7.Fhir.Model.TestScript.OriginComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "index":
							result.IndexElement = new Hl7.Fhir.Model.Integer();
							Parse(result.IndexElement as Hl7.Fhir.Model.Integer, reader); // 40
							break;
						case "profile":
							result.Profile = new Hl7.Fhir.Model.Coding();
							Parse(result.Profile as Hl7.Fhir.Model.Coding, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TestScript.DestinationComponent
		public void Parse(Hl7.Fhir.Model.TestScript.DestinationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "index":
							result.IndexElement = new Hl7.Fhir.Model.Integer();
							Parse(result.IndexElement as Hl7.Fhir.Model.Integer, reader); // 40
							break;
						case "profile":
							result.Profile = new Hl7.Fhir.Model.Coding();
							Parse(result.Profile as Hl7.Fhir.Model.Coding, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TestScript.MetadataComponent
		public void Parse(Hl7.Fhir.Model.TestScript.MetadataComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "link":
							var newItem_link = new Hl7.Fhir.Model.TestScript.LinkComponent();
							Parse(newItem_link, reader); // 40
							result.Link.Add(newItem_link);
							break;
						case "capability":
							var newItem_capability = new Hl7.Fhir.Model.TestScript.CapabilityComponent();
							Parse(newItem_capability, reader); // 50
							result.Capability.Add(newItem_capability);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TestScript.LinkComponent
		public void Parse(Hl7.Fhir.Model.TestScript.LinkComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirUri, reader); // 40
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TestScript.CapabilityComponent
		public void Parse(Hl7.Fhir.Model.TestScript.CapabilityComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "required":
							result.RequiredElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.RequiredElement as Hl7.Fhir.Model.FhirBoolean, reader); // 40
							break;
						case "validated":
							result.ValidatedElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.ValidatedElement as Hl7.Fhir.Model.FhirBoolean, reader); // 50
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "origin":
							var newItem_origin = new Hl7.Fhir.Model.Integer();
							Parse(newItem_origin, reader); // 70
							result.OriginElement.Add(newItem_origin);
							break;
						case "destination":
							result.DestinationElement = new Hl7.Fhir.Model.Integer();
							Parse(result.DestinationElement as Hl7.Fhir.Model.Integer, reader); // 80
							break;
						case "link":
							var newItem_link = new Hl7.Fhir.Model.FhirUri();
							Parse(newItem_link, reader); // 90
							result.LinkElement.Add(newItem_link);
							break;
						case "capabilities":
							result.CapabilitiesElement = new Hl7.Fhir.Model.Canonical();
							Parse(result.CapabilitiesElement as Hl7.Fhir.Model.Canonical, reader); // 100
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TestScript.FixtureComponent
		public void Parse(Hl7.Fhir.Model.TestScript.FixtureComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "autocreate":
							result.AutocreateElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.AutocreateElement as Hl7.Fhir.Model.FhirBoolean, reader); // 40
							break;
						case "autodelete":
							result.AutodeleteElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.AutodeleteElement as Hl7.Fhir.Model.FhirBoolean, reader); // 50
							break;
						case "resource":
							result.Resource = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Resource as Hl7.Fhir.Model.ResourceReference, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TestScript.VariableComponent
		public void Parse(Hl7.Fhir.Model.TestScript.VariableComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "defaultValue":
							result.DefaultValueElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DefaultValueElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "expression":
							result.ExpressionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ExpressionElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						case "headerField":
							result.HeaderFieldElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.HeaderFieldElement as Hl7.Fhir.Model.FhirString, reader); // 80
							break;
						case "hint":
							result.HintElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.HintElement as Hl7.Fhir.Model.FhirString, reader); // 90
							break;
						case "path":
							result.PathElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PathElement as Hl7.Fhir.Model.FhirString, reader); // 100
							break;
						case "sourceId":
							result.SourceIdElement = new Hl7.Fhir.Model.Id();
							Parse(result.SourceIdElement as Hl7.Fhir.Model.Id, reader); // 110
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TestScript.SetupComponent
		public void Parse(Hl7.Fhir.Model.TestScript.SetupComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "action":
							var newItem_action = new Hl7.Fhir.Model.TestScript.SetupActionComponent();
							Parse(newItem_action, reader); // 40
							result.Action.Add(newItem_action);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TestScript.SetupActionComponent
		public void Parse(Hl7.Fhir.Model.TestScript.SetupActionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "operation":
							result.Operation = new Hl7.Fhir.Model.TestScript.OperationComponent();
							Parse(result.Operation as Hl7.Fhir.Model.TestScript.OperationComponent, reader); // 40
							break;
						case "assert":
							result.Assert = new Hl7.Fhir.Model.TestScript.AssertComponent();
							Parse(result.Assert as Hl7.Fhir.Model.TestScript.AssertComponent, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TestScript.OperationComponent
		public void Parse(Hl7.Fhir.Model.TestScript.OperationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "type":
							result.Type = new Hl7.Fhir.Model.Coding();
							Parse(result.Type as Hl7.Fhir.Model.Coding, reader); // 40
							break;
						case "resource":
							result.ResourceElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.TestScript.FHIRDefinedType>();
							Parse(result.ResourceElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.TestScript.FHIRDefinedType>, reader); // 50
							break;
						case "label":
							result.LabelElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.LabelElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						case "accept":
							result.AcceptElement = new Hl7.Fhir.Model.Code();
							Parse(result.AcceptElement as Hl7.Fhir.Model.Code, reader); // 80
							break;
						case "contentType":
							result.ContentTypeElement = new Hl7.Fhir.Model.Code();
							Parse(result.ContentTypeElement as Hl7.Fhir.Model.Code, reader); // 90
							break;
						case "destination":
							result.DestinationElement = new Hl7.Fhir.Model.Integer();
							Parse(result.DestinationElement as Hl7.Fhir.Model.Integer, reader); // 100
							break;
						case "encodeRequestUrl":
							result.EncodeRequestUrlElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.EncodeRequestUrlElement as Hl7.Fhir.Model.FhirBoolean, reader); // 110
							break;
						case "method":
							result.MethodElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.TestScript.TestScriptRequestMethodCode>();
							Parse(result.MethodElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.TestScript.TestScriptRequestMethodCode>, reader); // 120
							break;
						case "origin":
							result.OriginElement = new Hl7.Fhir.Model.Integer();
							Parse(result.OriginElement as Hl7.Fhir.Model.Integer, reader); // 130
							break;
						case "params":
							result.ParamsElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ParamsElement as Hl7.Fhir.Model.FhirString, reader); // 140
							break;
						case "requestHeader":
							var newItem_requestHeader = new Hl7.Fhir.Model.TestScript.RequestHeaderComponent();
							Parse(newItem_requestHeader, reader); // 150
							result.RequestHeader.Add(newItem_requestHeader);
							break;
						case "requestId":
							result.RequestIdElement = new Hl7.Fhir.Model.Id();
							Parse(result.RequestIdElement as Hl7.Fhir.Model.Id, reader); // 160
							break;
						case "responseId":
							result.ResponseIdElement = new Hl7.Fhir.Model.Id();
							Parse(result.ResponseIdElement as Hl7.Fhir.Model.Id, reader); // 170
							break;
						case "sourceId":
							result.SourceIdElement = new Hl7.Fhir.Model.Id();
							Parse(result.SourceIdElement as Hl7.Fhir.Model.Id, reader); // 180
							break;
						case "targetId":
							result.TargetIdElement = new Hl7.Fhir.Model.Id();
							Parse(result.TargetIdElement as Hl7.Fhir.Model.Id, reader); // 190
							break;
						case "url":
							result.UrlElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.UrlElement as Hl7.Fhir.Model.FhirString, reader); // 200
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TestScript.RequestHeaderComponent
		public void Parse(Hl7.Fhir.Model.TestScript.RequestHeaderComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "field":
							result.FieldElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.FieldElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "value":
							result.ValueElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ValueElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TestScript.AssertComponent
		public void Parse(Hl7.Fhir.Model.TestScript.AssertComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "label":
							result.LabelElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.LabelElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "direction":
							result.DirectionElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.TestScript.AssertionDirectionType>();
							Parse(result.DirectionElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.TestScript.AssertionDirectionType>, reader); // 60
							break;
						case "compareToSourceId":
							result.CompareToSourceIdElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.CompareToSourceIdElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						case "compareToSourceExpression":
							result.CompareToSourceExpressionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.CompareToSourceExpressionElement as Hl7.Fhir.Model.FhirString, reader); // 80
							break;
						case "compareToSourcePath":
							result.CompareToSourcePathElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.CompareToSourcePathElement as Hl7.Fhir.Model.FhirString, reader); // 90
							break;
						case "contentType":
							result.ContentTypeElement = new Hl7.Fhir.Model.Code();
							Parse(result.ContentTypeElement as Hl7.Fhir.Model.Code, reader); // 100
							break;
						case "expression":
							result.ExpressionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ExpressionElement as Hl7.Fhir.Model.FhirString, reader); // 110
							break;
						case "headerField":
							result.HeaderFieldElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.HeaderFieldElement as Hl7.Fhir.Model.FhirString, reader); // 120
							break;
						case "minimumId":
							result.MinimumIdElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.MinimumIdElement as Hl7.Fhir.Model.FhirString, reader); // 130
							break;
						case "navigationLinks":
							result.NavigationLinksElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.NavigationLinksElement as Hl7.Fhir.Model.FhirBoolean, reader); // 140
							break;
						case "operator":
							result.OperatorElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.TestScript.AssertionOperatorType>();
							Parse(result.OperatorElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.TestScript.AssertionOperatorType>, reader); // 150
							break;
						case "path":
							result.PathElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.PathElement as Hl7.Fhir.Model.FhirString, reader); // 160
							break;
						case "requestMethod":
							result.RequestMethodElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.TestScript.TestScriptRequestMethodCode>();
							Parse(result.RequestMethodElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.TestScript.TestScriptRequestMethodCode>, reader); // 170
							break;
						case "requestURL":
							result.RequestURLElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.RequestURLElement as Hl7.Fhir.Model.FhirString, reader); // 180
							break;
						case "resource":
							result.ResourceElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.TestScript.FHIRDefinedType>();
							Parse(result.ResourceElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.TestScript.FHIRDefinedType>, reader); // 190
							break;
						case "response":
							result.ResponseElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.TestScript.AssertionResponseTypes>();
							Parse(result.ResponseElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.TestScript.AssertionResponseTypes>, reader); // 200
							break;
						case "responseCode":
							result.ResponseCodeElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ResponseCodeElement as Hl7.Fhir.Model.FhirString, reader); // 210
							break;
						case "sourceId":
							result.SourceIdElement = new Hl7.Fhir.Model.Id();
							Parse(result.SourceIdElement as Hl7.Fhir.Model.Id, reader); // 220
							break;
						case "validateProfileId":
							result.ValidateProfileIdElement = new Hl7.Fhir.Model.Id();
							Parse(result.ValidateProfileIdElement as Hl7.Fhir.Model.Id, reader); // 230
							break;
						case "value":
							result.ValueElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ValueElement as Hl7.Fhir.Model.FhirString, reader); // 240
							break;
						case "warningOnly":
							result.WarningOnlyElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.WarningOnlyElement as Hl7.Fhir.Model.FhirBoolean, reader); // 250
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TestScript.TestComponent
		public void Parse(Hl7.Fhir.Model.TestScript.TestComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "description":
							result.DescriptionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DescriptionElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "action":
							var newItem_action = new Hl7.Fhir.Model.TestScript.TestActionComponent();
							Parse(newItem_action, reader); // 60
							result.Action.Add(newItem_action);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TestScript.TestActionComponent
		public void Parse(Hl7.Fhir.Model.TestScript.TestActionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "operation":
							result.Operation = new Hl7.Fhir.Model.TestScript.OperationComponent();
							Parse(result.Operation as Hl7.Fhir.Model.TestScript.OperationComponent, reader); // 40
							break;
						case "assert":
							result.Assert = new Hl7.Fhir.Model.TestScript.AssertComponent();
							Parse(result.Assert as Hl7.Fhir.Model.TestScript.AssertComponent, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TestScript.TeardownComponent
		public void Parse(Hl7.Fhir.Model.TestScript.TeardownComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "action":
							var newItem_action = new Hl7.Fhir.Model.TestScript.TeardownActionComponent();
							Parse(newItem_action, reader); // 40
							result.Action.Add(newItem_action);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TestScript.TeardownActionComponent
		public void Parse(Hl7.Fhir.Model.TestScript.TeardownActionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "operation":
							result.Operation = new Hl7.Fhir.Model.TestScript.OperationComponent();
							Parse(result.Operation as Hl7.Fhir.Model.TestScript.OperationComponent, reader); // 40
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ValueSet.ComposeComponent
		public void Parse(Hl7.Fhir.Model.ValueSet.ComposeComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "lockedDate":
							result.LockedDateElement = new Hl7.Fhir.Model.Date();
							Parse(result.LockedDateElement as Hl7.Fhir.Model.Date, reader); // 40
							break;
						case "inactive":
							result.InactiveElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.InactiveElement as Hl7.Fhir.Model.FhirBoolean, reader); // 50
							break;
						case "include":
							var newItem_include = new Hl7.Fhir.Model.ValueSet.ConceptSetComponent();
							Parse(newItem_include, reader); // 60
							result.Include.Add(newItem_include);
							break;
						case "exclude":
							var newItem_exclude = new Hl7.Fhir.Model.ValueSet.ConceptSetComponent();
							Parse(newItem_exclude, reader); // 70
							result.Exclude.Add(newItem_exclude);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ValueSet.ConceptSetComponent
		public void Parse(Hl7.Fhir.Model.ValueSet.ConceptSetComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "system":
							result.SystemElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.SystemElement as Hl7.Fhir.Model.FhirUri, reader); // 40
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "concept":
							var newItem_concept = new Hl7.Fhir.Model.ValueSet.ConceptReferenceComponent();
							Parse(newItem_concept, reader); // 60
							result.Concept.Add(newItem_concept);
							break;
						case "filter":
							var newItem_filter = new Hl7.Fhir.Model.ValueSet.FilterComponent();
							Parse(newItem_filter, reader); // 70
							result.Filter.Add(newItem_filter);
							break;
						case "valueSet":
							var newItem_valueSet = new Hl7.Fhir.Model.Canonical();
							Parse(newItem_valueSet, reader); // 80
							result.ValueSetElement.Add(newItem_valueSet);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ValueSet.ConceptReferenceComponent
		public void Parse(Hl7.Fhir.Model.ValueSet.ConceptReferenceComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "code":
							result.CodeElement = new Hl7.Fhir.Model.Code();
							Parse(result.CodeElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "display":
							result.DisplayElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DisplayElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "designation":
							var newItem_designation = new Hl7.Fhir.Model.ValueSet.DesignationComponent();
							Parse(newItem_designation, reader); // 60
							result.Designation.Add(newItem_designation);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ValueSet.DesignationComponent
		public void Parse(Hl7.Fhir.Model.ValueSet.DesignationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "language":
							result.LanguageElement = new Hl7.Fhir.Model.Code();
							Parse(result.LanguageElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "use":
							result.Use = new Hl7.Fhir.Model.Coding();
							Parse(result.Use as Hl7.Fhir.Model.Coding, reader); // 50
							break;
						case "value":
							result.ValueElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ValueElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ValueSet.FilterComponent
		public void Parse(Hl7.Fhir.Model.ValueSet.FilterComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "property":
							result.PropertyElement = new Hl7.Fhir.Model.Code();
							Parse(result.PropertyElement as Hl7.Fhir.Model.Code, reader); // 40
							break;
						case "op":
							result.OpElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FilterOperator>();
							Parse(result.OpElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.FilterOperator>, reader); // 50
							break;
						case "value":
							result.ValueElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ValueElement as Hl7.Fhir.Model.FhirString, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ValueSet.ExpansionComponent
		public void Parse(Hl7.Fhir.Model.ValueSet.ExpansionComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "identifier":
							result.IdentifierElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.IdentifierElement as Hl7.Fhir.Model.FhirUri, reader); // 40
							break;
						case "timestamp":
							result.TimestampElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.TimestampElement as Hl7.Fhir.Model.FhirDateTime, reader); // 50
							break;
						case "total":
							result.TotalElement = new Hl7.Fhir.Model.Integer();
							Parse(result.TotalElement as Hl7.Fhir.Model.Integer, reader); // 60
							break;
						case "offset":
							result.OffsetElement = new Hl7.Fhir.Model.Integer();
							Parse(result.OffsetElement as Hl7.Fhir.Model.Integer, reader); // 70
							break;
						case "parameter":
							var newItem_parameter = new Hl7.Fhir.Model.ValueSet.ParameterComponent();
							Parse(newItem_parameter, reader); // 80
							result.Parameter.Add(newItem_parameter);
							break;
						case "contains":
							var newItem_contains = new Hl7.Fhir.Model.ValueSet.ContainsComponent();
							Parse(newItem_contains, reader); // 90
							result.Contains.Add(newItem_contains);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ValueSet.ParameterComponent
		public void Parse(Hl7.Fhir.Model.ValueSet.ParameterComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "name":
							result.NameElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.NameElement as Hl7.Fhir.Model.FhirString, reader); // 40
							break;
						case "valueString":
							result.Value = new Hl7.Fhir.Model.FhirString();
							Parse(result.Value as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "valueBoolean":
							result.Value = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.Value as Hl7.Fhir.Model.FhirBoolean, reader); // 50
							break;
						case "valueInteger":
							result.Value = new Hl7.Fhir.Model.Integer();
							Parse(result.Value as Hl7.Fhir.Model.Integer, reader); // 50
							break;
						case "valueDecimal":
							result.Value = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.Value as Hl7.Fhir.Model.FhirDecimal, reader); // 50
							break;
						case "valueUri":
							result.Value = new Hl7.Fhir.Model.FhirUri();
							Parse(result.Value as Hl7.Fhir.Model.FhirUri, reader); // 50
							break;
						case "valueCode":
							result.Value = new Hl7.Fhir.Model.Code();
							Parse(result.Value as Hl7.Fhir.Model.Code, reader); // 50
							break;
						case "valueDateTime":
							result.Value = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.Value as Hl7.Fhir.Model.FhirDateTime, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ValueSet.ContainsComponent
		public void Parse(Hl7.Fhir.Model.ValueSet.ContainsComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "system":
							result.SystemElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.SystemElement as Hl7.Fhir.Model.FhirUri, reader); // 40
							break;
						case "abstract":
							result.AbstractElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.AbstractElement as Hl7.Fhir.Model.FhirBoolean, reader); // 50
							break;
						case "inactive":
							result.InactiveElement = new Hl7.Fhir.Model.FhirBoolean();
							Parse(result.InactiveElement as Hl7.Fhir.Model.FhirBoolean, reader); // 60
							break;
						case "version":
							result.VersionElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.VersionElement as Hl7.Fhir.Model.FhirString, reader); // 70
							break;
						case "code":
							result.CodeElement = new Hl7.Fhir.Model.Code();
							Parse(result.CodeElement as Hl7.Fhir.Model.Code, reader); // 80
							break;
						case "display":
							result.DisplayElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.DisplayElement as Hl7.Fhir.Model.FhirString, reader); // 90
							break;
						case "designation":
							var newItem_designation = new Hl7.Fhir.Model.ValueSet.DesignationComponent();
							Parse(newItem_designation, reader); // 100
							result.Designation.Add(newItem_designation);
							break;
						case "contains":
							var newItem_contains = new Hl7.Fhir.Model.ValueSet.ContainsComponent();
							Parse(newItem_contains, reader); // 110
							result.Contains.Add(newItem_contains);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.VerificationResult.PrimarySourceComponent
		public void Parse(Hl7.Fhir.Model.VerificationResult.PrimarySourceComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "who":
							result.Who = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Who as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						case "type":
							var newItem_type = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_type, reader); // 50
							result.Type.Add(newItem_type);
							break;
						case "communicationMethod":
							var newItem_communicationMethod = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_communicationMethod, reader); // 60
							result.CommunicationMethod.Add(newItem_communicationMethod);
							break;
						case "validationStatus":
							result.ValidationStatus = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.ValidationStatus as Hl7.Fhir.Model.CodeableConcept, reader); // 70
							break;
						case "validationDate":
							result.ValidationDateElement = new Hl7.Fhir.Model.FhirDateTime();
							Parse(result.ValidationDateElement as Hl7.Fhir.Model.FhirDateTime, reader); // 80
							break;
						case "canPushUpdates":
							result.CanPushUpdates = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.CanPushUpdates as Hl7.Fhir.Model.CodeableConcept, reader); // 90
							break;
						case "pushTypeAvailable":
							var newItem_pushTypeAvailable = new Hl7.Fhir.Model.CodeableConcept();
							Parse(newItem_pushTypeAvailable, reader); // 100
							result.PushTypeAvailable.Add(newItem_pushTypeAvailable);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.VerificationResult.AttestationComponent
		public void Parse(Hl7.Fhir.Model.VerificationResult.AttestationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "who":
							result.Who = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Who as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						case "onBehalfOf":
							result.OnBehalfOf = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.OnBehalfOf as Hl7.Fhir.Model.ResourceReference, reader); // 50
							break;
						case "communicationMethod":
							result.CommunicationMethod = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.CommunicationMethod as Hl7.Fhir.Model.CodeableConcept, reader); // 60
							break;
						case "date":
							result.DateElement = new Hl7.Fhir.Model.Date();
							Parse(result.DateElement as Hl7.Fhir.Model.Date, reader); // 70
							break;
						case "sourceIdentityCertificate":
							result.SourceIdentityCertificateElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.SourceIdentityCertificateElement as Hl7.Fhir.Model.FhirString, reader); // 80
							break;
						case "proxyIdentityCertificate":
							result.ProxyIdentityCertificateElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ProxyIdentityCertificateElement as Hl7.Fhir.Model.FhirString, reader); // 90
							break;
						case "proxySignature":
							result.ProxySignature = new Hl7.Fhir.Model.Signature();
							Parse(result.ProxySignature as Hl7.Fhir.Model.Signature, reader); // 100
							break;
						case "sourceSignature":
							result.SourceSignature = new Hl7.Fhir.Model.Signature();
							Parse(result.SourceSignature as Hl7.Fhir.Model.Signature, reader); // 110
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.VerificationResult.ValidatorComponent
		public void Parse(Hl7.Fhir.Model.VerificationResult.ValidatorComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "organization":
							result.Organization = new Hl7.Fhir.Model.ResourceReference();
							Parse(result.Organization as Hl7.Fhir.Model.ResourceReference, reader); // 40
							break;
						case "identityCertificate":
							result.IdentityCertificateElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.IdentityCertificateElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "attestationSignature":
							result.AttestationSignature = new Hl7.Fhir.Model.Signature();
							Parse(result.AttestationSignature as Hl7.Fhir.Model.Signature, reader); // 60
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.VisionPrescription.LensSpecificationComponent
		public void Parse(Hl7.Fhir.Model.VisionPrescription.LensSpecificationComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "product":
							result.Product = new Hl7.Fhir.Model.CodeableConcept();
							Parse(result.Product as Hl7.Fhir.Model.CodeableConcept, reader); // 40
							break;
						case "eye":
							result.EyeElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.VisionPrescription.VisionEyes>();
							Parse(result.EyeElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.VisionPrescription.VisionEyes>, reader); // 50
							break;
						case "sphere":
							result.SphereElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.SphereElement as Hl7.Fhir.Model.FhirDecimal, reader); // 60
							break;
						case "cylinder":
							result.CylinderElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.CylinderElement as Hl7.Fhir.Model.FhirDecimal, reader); // 70
							break;
						case "axis":
							result.AxisElement = new Hl7.Fhir.Model.Integer();
							Parse(result.AxisElement as Hl7.Fhir.Model.Integer, reader); // 80
							break;
						case "prism":
							var newItem_prism = new Hl7.Fhir.Model.VisionPrescription.PrismComponent();
							Parse(newItem_prism, reader); // 90
							result.Prism.Add(newItem_prism);
							break;
						case "add":
							result.AddElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.AddElement as Hl7.Fhir.Model.FhirDecimal, reader); // 100
							break;
						case "power":
							result.PowerElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.PowerElement as Hl7.Fhir.Model.FhirDecimal, reader); // 110
							break;
						case "backCurve":
							result.BackCurveElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.BackCurveElement as Hl7.Fhir.Model.FhirDecimal, reader); // 120
							break;
						case "diameter":
							result.DiameterElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.DiameterElement as Hl7.Fhir.Model.FhirDecimal, reader); // 130
							break;
						case "duration":
							result.Duration = new Hl7.Fhir.Model.SimpleQuantity();
							Parse(result.Duration as Hl7.Fhir.Model.SimpleQuantity, reader); // 140
							break;
						case "color":
							result.ColorElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.ColorElement as Hl7.Fhir.Model.FhirString, reader); // 150
							break;
						case "brand":
							result.BrandElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.BrandElement as Hl7.Fhir.Model.FhirString, reader); // 160
							break;
						case "note":
							var newItem_note = new Hl7.Fhir.Model.Annotation();
							Parse(newItem_note, reader); // 170
							result.Note.Add(newItem_note);
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.VisionPrescription.PrismComponent
		public void Parse(Hl7.Fhir.Model.VisionPrescription.PrismComponent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "modifierExtension":
							var newItem_modifierExtension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_modifierExtension, reader); // 30
							result.ModifierExtension.Add(newItem_modifierExtension);
							break;
						case "amount":
							result.AmountElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.AmountElement as Hl7.Fhir.Model.FhirDecimal, reader); // 40
							break;
						case "base":
							result.BaseElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.VisionPrescription.VisionBase>();
							Parse(result.BaseElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.VisionPrescription.VisionBase>, reader); // 50
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Account.AccountStatus
		public void Parse(Hl7.Fhir.Model.Account.AccountStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.PublicationStatus
		public void Parse(Hl7.Fhir.Model.PublicationStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ActivityDefinition.RequestResourceType
		public void Parse(Hl7.Fhir.Model.ActivityDefinition.RequestResourceType result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.RequestIntent
		public void Parse(Hl7.Fhir.Model.RequestIntent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.RequestPriority
		public void Parse(Hl7.Fhir.Model.RequestPriority result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SimpleQuantity
		public void Parse(Hl7.Fhir.Model.SimpleQuantity result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			if (reader.MoveToFirstAttribute())
			{
			    do
			    {
				    switch (reader.Name)
				    {
						case "id":
							result.ElementId = reader.Value;
							break;
				    }
			    } while (reader.MoveToNextAttribute());
			    reader.MoveToElement();
			}
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						case "extension":
							var newItem_extension = new Hl7.Fhir.Model.Extension();
							Parse(newItem_extension, reader); // 20
							result.Extension.Add(newItem_extension);
							break;
						case "value":
							result.ValueElement = new Hl7.Fhir.Model.FhirDecimal();
							Parse(result.ValueElement as Hl7.Fhir.Model.FhirDecimal, reader); // 30
							break;
						case "comparator":
							result.ComparatorElement = new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Quantity.QuantityComparator>();
							Parse(result.ComparatorElement as Hl7.Fhir.Model.Code<Hl7.Fhir.Model.Quantity.QuantityComparator>, reader); // 40
							break;
						case "unit":
							result.UnitElement = new Hl7.Fhir.Model.FhirString();
							Parse(result.UnitElement as Hl7.Fhir.Model.FhirString, reader); // 50
							break;
						case "system":
							result.SystemElement = new Hl7.Fhir.Model.FhirUri();
							Parse(result.SystemElement as Hl7.Fhir.Model.FhirUri, reader); // 60
							break;
						case "code":
							result.CodeElement = new Hl7.Fhir.Model.Code();
							Parse(result.CodeElement as Hl7.Fhir.Model.Code, reader); // 70
							break;
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.AdverseEvent.AdverseEventActuality
		public void Parse(Hl7.Fhir.Model.AdverseEvent.AdverseEventActuality result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.AllergyIntolerance.AllergyIntoleranceType
		public void Parse(Hl7.Fhir.Model.AllergyIntolerance.AllergyIntoleranceType result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.AllergyIntolerance.AllergyIntoleranceCriticality
		public void Parse(Hl7.Fhir.Model.AllergyIntolerance.AllergyIntoleranceCriticality result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Appointment.AppointmentStatus
		public void Parse(Hl7.Fhir.Model.Appointment.AppointmentStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ParticipationStatus
		public void Parse(Hl7.Fhir.Model.ParticipationStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.AuditEvent.AuditEventAction
		public void Parse(Hl7.Fhir.Model.AuditEvent.AuditEventAction result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.AuditEvent.AuditEventOutcome
		public void Parse(Hl7.Fhir.Model.AuditEvent.AuditEventOutcome result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.BiologicallyDerivedProduct.BiologicallyDerivedProductCategory
		public void Parse(Hl7.Fhir.Model.BiologicallyDerivedProduct.BiologicallyDerivedProductCategory result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.BiologicallyDerivedProduct.BiologicallyDerivedProductStatus
		public void Parse(Hl7.Fhir.Model.BiologicallyDerivedProduct.BiologicallyDerivedProductStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Bundle.BundleType
		public void Parse(Hl7.Fhir.Model.Bundle.BundleType result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CapabilityStatementKind
		public void Parse(Hl7.Fhir.Model.CapabilityStatementKind result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.FHIRVersion
		public void Parse(Hl7.Fhir.Model.FHIRVersion result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.RequestStatus
		public void Parse(Hl7.Fhir.Model.RequestStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CarePlan.CarePlanIntent
		public void Parse(Hl7.Fhir.Model.CarePlan.CarePlanIntent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CareTeam.CareTeamStatus
		public void Parse(Hl7.Fhir.Model.CareTeam.CareTeamStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ChargeItem.ChargeItemStatus
		public void Parse(Hl7.Fhir.Model.ChargeItem.ChargeItemStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.FinancialResourceStatusCodes
		public void Parse(Hl7.Fhir.Model.FinancialResourceStatusCodes result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Use
		public void Parse(Hl7.Fhir.Model.Use result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ClaimProcessingCodes
		public void Parse(Hl7.Fhir.Model.ClaimProcessingCodes result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ClinicalImpression.ClinicalImpressionStatus
		public void Parse(Hl7.Fhir.Model.ClinicalImpression.ClinicalImpressionStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CodeSystem.CodeSystemHierarchyMeaning
		public void Parse(Hl7.Fhir.Model.CodeSystem.CodeSystemHierarchyMeaning result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CodeSystem.CodeSystemContentMode
		public void Parse(Hl7.Fhir.Model.CodeSystem.CodeSystemContentMode result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.EventStatus
		public void Parse(Hl7.Fhir.Model.EventStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CompartmentType
		public void Parse(Hl7.Fhir.Model.CompartmentType result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.CompositionStatus
		public void Parse(Hl7.Fhir.Model.CompositionStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Composition.v3_ConfidentialityClassification
		public void Parse(Hl7.Fhir.Model.Composition.v3_ConfidentialityClassification result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Consent.ConsentState
		public void Parse(Hl7.Fhir.Model.Consent.ConsentState result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Contract.ContractResourceStatusCodes
		public void Parse(Hl7.Fhir.Model.Contract.ContractResourceStatusCodes result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ObservationStatus
		public void Parse(Hl7.Fhir.Model.ObservationStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.DetectedIssue.DetectedIssueSeverity
		public void Parse(Hl7.Fhir.Model.DetectedIssue.DetectedIssueSeverity result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Device.FHIRDeviceStatus
		public void Parse(Hl7.Fhir.Model.Device.FHIRDeviceStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.DeviceMetric.DeviceMetricOperationalStatus
		public void Parse(Hl7.Fhir.Model.DeviceMetric.DeviceMetricOperationalStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.DeviceMetric.DeviceMetricColor
		public void Parse(Hl7.Fhir.Model.DeviceMetric.DeviceMetricColor result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.DeviceMetric.DeviceMetricCategory
		public void Parse(Hl7.Fhir.Model.DeviceMetric.DeviceMetricCategory result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.DeviceUseStatement.DeviceUseStatementStatus
		public void Parse(Hl7.Fhir.Model.DeviceUseStatement.DeviceUseStatementStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.DiagnosticReport.DiagnosticReportStatus
		public void Parse(Hl7.Fhir.Model.DiagnosticReport.DiagnosticReportStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.DocumentReferenceStatus
		public void Parse(Hl7.Fhir.Model.DocumentReferenceStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Encounter.EncounterStatus
		public void Parse(Hl7.Fhir.Model.Encounter.EncounterStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Endpoint.EndpointStatus
		public void Parse(Hl7.Fhir.Model.Endpoint.EndpointStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.EpisodeOfCare.EpisodeOfCareStatus
		public void Parse(Hl7.Fhir.Model.EpisodeOfCare.EpisodeOfCareStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.EvidenceVariableType
		public void Parse(Hl7.Fhir.Model.EvidenceVariableType result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ExplanationOfBenefit.ExplanationOfBenefitStatus
		public void Parse(Hl7.Fhir.Model.ExplanationOfBenefit.ExplanationOfBenefitStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.FamilyMemberHistory.FamilyHistoryStatus
		public void Parse(Hl7.Fhir.Model.FamilyMemberHistory.FamilyHistoryStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Flag.FlagStatus
		public void Parse(Hl7.Fhir.Model.Flag.FlagStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Goal.GoalLifecycleStatus
		public void Parse(Hl7.Fhir.Model.Goal.GoalLifecycleStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ResourceType
		public void Parse(Hl7.Fhir.Model.ResourceType result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Group.GroupType
		public void Parse(Hl7.Fhir.Model.Group.GroupType result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.GuidanceResponse.GuidanceResponseStatus
		public void Parse(Hl7.Fhir.Model.GuidanceResponse.GuidanceResponseStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ImagingStudy.ImagingStudyStatus
		public void Parse(Hl7.Fhir.Model.ImagingStudy.ImagingStudyStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Immunization.ImmunizationStatusCodes
		public void Parse(Hl7.Fhir.Model.Immunization.ImmunizationStatusCodes result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ImmunizationEvaluation.ImmunizationEvaluationStatusCodes
		public void Parse(Hl7.Fhir.Model.ImmunizationEvaluation.ImmunizationEvaluationStatusCodes result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ImplementationGuide.SPDXLicense
		public void Parse(Hl7.Fhir.Model.ImplementationGuide.SPDXLicense result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Invoice.InvoiceStatus
		public void Parse(Hl7.Fhir.Model.Invoice.InvoiceStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.List.ListStatus
		public void Parse(Hl7.Fhir.Model.List.ListStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ListMode
		public void Parse(Hl7.Fhir.Model.ListMode result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Location.LocationStatus
		public void Parse(Hl7.Fhir.Model.Location.LocationStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Location.LocationMode
		public void Parse(Hl7.Fhir.Model.Location.LocationMode result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MeasureReport.MeasureReportStatus
		public void Parse(Hl7.Fhir.Model.MeasureReport.MeasureReportStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MeasureReport.MeasureReportType
		public void Parse(Hl7.Fhir.Model.MeasureReport.MeasureReportType result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Medication.MedicationStatusCodes
		public void Parse(Hl7.Fhir.Model.Medication.MedicationStatusCodes result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicationAdministration.MedicationAdministrationStatusCodes
		public void Parse(Hl7.Fhir.Model.MedicationAdministration.MedicationAdministrationStatusCodes result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicationDispense.MedicationDispenseStatusCodes
		public void Parse(Hl7.Fhir.Model.MedicationDispense.MedicationDispenseStatusCodes result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicationKnowledge.MedicationKnowledgeStatusCodes
		public void Parse(Hl7.Fhir.Model.MedicationKnowledge.MedicationKnowledgeStatusCodes result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicationRequest.medicationrequestStatus
		public void Parse(Hl7.Fhir.Model.MedicationRequest.medicationrequestStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicationRequest.medicationRequestIntent
		public void Parse(Hl7.Fhir.Model.MedicationRequest.medicationRequestIntent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MedicationStatement.MedicationStatusCodes
		public void Parse(Hl7.Fhir.Model.MedicationStatement.MedicationStatusCodes result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MessageDefinition.MessageSignificanceCategory
		public void Parse(Hl7.Fhir.Model.MessageDefinition.MessageSignificanceCategory result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MessageDefinition.messageheader_response_request
		public void Parse(Hl7.Fhir.Model.MessageDefinition.messageheader_response_request result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.MolecularSequence.sequenceType
		public void Parse(Hl7.Fhir.Model.MolecularSequence.sequenceType result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.NamingSystem.NamingSystemType
		public void Parse(Hl7.Fhir.Model.NamingSystem.NamingSystemType result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.OperationDefinition.OperationKind
		public void Parse(Hl7.Fhir.Model.OperationDefinition.OperationKind result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.AdministrativeGender
		public void Parse(Hl7.Fhir.Model.AdministrativeGender result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.QuestionnaireResponse.QuestionnaireResponseStatus
		public void Parse(Hl7.Fhir.Model.QuestionnaireResponse.QuestionnaireResponseStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ResearchElementDefinition.ResearchElementType
		public void Parse(Hl7.Fhir.Model.ResearchElementDefinition.ResearchElementType result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ResearchStudy.ResearchStudyStatus
		public void Parse(Hl7.Fhir.Model.ResearchStudy.ResearchStudyStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.ResearchSubject.ResearchSubjectStatus
		public void Parse(Hl7.Fhir.Model.ResearchSubject.ResearchSubjectStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SearchParamType
		public void Parse(Hl7.Fhir.Model.SearchParamType result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SearchParameter.XPathUsageType
		public void Parse(Hl7.Fhir.Model.SearchParameter.XPathUsageType result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Slot.SlotStatus
		public void Parse(Hl7.Fhir.Model.Slot.SlotStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Specimen.SpecimenStatus
		public void Parse(Hl7.Fhir.Model.Specimen.SpecimenStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.StructureDefinition.StructureDefinitionKind
		public void Parse(Hl7.Fhir.Model.StructureDefinition.StructureDefinitionKind result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.StructureDefinition.TypeDerivationRule
		public void Parse(Hl7.Fhir.Model.StructureDefinition.TypeDerivationRule result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Subscription.SubscriptionStatus
		public void Parse(Hl7.Fhir.Model.Subscription.SubscriptionStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Substance.FHIRSubstanceStatus
		public void Parse(Hl7.Fhir.Model.Substance.FHIRSubstanceStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SupplyDelivery.SupplyDeliveryStatus
		public void Parse(Hl7.Fhir.Model.SupplyDelivery.SupplyDeliveryStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.SupplyRequest.SupplyRequestStatus
		public void Parse(Hl7.Fhir.Model.SupplyRequest.SupplyRequestStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Task.TaskStatus
		public void Parse(Hl7.Fhir.Model.Task.TaskStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.Task.TaskIntent
		public void Parse(Hl7.Fhir.Model.Task.TaskIntent result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TerminologyCapabilities.CodeSearchSupport
		public void Parse(Hl7.Fhir.Model.TerminologyCapabilities.CodeSearchSupport result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TestReport.TestReportStatus
		public void Parse(Hl7.Fhir.Model.TestReport.TestReportStatus result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.TestReport.TestReportResult
		public void Parse(Hl7.Fhir.Model.TestReport.TestReportResult result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
		// Hl7.Fhir.Model.VerificationResult.status
		public void Parse(Hl7.Fhir.Model.VerificationResult.status result, XmlReader reader)
		{
			// skip ignored elements
			while (ShouldSkipNodeType(reader.NodeType))
			    reader.Read();
			
			if (reader.EOF)
			    return;
			
			
			if (reader.IsEmptyElement)
			{
			    // contextLocation.Pop();
			    return;
			}
			
			// otherwise proceed to read all the other nodes
			while (reader.Read())
			{
				if (reader.IsStartElement())
				{
					switch (reader.Name)
					{
						default:
							// Property not found
							// System.Diagnostics.Trace.WriteLine($"Unexpected token found {reader.Name}");
							reader.ReadOuterXml();
							break;
					}
				}
				else if (reader.NodeType == XmlNodeType.EndElement || reader.IsStartElement() && reader.IsEmptyElement)
				{
					break;
				}
			}
		}
	}
}
