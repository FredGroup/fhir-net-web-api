<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="$(SolutionDir)\packages\Hl7.Fhir.Support.1.9.0\lib\net45\Hl7.Fhir.Support.dll" #>
<#@ assembly name="$(SolutionDir)\packages\Hl7.Fhir.Support.Poco.1.9.0\lib\net45\Hl7.Fhir.Support.Poco.dll" #>
<#@ assembly name="$(SolutionDir)\packages\Hl7.Fhir.ElementModel.1.9.0\lib\net45\Hl7.Fhir.ElementModel.dll" #>
<#@ assembly name="$(SolutionDir)\packages\Hl7.FhirPath.1.9.0\lib\net45\Hl7.FhirPath.dll" #>
<#@ assembly name="$(SolutionDir)\packages\Hl7.Fhir.Serialization.1.9.0\lib\net45\Hl7.Fhir.Serialization.dll" #>
<#@ assembly name="$(SolutionDir)\packages\Hl7.Fhir.R4.1.9.0\lib\net45\Hl7.Fhir.R4.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="Hl7.Fhir.Introspection" #>
<#@ output extension=".cs" encoding="utf-8" #>
// -----------------------------------------------------------------------------
// GENERATED CODE - DO NOT EDIT
// Generated: <#= DateTime.Now #>
// -----------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using Hl7.Fhir.Model;
using Hl7.Fhir.Utility;
using System.Xml.Serialization;
using System.Xml;
using System.Xml.Linq;
using System.Threading;

namespace Hl7.Fhir.CustomSerializer
{
    public partial class FhirXmlSerializationReader : XmlSerializationReader
    {
        public Resource Parse()
        {
            var doc = this.ReadXmlDocument(false);
			if (doc.DocumentElement == null && doc.FirstChild?.NodeType == XmlNodeType.XmlDeclaration)
				doc = this.ReadXmlDocument(false); // skip to the document itself
			return Parse(doc.DocumentElement);
		}
        public Resource Parse(XmlElement element)
        {
			if (element == null)
				return null;
            Resource result;
            switch(element.Name)
            {
<#	foreach (string ResourceName in Hl7.Fhir.Model.ModelInfo.SupportedResources)
    {
#>                case "<#= ResourceName #>":
                    result = new <#= ResourceName #>();
                    Parse(result as <#= ResourceName #>, element);
                    break;
<#	}
#>
                default:
                    result = null;
                    break;
            }
            return result;
        }

        protected override void InitCallbacks()
        {
        }

        protected override void InitIDs()
        {
        }

        public void Parse<T>(Code<T> result, XmlElement doc)
            where T : struct
        {
			foreach (XmlAttribute childAttr in doc.Attributes)
			{
				switch (childAttr.Name)
				{
					case "id":
						result.ElementId = childAttr.Value;
						break;
					case "value":
						result.ObjectValue = childAttr.Value;
						break;
					default:
						// Property not found
						// System.Diagnostics.Trace.WriteLine($"Unexpected token found {childAttr.Name}");
						break;
				}
			}
			foreach (XmlNode childNode in doc.ChildNodes)
			{
				if (!(childNode is XmlElement)) continue; var child = childNode as XmlElement;
				switch (child.Name)
				{
					case "extension":
						var newItem_extension = new Hl7.Fhir.Model.Extension();
						Parse(newItem_extension, child); // 20
						result.Extension.Add(newItem_extension);
						break;
					default:
						// Property not found
						// System.Diagnostics.Trace.WriteLine($"Unexpected token found {child.Name}");
						break;
				}
			}

        }
<#
	Dictionary<string, Type> generateTypes = new Dictionary<string, Type>();
    foreach (var v in Hl7.Fhir.Model.ModelInfo.FhirTypeToCsType.Keys)
    {
        if (!Hl7.Fhir.Model.ModelInfo.IsKnownResource(v))
        {
            var dtt = Hl7.Fhir.Model.ModelInfo.GetTypeForFhirType(v);
			if (dtt != null)
			{
				if (Hl7.Fhir.Model.ModelInfo.IsProfiledQuantity(dtt))
					continue;
				generateTypes.Add("Hl7.Fhir.Model."+ dtt.Name, dtt);
			}
			else
			{
				WriteLine($"// Type {v} not found");
			}
        }
    }
	generateTypes.Add("Hl7.Fhir.Model.ElementDefinition.ConstraintComponent", typeof(Hl7.Fhir.Model.ElementDefinition.ConstraintComponent));
	generateTypes.Add("Hl7.Fhir.Model.Dosage.DoseAndRateComponent", typeof(Hl7.Fhir.Model.Dosage.DoseAndRateComponent));
	generateTypes.Add("Hl7.Fhir.Model.DataRequirement.SortComponent", typeof(Hl7.Fhir.Model.DataRequirement.SortComponent));
	generateTypes.Add("Hl7.Fhir.Model.DataRequirement.DateFilterComponent", typeof(Hl7.Fhir.Model.DataRequirement.DateFilterComponent));
	generateTypes.Add("Hl7.Fhir.Model.DataRequirement.CodeFilterComponent", typeof(Hl7.Fhir.Model.DataRequirement.CodeFilterComponent));
	generateTypes.Add("Hl7.Fhir.Model.ElementDefinition.DiscriminatorComponent", typeof(Hl7.Fhir.Model.ElementDefinition.DiscriminatorComponent));
	generateTypes.Add("Hl7.Fhir.Model.ElementDefinition.ExampleComponent", typeof(Hl7.Fhir.Model.ElementDefinition.ExampleComponent));
	generateTypes.Add("Hl7.Fhir.Model.ElementDefinition.MappingComponent", typeof(Hl7.Fhir.Model.ElementDefinition.MappingComponent));
	generateTypes.Add("Hl7.Fhir.Model.SubstanceAmount.ReferenceRangeComponent", typeof(Hl7.Fhir.Model.SubstanceAmount.ReferenceRangeComponent));
	generateTypes.Add("Hl7.Fhir.Model.ElementDefinition.TypeRefComponent", typeof(Hl7.Fhir.Model.ElementDefinition.TypeRefComponent));
	generateTypes.Add("Hl7.Fhir.Model.ElementDefinition.SlicingComponent", typeof(Hl7.Fhir.Model.ElementDefinition.SlicingComponent));
	generateTypes.Add("Hl7.Fhir.Model.ElementDefinition.BaseComponent", typeof(Hl7.Fhir.Model.ElementDefinition.BaseComponent));
	generateTypes.Add("Hl7.Fhir.Model.ElementDefinition.ElementDefinitionBindingComponent", typeof(Hl7.Fhir.Model.ElementDefinition.ElementDefinitionBindingComponent));
	generateTypes.Add("Hl7.Fhir.Model.Timing.RepeatComponent", typeof(Hl7.Fhir.Model.Timing.RepeatComponent));

    WriteLine("\t\t#region << Resource Parse >>");

	foreach (string ResourceName in Hl7.Fhir.Model.ModelInfo.SupportedResources)
    {
		Type tr = typeof(Hl7.Fhir.Model.ModelInfo).Assembly.GetType("Hl7.Fhir.Model." + ResourceName);
        if (tr.BaseType.Name != "DomainResource" && tr.BaseType.Name != "Resource")
		{
			// WriteLine("Resourcename: " + ResourceName + " : " + tr.BaseType.Name);
			continue;
        }
        if (Hl7.Fhir.Model.ModelInfo.IsCoreSuperType(Hl7.Fhir.Model.ModelInfo.GetFhirTypeNameForType(tr)))
            continue;

		PushIndent("\t");
		PushIndent("\t");
        WriteLine($"private void Parse({tr.Name} result, XmlElement document)");
        WriteLine("{");

		PushIndent("\t");
	    WriteLine("foreach (XmlNode childNode in document.ChildNodes)");
	    WriteLine("{");
		PushIndent("\t");
	    WriteLine("if (!(childNode is XmlElement)) continue; var child = childNode as XmlElement;");
		WriteLine("switch (child.Name)");
	    WriteLine("{");
		WriteResourceProperties(tr, generateTypes);

	    WriteLine("");
	    WriteLine("\tdefault:");
	    WriteLine("\t\t// Property not found");
	    WriteLine("\t\t// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {child.Name}\");");
	    WriteLine("\t\tbreak;");
	    WriteLine("}");
		PopIndent();
	    WriteLine("}");
		PopIndent();

        WriteLine("}");
        WriteLine("");

		PopIndent();
		PopIndent();
    }
    WriteLine("#endregion");

    WriteLine("// ---------------------------");
	foreach (Type tr in generateTypes.Values)
	{
        // if (!Hl7.Fhir.Model.ModelInfo.IsCoreModelType(Hl7.Fhir.Model.ModelInfo.GetFhirTypeNameForType(tr)))
        //    continue;
		string typeName = GetTypeName(tr);
		if (typeName.StartsWith("System.Collections.Generic.List"))
			continue;
		if (typeName.StartsWith("Hl7.Fhir.Model.Code<"))
			continue;
		if (typeName == "Hl7.Fhir.Model.Element" || typeName == "Hl7.Fhir.Model.Duration")
			continue;
		if (typeName == "Hl7.Fhir.Model.DomainResource")
			continue;
		else if (typeName == "Hl7.Fhir.Model.Resource")
			continue;
		PushIndent("\t");
		PushIndent("\t");
	    WriteLine($"// {typeName}");

		WriteLine($"public void Parse({typeName} result, XmlElement doc)");
        WriteLine("{");

		PushIndent("\t");

		if (HasAttributeProperties(tr))
		{
			WriteLine("foreach (XmlAttribute childAttr in doc.Attributes)");
			WriteLine("{");
			WriteLine("    switch (childAttr.Name)");
			WriteLine("    {");
			PushIndent("\t");
			WritePrimitiveElementProperties(tr);
			PopIndent();
			WriteLine("    }");
			WriteLine("}");
		}

	    WriteLine("foreach (XmlNode childNode in doc.ChildNodes)");
	    WriteLine("{");
		PushIndent("\t");
	    WriteLine("if (!(childNode is XmlElement)) continue; var child = childNode as XmlElement;");
	    WriteLine("switch (child.Name)");
	    WriteLine("{");

		WriteElementProperties(tr);

	    WriteLine("");
	    WriteLine("\tdefault:");
	    WriteLine("\t\t// Property not found");
	    WriteLine("\t\t// System.Diagnostics.Trace.WriteLine($\"Unexpected token found {child.Name}\");");
	    WriteLine("\t\tbreak;");
	    WriteLine("}");
		PopIndent();
	    WriteLine("}");
		PopIndent();

        WriteLine("}");
		PopIndent();
		PopIndent();
	}
#>
	}
}
<#+ 

	public void WriteResourceProperties(System.Type tr, Dictionary<string, Type> generateTypes)
	{
		if (tr.BaseType.IsSubclassOf(typeof(Hl7.Fhir.Model.Base)))
		{
			WriteResourceProperties(tr.BaseType, null);
		}

		var props = tr.GetProperties(BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Instance);
		foreach (var prop in props)
		{
			if (prop.GetCustomAttribute(typeof(NotMappedAttribute)) != null)
				continue;
			FhirElementAttribute fea = prop.GetCustomAttribute(typeof(FhirElementAttribute)) as FhirElementAttribute;
			if (fea != null)
			{
				WriteProperty(tr, prop, fea, generateTypes);
			}
		}
	}

	public void WriteElementProperties(System.Type tr)
	{
		if (tr.BaseType.IsSubclassOf(typeof(Hl7.Fhir.Model.Base)))
			WriteElementProperties(tr.BaseType);
		var props = tr.GetProperties(BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Instance);
        foreach (var prop in props)
        {
            if (prop.GetCustomAttribute(typeof(NotMappedAttribute)) != null)
                continue;
            FhirElementAttribute fea = prop.GetCustomAttribute(typeof(FhirElementAttribute)) as FhirElementAttribute;
			if (fea == null)
				continue;
			if (fea.XmlSerialization == Hl7.Fhir.Specification.XmlRepresentation.XmlAttr)
				continue;
			if (fea.XmlSerialization != Hl7.Fhir.Specification.XmlRepresentation.None)
				WriteLine($"\t// Xml Serialization: {fea.XmlSerialization}");
			WriteProperty(tr, prop, fea, null);
		}
	}

	public bool HasAttributeProperties(System.Type tr)
	{
		var props = tr.GetProperties(BindingFlags.Public | BindingFlags.FlattenHierarchy | BindingFlags.Instance);
        foreach (var prop in props)
        {
            if (prop.GetCustomAttribute(typeof(NotMappedAttribute)) != null)
                continue;
            FhirElementAttribute fea = prop.GetCustomAttribute(typeof(FhirElementAttribute)) as FhirElementAttribute;
			if (fea == null)
				continue;
			if (fea.XmlSerialization == Hl7.Fhir.Specification.XmlRepresentation.XmlAttr)
				return true;
		}
		return false;
	}

	public void WritePrimitiveElementProperties(System.Type tr)
	{
		var props = tr.GetProperties(BindingFlags.Public | BindingFlags.FlattenHierarchy | BindingFlags.Instance);
        foreach (var prop in props)
        {
            if (prop.GetCustomAttribute(typeof(NotMappedAttribute)) != null)
                continue;
            FhirElementAttribute fea = prop.GetCustomAttribute(typeof(FhirElementAttribute)) as FhirElementAttribute;
			if (fea == null)
				continue;
			if (fea.XmlSerialization != Hl7.Fhir.Specification.XmlRepresentation.XmlAttr)
				continue;
			WriteProperty(tr, prop, fea, null);
		}
	}

	public void WriteProperty(System.Type tr, PropertyInfo prop, FhirElementAttribute fea, Dictionary<string, Type> generateTypes)
	{
		// Skip all the coded data properties for now
		if (prop.PropertyType.GenericTypeArguments.Length > 0 && GetTypeName(prop.PropertyType.GenericTypeArguments[0]).StartsWith("Hl7.Fhir.Model.Code<"))
			return;
			
		if (fea.XmlSerialization == Hl7.Fhir.Specification.XmlRepresentation.XHtml)
		{
			WriteLine($"\tcase \"{fea.Name}\":");
			WriteLine($"\t\tresult.{prop.Name} = child.OuterXml;");
			WriteLine($"\t\tbreak;");
			return;
		}
		var vat = prop.GetCustomAttribute(typeof(Hl7.Fhir.Validation.AllowedTypesAttribute)) as Hl7.Fhir.Validation.AllowedTypesAttribute;
		if (vat != null)
		{
			// If there is an allowed types, then there could be other values
			foreach (var t in vat.Types)
			{
				var pta = t.GetCustomAttribute(typeof(FhirTypeAttribute)) as FhirTypeAttribute;
				if (pta.Name == "Resource")
				{
					WriteLine($"\tcase \"{fea.Name}\":");
					WriteLine($"\t\tvar {prop.Name}Resource = Parse(child.FirstChild as XmlElement); // {fea.Order}");
					if (GetTypeName(prop.PropertyType).StartsWith("System.Collections.Generic.List"))
					{
						WriteLine($"\t\tif ({prop.Name}Resource != null)");
						WriteLine($"\t\t\tresult.{prop.Name}.Add({prop.Name}Resource);");
					}
					else
					{
						WriteLine($"\t\tresult.{prop.Name} = {prop.Name}Resource;");
					}
					WriteLine($"\t\tbreak;");
				}
				else
				{
					if (GetTypeName(prop.PropertyType).StartsWith("System.Collections.Generic.List"))
					{
						WriteLine($"\tcase \"{fea.Name}{pta.Name.Substring(0,1).ToUpper()}{pta.Name.Substring(1)}\":");
						WriteLine($"\t\tvar newItem = new {GetTypeName(t)}();");
						WriteLine($"\t\tParse(newItem, child); // {fea.Order}");
						WriteLine($"\t\tresult.{prop.Name}.Add(newItem);");
						WriteLine($"\t\tbreak;");
					}
					else
					{
						WriteLine($"\tcase \"{fea.Name}{pta.Name.Substring(0,1).ToUpper()}{pta.Name.Substring(1)}\":");
						WriteLine($"\t\tresult.{prop.Name} = new {GetTypeName(t)}();");
						WriteLine($"\t\tParse(result.{prop.Name} as {GetTypeName(t)}, child); // {fea.Order}");
						WriteLine($"\t\tbreak;");
					}
				}
			}
		}
		else
		{
			if (fea.XmlSerialization == Hl7.Fhir.Specification.XmlRepresentation.XmlAttr)
			{
				WriteLine($"\tcase \"{fea.Name}\":");
				if (GetTypeName(prop.PropertyType) == "System.String")
				{
					WriteLine($"\t\tresult.{prop.Name} = childAttr.Value;");
				}
				else
				{
					if (GetTypeName(prop.PropertyType).StartsWith("System.Nullable<"))
						WriteLine($"\t\tresult.{prop.Name} = Hl7.Fhir.Serialization.PrimitiveTypeConverter.ConvertTo<{GetTypeName(prop.PropertyType.GenericTypeArguments[0])}>(childAttr.Value);");
					else
						WriteLine($"\t\tresult.{prop.Name} = Hl7.Fhir.Serialization.PrimitiveTypeConverter.ConvertTo<{GetTypeName(prop.PropertyType)}>(childAttr.Value);");
					// WriteLine($"\t\t// Parse(result.{prop.Name} as {GetTypeName(prop.PropertyType)}, childAttr); // {fea.Order}");
				}
				WriteLine($"\t\tbreak;");
			}
			else
			{
				if (GetTypeName(prop.PropertyType).StartsWith("System.Collections.Generic.List"))
				{
					WriteLine($"\tcase \"{fea.Name}\":");
					WriteLine($"\t\tvar newItem_{fea.Name} = new {GetTypeName(prop.PropertyType.GenericTypeArguments[0])}();");
					WriteLine($"\t\tParse(newItem_{fea.Name}, child); // {fea.Order}");
					WriteLine($"\t\tresult.{prop.Name}.Add(newItem_{fea.Name});");
					WriteLine($"\t\tbreak;");
				}
				else
				{
					WriteLine($"\tcase \"{fea.Name}\":");
					WriteLine($"\t\tresult.{prop.Name} = new {GetTypeName(prop.PropertyType)}();");
					WriteLine($"\t\tParse(result.{prop.Name} as {GetTypeName(prop.PropertyType)}, child); // {fea.Order}");
					WriteLine($"\t\tbreak;");
				}
			}
		}
		if (generateTypes != null && !generateTypes.ContainsKey(prop.PropertyType.FullName))
		{
			generateTypes.Add(prop.PropertyType.FullName, prop.PropertyType);
		}
		if (prop.PropertyType.GenericTypeArguments.Count() > 0)
		{
			if (generateTypes != null && !generateTypes.ContainsKey(prop.PropertyType.GenericTypeArguments[0].FullName))
			{
				generateTypes.Add(prop.PropertyType.GenericTypeArguments[0].FullName, prop.PropertyType.GenericTypeArguments[0]);
			}
		}
	}

	public void WriteAttribute(System.Type tr, PropertyInfo prop, FhirElementAttribute fea)
	{
		if (fea.XmlSerialization != Hl7.Fhir.Specification.XmlRepresentation.XmlAttr)
			return;
		WriteLine($"\tcase \"{fea.Name}\":");
		WriteLine($"\t\t// result.{prop.Name} = new {GetTypeName(prop.PropertyType)}();");
		WriteLine($"\t\t// Parse(result.{prop.Name} as {GetTypeName(prop.PropertyType)}, child); // {fea.Order}");
		WriteLine($"\t\tbreak;");
	}

	public static string GetTypeName(System.Type tr)
	{
		if (tr.Name.EndsWith("Component"))
			Console.Write("{tr}");
		string typeName = $"{tr.Namespace}.{tr.Name}";
		if (tr.IsNested)
			typeName = $"{GetTypeName(tr.DeclaringType)}.{tr.Name}";
		if (tr.GenericTypeArguments.Count() > 0)
		{
			if (tr.IsNested)
				typeName = $"{GetTypeName(tr.DeclaringType)}.{tr.Name}";
			else
				typeName = $"{tr.Namespace}.{tr.Name.Substring(0, tr.Name.Length-2)}<{GetTypeName(tr.GenericTypeArguments[0])}>";
		}
		return typeName;
	}

#>